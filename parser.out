Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    TRANSPUESTA
    DETERMINANTE
    INVERSA
    COMMENT
    THEN
    DO
    WRITE
    READ

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM ID SEMICOLON vars module main
Rule 2     programa -> PROGRAM ID SEMICOLON module main
Rule 3     programa -> PROGRAM ID SEMICOLON vars main
Rule 4     programa -> PROGRAM ID SEMICOLON main
Rule 5     main -> MAIN n_seen_func_name n_seen_main bloque_module
Rule 6     vars -> VAR vars_aux
Rule 7     vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux
Rule 8     vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type DOT
Rule 9     vars_func -> ID n_seen_var_name COLON tipo n_set_var_type COMA vars_func
Rule 10    vars_func -> ID n_seen_var_name COLON tipo n_set_var_type
Rule 11    tipo -> INT n_seen_type
Rule 12    tipo -> FLOAT n_seen_type
Rule 13    tipo -> CHAR n_seen_type
Rule 14    bloque_module -> LBRACKET vars estatuto_aux RBRACKET
Rule 15    bloque_module -> LBRACKET vars RBRACKET
Rule 16    bloque_module -> LBRACKET estatuto_aux RBRACKET
Rule 17    bloque_module -> LBRACKET RBRACKET
Rule 18    bloque -> LBRACKET estatuto_aux RBRACKET
Rule 19    bloque -> LBRACKET RBRACKET
Rule 20    estatuto_aux -> estatuto estatuto_aux
Rule 21    estatuto_aux -> estatuto
Rule 22    estatuto -> asignacion SEMICOLON
Rule 23    estatuto -> condicion SEMICOLON
Rule 24    estatuto -> escritura SEMICOLON
Rule 25    estatuto -> return SEMICOLON
Rule 26    estatuto -> for SEMICOLON
Rule 27    estatuto -> while SEMICOLON
Rule 28    estatuto -> call_module SEMICOLON
Rule 29    asignacion -> ID n_seen_factor_id EQUAL n_add_operator expresion n_assign
Rule 30    expresion -> exp n_gen_and AND n_add_operator expresion
Rule 31    expresion -> exp n_gen_and
Rule 32    exp -> exp_aux n_gen_or OR n_add_operator exp
Rule 33    exp -> exp_aux n_gen_or
Rule 34    exp_aux -> exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux
Rule 35    exp_aux -> exp_aux2 n_gen_relational LESST n_add_operator exp_aux
Rule 36    exp_aux -> exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux
Rule 37    exp_aux -> exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux
Rule 38    exp_aux -> exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux
Rule 39    exp_aux -> exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux
Rule 40    exp_aux -> exp_aux2 n_gen_relational
Rule 41    exp_aux2 -> term n_gen_term PLUS n_add_operator exp_aux2
Rule 42    exp_aux2 -> term n_gen_term MINUS n_add_operator exp_aux2
Rule 43    exp_aux2 -> term n_gen_term
Rule 44    term -> factor n_gen_factor MULTIPLY n_add_operator term
Rule 45    term -> factor n_gen_factor DIVIDE n_add_operator term
Rule 46    term -> factor n_gen_factor
Rule 47    factor -> LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom
Rule 48    factor -> CTEINT n_seen_factor_int
Rule 49    factor -> CTEF n_seen_factor_float
Rule 50    factor -> CTEC n_seen_factor_char
Rule 51    factor -> ID n_seen_factor_id
Rule 52    module -> MODULE VOID n_seen_type ID n_seen_func_name params bloque_module module
Rule 53    module -> MODULE tipo ID n_seen_func_name params bloque_module module
Rule 54    module -> MODULE VOID n_seen_type ID n_seen_func_name params bloque_module
Rule 55    module -> MODULE tipo ID n_seen_func_name params bloque_module
Rule 56    params -> LPAREN vars_func RPAREN
Rule 57    params -> LPAREN RPAREN
Rule 58    call_module -> ID LPAREN expresion RPAREN
Rule 59    call_module -> ID LPAREN RPAREN
Rule 60    return -> RETURN expresion
Rule 61    for -> FOR asignacion TO CTEINT bloque
Rule 62    while -> WHILE n_salto_while LPAREN expresion RPAREN n_cond_while bloque n_ret_while
Rule 63    condicion -> IF LPAREN expresion RPAREN n_check_exp bloque ELSE n_else bloque n_fill_end
Rule 64    condicion -> IF LPAREN expresion RPAREN n_check_exp bloque n_fill_end
Rule 65    escritura -> PRINT LPAREN escritura_aux RPAREN
Rule 66    escritura_aux -> expresion COMA escritura_aux
Rule 67    escritura_aux -> CTESTRING COMA escritura_aux
Rule 68    escritura_aux -> expresion
Rule 69    escritura_aux -> CTESTRING
Rule 70    n_seen_type -> <empty>
Rule 71    n_seen_var_name -> <empty>
Rule 72    n_seen_func_name -> <empty>
Rule 73    n_set_var_type -> <empty>
Rule 74    n_seen_factor_id -> <empty>
Rule 75    n_seen_factor_int -> <empty>
Rule 76    n_seen_factor_float -> <empty>
Rule 77    n_seen_factor_char -> <empty>
Rule 78    n_assign -> <empty>
Rule 79    n_add_operator -> <empty>
Rule 80    n_gen_term -> <empty>
Rule 81    n_gen_factor -> <empty>
Rule 82    n_gen_relational -> <empty>
Rule 83    n_gen_or -> <empty>
Rule 84    n_gen_and -> <empty>
Rule 85    n_push_fake_bottom -> <empty>
Rule 86    n_pop_fake_bottom -> <empty>
Rule 87    n_check_exp -> <empty>
Rule 88    n_fill_end -> <empty>
Rule 89    n_else -> <empty>
Rule 90    n_seen_main -> <empty>
Rule 91    n_salto_while -> <empty>
Rule 92    n_cond_while -> <empty>
Rule 93    n_ret_while -> <empty>

Terminals, with rules where they appear

AND                  : 30
CHAR                 : 13
COLON                : 7 8 9 10
COMA                 : 9 66 67
COMMENT              : 
CTEC                 : 50
CTEF                 : 49
CTEINT               : 48 61
CTESTRING            : 67 69
DBEQUALS             : 37
DETERMINANTE         : 
DIVIDE               : 45
DO                   : 
DOT                  : 8
ELSE                 : 63
EQUAL                : 29
FLOAT                : 12
FOR                  : 61
GREATEREQUAL         : 38
GREATERT             : 34
ID                   : 1 2 3 4 7 8 9 10 29 51 52 53 54 55 58 59
IF                   : 63 64
INT                  : 11
INVERSA              : 
LBRACKET             : 14 15 16 17 18 19
LESSEQUAL            : 39
LESST                : 35
LPAREN               : 47 56 57 58 59 62 63 64 65
MAIN                 : 5
MINUS                : 42
MODULE               : 52 53 54 55
MULTIPLY             : 44
NOTEQUAL             : 36
OR                   : 32
PLUS                 : 41
PRINT                : 65
PROGRAM              : 1 2 3 4
RBRACKET             : 14 15 16 17 18 19
READ                 : 
RETURN               : 60
RPAREN               : 47 56 57 58 59 62 63 64 65
SEMICOLON            : 1 2 3 4 7 22 23 24 25 26 27 28
THEN                 : 
TO                   : 61
TRANSPUESTA          : 
VAR                  : 6
VOID                 : 52 54
WHILE                : 62
WRITE                : 
error                : 

Nonterminals, with rules where they appear

asignacion           : 22 61
bloque               : 61 62 63 63 64
bloque_module        : 5 52 53 54 55
call_module          : 28
condicion            : 23
escritura            : 24
escritura_aux        : 65 66 67
estatuto             : 20 21
estatuto_aux         : 14 16 18 20
exp                  : 30 31 32
exp_aux              : 32 33 34 35 36 37 38 39
exp_aux2             : 34 35 36 37 38 39 40 41 42
expresion            : 29 30 47 58 60 62 63 64 66 68
factor               : 44 45 46
for                  : 26
main                 : 1 2 3 4
module               : 1 2 52 53
n_add_operator       : 29 30 32 34 35 36 37 38 39 41 42 44 45
n_assign             : 29
n_check_exp          : 63 64
n_cond_while         : 62
n_else               : 63
n_fill_end           : 63 64
n_gen_and            : 30 31
n_gen_factor         : 44 45 46
n_gen_or             : 32 33
n_gen_relational     : 34 35 36 37 38 39 40
n_gen_term           : 41 42 43
n_pop_fake_bottom    : 47
n_push_fake_bottom   : 47
n_ret_while          : 62
n_salto_while        : 62
n_seen_factor_char   : 50
n_seen_factor_float  : 49
n_seen_factor_id     : 29 51
n_seen_factor_int    : 48
n_seen_func_name     : 5 52 53 54 55
n_seen_main          : 5
n_seen_type          : 11 12 13 52 54
n_seen_var_name      : 7 8 9 10
n_set_var_type       : 7 8 9 10
params               : 52 53 54 55
programa             : 0
return               : 25
term                 : 41 42 43 44 45
tipo                 : 7 8 9 10 53 55
vars                 : 1 3 14 15
vars_aux             : 6 7
vars_func            : 9 56
while                : 27

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM ID SEMICOLON vars module main
    (2) programa -> . PROGRAM ID SEMICOLON module main
    (3) programa -> . PROGRAM ID SEMICOLON vars main
    (4) programa -> . PROGRAM ID SEMICOLON main

    PROGRAM         shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAM . ID SEMICOLON vars module main
    (2) programa -> PROGRAM . ID SEMICOLON module main
    (3) programa -> PROGRAM . ID SEMICOLON vars main
    (4) programa -> PROGRAM . ID SEMICOLON main

    ID              shift and go to state 3


state 3

    (1) programa -> PROGRAM ID . SEMICOLON vars module main
    (2) programa -> PROGRAM ID . SEMICOLON module main
    (3) programa -> PROGRAM ID . SEMICOLON vars main
    (4) programa -> PROGRAM ID . SEMICOLON main

    SEMICOLON       shift and go to state 4


state 4

    (1) programa -> PROGRAM ID SEMICOLON . vars module main
    (2) programa -> PROGRAM ID SEMICOLON . module main
    (3) programa -> PROGRAM ID SEMICOLON . vars main
    (4) programa -> PROGRAM ID SEMICOLON . main
    (6) vars -> . VAR vars_aux
    (52) module -> . MODULE VOID n_seen_type ID n_seen_func_name params bloque_module module
    (53) module -> . MODULE tipo ID n_seen_func_name params bloque_module module
    (54) module -> . MODULE VOID n_seen_type ID n_seen_func_name params bloque_module
    (55) module -> . MODULE tipo ID n_seen_func_name params bloque_module
    (5) main -> . MAIN n_seen_func_name n_seen_main bloque_module

    VAR             shift and go to state 8
    MODULE          shift and go to state 9
    MAIN            shift and go to state 10

    vars                           shift and go to state 5
    module                         shift and go to state 6
    main                           shift and go to state 7

state 5

    (1) programa -> PROGRAM ID SEMICOLON vars . module main
    (3) programa -> PROGRAM ID SEMICOLON vars . main
    (52) module -> . MODULE VOID n_seen_type ID n_seen_func_name params bloque_module module
    (53) module -> . MODULE tipo ID n_seen_func_name params bloque_module module
    (54) module -> . MODULE VOID n_seen_type ID n_seen_func_name params bloque_module
    (55) module -> . MODULE tipo ID n_seen_func_name params bloque_module
    (5) main -> . MAIN n_seen_func_name n_seen_main bloque_module

    MODULE          shift and go to state 9
    MAIN            shift and go to state 10

    module                         shift and go to state 11
    main                           shift and go to state 12

state 6

    (2) programa -> PROGRAM ID SEMICOLON module . main
    (5) main -> . MAIN n_seen_func_name n_seen_main bloque_module

    MAIN            shift and go to state 10

    main                           shift and go to state 13

state 7

    (4) programa -> PROGRAM ID SEMICOLON main .

    $end            reduce using rule 4 (programa -> PROGRAM ID SEMICOLON main .)


state 8

    (6) vars -> VAR . vars_aux
    (7) vars_aux -> . ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux
    (8) vars_aux -> . ID n_seen_var_name COLON tipo n_set_var_type DOT

    ID              shift and go to state 15

    vars_aux                       shift and go to state 14

state 9

    (52) module -> MODULE . VOID n_seen_type ID n_seen_func_name params bloque_module module
    (53) module -> MODULE . tipo ID n_seen_func_name params bloque_module module
    (54) module -> MODULE . VOID n_seen_type ID n_seen_func_name params bloque_module
    (55) module -> MODULE . tipo ID n_seen_func_name params bloque_module
    (11) tipo -> . INT n_seen_type
    (12) tipo -> . FLOAT n_seen_type
    (13) tipo -> . CHAR n_seen_type

    VOID            shift and go to state 16
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20

    tipo                           shift and go to state 17

state 10

    (5) main -> MAIN . n_seen_func_name n_seen_main bloque_module
    (72) n_seen_func_name -> .

    LBRACKET        reduce using rule 72 (n_seen_func_name -> .)

    n_seen_func_name               shift and go to state 21

state 11

    (1) programa -> PROGRAM ID SEMICOLON vars module . main
    (5) main -> . MAIN n_seen_func_name n_seen_main bloque_module

    MAIN            shift and go to state 10

    main                           shift and go to state 22

state 12

    (3) programa -> PROGRAM ID SEMICOLON vars main .

    $end            reduce using rule 3 (programa -> PROGRAM ID SEMICOLON vars main .)


state 13

    (2) programa -> PROGRAM ID SEMICOLON module main .

    $end            reduce using rule 2 (programa -> PROGRAM ID SEMICOLON module main .)


state 14

    (6) vars -> VAR vars_aux .

    MODULE          reduce using rule 6 (vars -> VAR vars_aux .)
    MAIN            reduce using rule 6 (vars -> VAR vars_aux .)
    RBRACKET        reduce using rule 6 (vars -> VAR vars_aux .)
    ID              reduce using rule 6 (vars -> VAR vars_aux .)
    IF              reduce using rule 6 (vars -> VAR vars_aux .)
    PRINT           reduce using rule 6 (vars -> VAR vars_aux .)
    RETURN          reduce using rule 6 (vars -> VAR vars_aux .)
    FOR             reduce using rule 6 (vars -> VAR vars_aux .)
    WHILE           reduce using rule 6 (vars -> VAR vars_aux .)


state 15

    (7) vars_aux -> ID . n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux
    (8) vars_aux -> ID . n_seen_var_name COLON tipo n_set_var_type DOT
    (71) n_seen_var_name -> .

    COLON           reduce using rule 71 (n_seen_var_name -> .)

    n_seen_var_name                shift and go to state 23

state 16

    (52) module -> MODULE VOID . n_seen_type ID n_seen_func_name params bloque_module module
    (54) module -> MODULE VOID . n_seen_type ID n_seen_func_name params bloque_module
    (70) n_seen_type -> .

    ID              reduce using rule 70 (n_seen_type -> .)

    n_seen_type                    shift and go to state 24

state 17

    (53) module -> MODULE tipo . ID n_seen_func_name params bloque_module module
    (55) module -> MODULE tipo . ID n_seen_func_name params bloque_module

    ID              shift and go to state 25


state 18

    (11) tipo -> INT . n_seen_type
    (70) n_seen_type -> .

    ID              reduce using rule 70 (n_seen_type -> .)
    SEMICOLON       reduce using rule 70 (n_seen_type -> .)
    DOT             reduce using rule 70 (n_seen_type -> .)
    COMA            reduce using rule 70 (n_seen_type -> .)
    RPAREN          reduce using rule 70 (n_seen_type -> .)

    n_seen_type                    shift and go to state 26

state 19

    (12) tipo -> FLOAT . n_seen_type
    (70) n_seen_type -> .

    ID              reduce using rule 70 (n_seen_type -> .)
    SEMICOLON       reduce using rule 70 (n_seen_type -> .)
    DOT             reduce using rule 70 (n_seen_type -> .)
    COMA            reduce using rule 70 (n_seen_type -> .)
    RPAREN          reduce using rule 70 (n_seen_type -> .)

    n_seen_type                    shift and go to state 27

state 20

    (13) tipo -> CHAR . n_seen_type
    (70) n_seen_type -> .

    ID              reduce using rule 70 (n_seen_type -> .)
    SEMICOLON       reduce using rule 70 (n_seen_type -> .)
    DOT             reduce using rule 70 (n_seen_type -> .)
    COMA            reduce using rule 70 (n_seen_type -> .)
    RPAREN          reduce using rule 70 (n_seen_type -> .)

    n_seen_type                    shift and go to state 28

state 21

    (5) main -> MAIN n_seen_func_name . n_seen_main bloque_module
    (90) n_seen_main -> .

    LBRACKET        reduce using rule 90 (n_seen_main -> .)

    n_seen_main                    shift and go to state 29

state 22

    (1) programa -> PROGRAM ID SEMICOLON vars module main .

    $end            reduce using rule 1 (programa -> PROGRAM ID SEMICOLON vars module main .)


state 23

    (7) vars_aux -> ID n_seen_var_name . COLON tipo n_set_var_type SEMICOLON vars_aux
    (8) vars_aux -> ID n_seen_var_name . COLON tipo n_set_var_type DOT

    COLON           shift and go to state 30


state 24

    (52) module -> MODULE VOID n_seen_type . ID n_seen_func_name params bloque_module module
    (54) module -> MODULE VOID n_seen_type . ID n_seen_func_name params bloque_module

    ID              shift and go to state 31


state 25

    (53) module -> MODULE tipo ID . n_seen_func_name params bloque_module module
    (55) module -> MODULE tipo ID . n_seen_func_name params bloque_module
    (72) n_seen_func_name -> .

    LPAREN          reduce using rule 72 (n_seen_func_name -> .)

    n_seen_func_name               shift and go to state 32

state 26

    (11) tipo -> INT n_seen_type .

    ID              reduce using rule 11 (tipo -> INT n_seen_type .)
    SEMICOLON       reduce using rule 11 (tipo -> INT n_seen_type .)
    DOT             reduce using rule 11 (tipo -> INT n_seen_type .)
    COMA            reduce using rule 11 (tipo -> INT n_seen_type .)
    RPAREN          reduce using rule 11 (tipo -> INT n_seen_type .)


state 27

    (12) tipo -> FLOAT n_seen_type .

    ID              reduce using rule 12 (tipo -> FLOAT n_seen_type .)
    SEMICOLON       reduce using rule 12 (tipo -> FLOAT n_seen_type .)
    DOT             reduce using rule 12 (tipo -> FLOAT n_seen_type .)
    COMA            reduce using rule 12 (tipo -> FLOAT n_seen_type .)
    RPAREN          reduce using rule 12 (tipo -> FLOAT n_seen_type .)


state 28

    (13) tipo -> CHAR n_seen_type .

    ID              reduce using rule 13 (tipo -> CHAR n_seen_type .)
    SEMICOLON       reduce using rule 13 (tipo -> CHAR n_seen_type .)
    DOT             reduce using rule 13 (tipo -> CHAR n_seen_type .)
    COMA            reduce using rule 13 (tipo -> CHAR n_seen_type .)
    RPAREN          reduce using rule 13 (tipo -> CHAR n_seen_type .)


state 29

    (5) main -> MAIN n_seen_func_name n_seen_main . bloque_module
    (14) bloque_module -> . LBRACKET vars estatuto_aux RBRACKET
    (15) bloque_module -> . LBRACKET vars RBRACKET
    (16) bloque_module -> . LBRACKET estatuto_aux RBRACKET
    (17) bloque_module -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 34

    bloque_module                  shift and go to state 33

state 30

    (7) vars_aux -> ID n_seen_var_name COLON . tipo n_set_var_type SEMICOLON vars_aux
    (8) vars_aux -> ID n_seen_var_name COLON . tipo n_set_var_type DOT
    (11) tipo -> . INT n_seen_type
    (12) tipo -> . FLOAT n_seen_type
    (13) tipo -> . CHAR n_seen_type

    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20

    tipo                           shift and go to state 35

state 31

    (52) module -> MODULE VOID n_seen_type ID . n_seen_func_name params bloque_module module
    (54) module -> MODULE VOID n_seen_type ID . n_seen_func_name params bloque_module
    (72) n_seen_func_name -> .

    LPAREN          reduce using rule 72 (n_seen_func_name -> .)

    n_seen_func_name               shift and go to state 36

state 32

    (53) module -> MODULE tipo ID n_seen_func_name . params bloque_module module
    (55) module -> MODULE tipo ID n_seen_func_name . params bloque_module
    (56) params -> . LPAREN vars_func RPAREN
    (57) params -> . LPAREN RPAREN

    LPAREN          shift and go to state 38

    params                         shift and go to state 37

state 33

    (5) main -> MAIN n_seen_func_name n_seen_main bloque_module .

    $end            reduce using rule 5 (main -> MAIN n_seen_func_name n_seen_main bloque_module .)


state 34

    (14) bloque_module -> LBRACKET . vars estatuto_aux RBRACKET
    (15) bloque_module -> LBRACKET . vars RBRACKET
    (16) bloque_module -> LBRACKET . estatuto_aux RBRACKET
    (17) bloque_module -> LBRACKET . RBRACKET
    (6) vars -> . VAR vars_aux
    (20) estatuto_aux -> . estatuto estatuto_aux
    (21) estatuto_aux -> . estatuto
    (22) estatuto -> . asignacion SEMICOLON
    (23) estatuto -> . condicion SEMICOLON
    (24) estatuto -> . escritura SEMICOLON
    (25) estatuto -> . return SEMICOLON
    (26) estatuto -> . for SEMICOLON
    (27) estatuto -> . while SEMICOLON
    (28) estatuto -> . call_module SEMICOLON
    (29) asignacion -> . ID n_seen_factor_id EQUAL n_add_operator expresion n_assign
    (63) condicion -> . IF LPAREN expresion RPAREN n_check_exp bloque ELSE n_else bloque n_fill_end
    (64) condicion -> . IF LPAREN expresion RPAREN n_check_exp bloque n_fill_end
    (65) escritura -> . PRINT LPAREN escritura_aux RPAREN
    (60) return -> . RETURN expresion
    (61) for -> . FOR asignacion TO CTEINT bloque
    (62) while -> . WHILE n_salto_while LPAREN expresion RPAREN n_cond_while bloque n_ret_while
    (58) call_module -> . ID LPAREN expresion RPAREN
    (59) call_module -> . ID LPAREN RPAREN

    RBRACKET        shift and go to state 41
    VAR             shift and go to state 8
    ID              shift and go to state 50
    IF              shift and go to state 51
    PRINT           shift and go to state 52
    RETURN          shift and go to state 53
    FOR             shift and go to state 54
    WHILE           shift and go to state 55

    vars                           shift and go to state 39
    estatuto_aux                   shift and go to state 40
    estatuto                       shift and go to state 42
    asignacion                     shift and go to state 43
    condicion                      shift and go to state 44
    escritura                      shift and go to state 45
    return                         shift and go to state 46
    for                            shift and go to state 47
    while                          shift and go to state 48
    call_module                    shift and go to state 49

state 35

    (7) vars_aux -> ID n_seen_var_name COLON tipo . n_set_var_type SEMICOLON vars_aux
    (8) vars_aux -> ID n_seen_var_name COLON tipo . n_set_var_type DOT
    (73) n_set_var_type -> .

    SEMICOLON       reduce using rule 73 (n_set_var_type -> .)
    DOT             reduce using rule 73 (n_set_var_type -> .)

    n_set_var_type                 shift and go to state 56

state 36

    (52) module -> MODULE VOID n_seen_type ID n_seen_func_name . params bloque_module module
    (54) module -> MODULE VOID n_seen_type ID n_seen_func_name . params bloque_module
    (56) params -> . LPAREN vars_func RPAREN
    (57) params -> . LPAREN RPAREN

    LPAREN          shift and go to state 38

    params                         shift and go to state 57

state 37

    (53) module -> MODULE tipo ID n_seen_func_name params . bloque_module module
    (55) module -> MODULE tipo ID n_seen_func_name params . bloque_module
    (14) bloque_module -> . LBRACKET vars estatuto_aux RBRACKET
    (15) bloque_module -> . LBRACKET vars RBRACKET
    (16) bloque_module -> . LBRACKET estatuto_aux RBRACKET
    (17) bloque_module -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 34

    bloque_module                  shift and go to state 58

state 38

    (56) params -> LPAREN . vars_func RPAREN
    (57) params -> LPAREN . RPAREN
    (9) vars_func -> . ID n_seen_var_name COLON tipo n_set_var_type COMA vars_func
    (10) vars_func -> . ID n_seen_var_name COLON tipo n_set_var_type

    RPAREN          shift and go to state 60
    ID              shift and go to state 61

    vars_func                      shift and go to state 59

state 39

    (14) bloque_module -> LBRACKET vars . estatuto_aux RBRACKET
    (15) bloque_module -> LBRACKET vars . RBRACKET
    (20) estatuto_aux -> . estatuto estatuto_aux
    (21) estatuto_aux -> . estatuto
    (22) estatuto -> . asignacion SEMICOLON
    (23) estatuto -> . condicion SEMICOLON
    (24) estatuto -> . escritura SEMICOLON
    (25) estatuto -> . return SEMICOLON
    (26) estatuto -> . for SEMICOLON
    (27) estatuto -> . while SEMICOLON
    (28) estatuto -> . call_module SEMICOLON
    (29) asignacion -> . ID n_seen_factor_id EQUAL n_add_operator expresion n_assign
    (63) condicion -> . IF LPAREN expresion RPAREN n_check_exp bloque ELSE n_else bloque n_fill_end
    (64) condicion -> . IF LPAREN expresion RPAREN n_check_exp bloque n_fill_end
    (65) escritura -> . PRINT LPAREN escritura_aux RPAREN
    (60) return -> . RETURN expresion
    (61) for -> . FOR asignacion TO CTEINT bloque
    (62) while -> . WHILE n_salto_while LPAREN expresion RPAREN n_cond_while bloque n_ret_while
    (58) call_module -> . ID LPAREN expresion RPAREN
    (59) call_module -> . ID LPAREN RPAREN

    RBRACKET        shift and go to state 63
    ID              shift and go to state 50
    IF              shift and go to state 51
    PRINT           shift and go to state 52
    RETURN          shift and go to state 53
    FOR             shift and go to state 54
    WHILE           shift and go to state 55

    estatuto_aux                   shift and go to state 62
    estatuto                       shift and go to state 42
    asignacion                     shift and go to state 43
    condicion                      shift and go to state 44
    escritura                      shift and go to state 45
    return                         shift and go to state 46
    for                            shift and go to state 47
    while                          shift and go to state 48
    call_module                    shift and go to state 49

state 40

    (16) bloque_module -> LBRACKET estatuto_aux . RBRACKET

    RBRACKET        shift and go to state 64


state 41

    (17) bloque_module -> LBRACKET RBRACKET .

    $end            reduce using rule 17 (bloque_module -> LBRACKET RBRACKET .)
    MODULE          reduce using rule 17 (bloque_module -> LBRACKET RBRACKET .)
    MAIN            reduce using rule 17 (bloque_module -> LBRACKET RBRACKET .)


state 42

    (20) estatuto_aux -> estatuto . estatuto_aux
    (21) estatuto_aux -> estatuto .
    (20) estatuto_aux -> . estatuto estatuto_aux
    (21) estatuto_aux -> . estatuto
    (22) estatuto -> . asignacion SEMICOLON
    (23) estatuto -> . condicion SEMICOLON
    (24) estatuto -> . escritura SEMICOLON
    (25) estatuto -> . return SEMICOLON
    (26) estatuto -> . for SEMICOLON
    (27) estatuto -> . while SEMICOLON
    (28) estatuto -> . call_module SEMICOLON
    (29) asignacion -> . ID n_seen_factor_id EQUAL n_add_operator expresion n_assign
    (63) condicion -> . IF LPAREN expresion RPAREN n_check_exp bloque ELSE n_else bloque n_fill_end
    (64) condicion -> . IF LPAREN expresion RPAREN n_check_exp bloque n_fill_end
    (65) escritura -> . PRINT LPAREN escritura_aux RPAREN
    (60) return -> . RETURN expresion
    (61) for -> . FOR asignacion TO CTEINT bloque
    (62) while -> . WHILE n_salto_while LPAREN expresion RPAREN n_cond_while bloque n_ret_while
    (58) call_module -> . ID LPAREN expresion RPAREN
    (59) call_module -> . ID LPAREN RPAREN

    RBRACKET        reduce using rule 21 (estatuto_aux -> estatuto .)
    ID              shift and go to state 50
    IF              shift and go to state 51
    PRINT           shift and go to state 52
    RETURN          shift and go to state 53
    FOR             shift and go to state 54
    WHILE           shift and go to state 55

    estatuto                       shift and go to state 42
    estatuto_aux                   shift and go to state 65
    asignacion                     shift and go to state 43
    condicion                      shift and go to state 44
    escritura                      shift and go to state 45
    return                         shift and go to state 46
    for                            shift and go to state 47
    while                          shift and go to state 48
    call_module                    shift and go to state 49

state 43

    (22) estatuto -> asignacion . SEMICOLON

    SEMICOLON       shift and go to state 66


state 44

    (23) estatuto -> condicion . SEMICOLON

    SEMICOLON       shift and go to state 67


state 45

    (24) estatuto -> escritura . SEMICOLON

    SEMICOLON       shift and go to state 68


state 46

    (25) estatuto -> return . SEMICOLON

    SEMICOLON       shift and go to state 69


state 47

    (26) estatuto -> for . SEMICOLON

    SEMICOLON       shift and go to state 70


state 48

    (27) estatuto -> while . SEMICOLON

    SEMICOLON       shift and go to state 71


state 49

    (28) estatuto -> call_module . SEMICOLON

    SEMICOLON       shift and go to state 72


state 50

    (29) asignacion -> ID . n_seen_factor_id EQUAL n_add_operator expresion n_assign
    (58) call_module -> ID . LPAREN expresion RPAREN
    (59) call_module -> ID . LPAREN RPAREN
    (74) n_seen_factor_id -> .

    LPAREN          shift and go to state 74
    EQUAL           reduce using rule 74 (n_seen_factor_id -> .)

    n_seen_factor_id               shift and go to state 73

state 51

    (63) condicion -> IF . LPAREN expresion RPAREN n_check_exp bloque ELSE n_else bloque n_fill_end
    (64) condicion -> IF . LPAREN expresion RPAREN n_check_exp bloque n_fill_end

    LPAREN          shift and go to state 75


state 52

    (65) escritura -> PRINT . LPAREN escritura_aux RPAREN

    LPAREN          shift and go to state 76


state 53

    (60) return -> RETURN . expresion
    (30) expresion -> . exp n_gen_and AND n_add_operator expresion
    (31) expresion -> . exp n_gen_and
    (32) exp -> . exp_aux n_gen_or OR n_add_operator exp
    (33) exp -> . exp_aux n_gen_or
    (34) exp_aux -> . exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux
    (35) exp_aux -> . exp_aux2 n_gen_relational LESST n_add_operator exp_aux
    (36) exp_aux -> . exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux
    (37) exp_aux -> . exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux
    (38) exp_aux -> . exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux
    (39) exp_aux -> . exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux
    (40) exp_aux -> . exp_aux2 n_gen_relational
    (41) exp_aux2 -> . term n_gen_term PLUS n_add_operator exp_aux2
    (42) exp_aux2 -> . term n_gen_term MINUS n_add_operator exp_aux2
    (43) exp_aux2 -> . term n_gen_term
    (44) term -> . factor n_gen_factor MULTIPLY n_add_operator term
    (45) term -> . factor n_gen_factor DIVIDE n_add_operator term
    (46) term -> . factor n_gen_factor
    (47) factor -> . LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom
    (48) factor -> . CTEINT n_seen_factor_int
    (49) factor -> . CTEF n_seen_factor_float
    (50) factor -> . CTEC n_seen_factor_char
    (51) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 83
    CTEINT          shift and go to state 84
    CTEF            shift and go to state 85
    CTEC            shift and go to state 86
    ID              shift and go to state 87

    expresion                      shift and go to state 77
    exp                            shift and go to state 78
    exp_aux                        shift and go to state 79
    exp_aux2                       shift and go to state 80
    term                           shift and go to state 81
    factor                         shift and go to state 82

state 54

    (61) for -> FOR . asignacion TO CTEINT bloque
    (29) asignacion -> . ID n_seen_factor_id EQUAL n_add_operator expresion n_assign

    ID              shift and go to state 89

    asignacion                     shift and go to state 88

state 55

    (62) while -> WHILE . n_salto_while LPAREN expresion RPAREN n_cond_while bloque n_ret_while
    (91) n_salto_while -> .

    LPAREN          reduce using rule 91 (n_salto_while -> .)

    n_salto_while                  shift and go to state 90

state 56

    (7) vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type . SEMICOLON vars_aux
    (8) vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type . DOT

    SEMICOLON       shift and go to state 91
    DOT             shift and go to state 92


state 57

    (52) module -> MODULE VOID n_seen_type ID n_seen_func_name params . bloque_module module
    (54) module -> MODULE VOID n_seen_type ID n_seen_func_name params . bloque_module
    (14) bloque_module -> . LBRACKET vars estatuto_aux RBRACKET
    (15) bloque_module -> . LBRACKET vars RBRACKET
    (16) bloque_module -> . LBRACKET estatuto_aux RBRACKET
    (17) bloque_module -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 34

    bloque_module                  shift and go to state 93

state 58

    (53) module -> MODULE tipo ID n_seen_func_name params bloque_module . module
    (55) module -> MODULE tipo ID n_seen_func_name params bloque_module .
    (52) module -> . MODULE VOID n_seen_type ID n_seen_func_name params bloque_module module
    (53) module -> . MODULE tipo ID n_seen_func_name params bloque_module module
    (54) module -> . MODULE VOID n_seen_type ID n_seen_func_name params bloque_module
    (55) module -> . MODULE tipo ID n_seen_func_name params bloque_module

    MAIN            reduce using rule 55 (module -> MODULE tipo ID n_seen_func_name params bloque_module .)
    MODULE          shift and go to state 9

    module                         shift and go to state 94

state 59

    (56) params -> LPAREN vars_func . RPAREN

    RPAREN          shift and go to state 95


state 60

    (57) params -> LPAREN RPAREN .

    LBRACKET        reduce using rule 57 (params -> LPAREN RPAREN .)


state 61

    (9) vars_func -> ID . n_seen_var_name COLON tipo n_set_var_type COMA vars_func
    (10) vars_func -> ID . n_seen_var_name COLON tipo n_set_var_type
    (71) n_seen_var_name -> .

    COLON           reduce using rule 71 (n_seen_var_name -> .)

    n_seen_var_name                shift and go to state 96

state 62

    (14) bloque_module -> LBRACKET vars estatuto_aux . RBRACKET

    RBRACKET        shift and go to state 97


state 63

    (15) bloque_module -> LBRACKET vars RBRACKET .

    $end            reduce using rule 15 (bloque_module -> LBRACKET vars RBRACKET .)
    MODULE          reduce using rule 15 (bloque_module -> LBRACKET vars RBRACKET .)
    MAIN            reduce using rule 15 (bloque_module -> LBRACKET vars RBRACKET .)


state 64

    (16) bloque_module -> LBRACKET estatuto_aux RBRACKET .

    $end            reduce using rule 16 (bloque_module -> LBRACKET estatuto_aux RBRACKET .)
    MODULE          reduce using rule 16 (bloque_module -> LBRACKET estatuto_aux RBRACKET .)
    MAIN            reduce using rule 16 (bloque_module -> LBRACKET estatuto_aux RBRACKET .)


state 65

    (20) estatuto_aux -> estatuto estatuto_aux .

    RBRACKET        reduce using rule 20 (estatuto_aux -> estatuto estatuto_aux .)


state 66

    (22) estatuto -> asignacion SEMICOLON .

    ID              reduce using rule 22 (estatuto -> asignacion SEMICOLON .)
    IF              reduce using rule 22 (estatuto -> asignacion SEMICOLON .)
    PRINT           reduce using rule 22 (estatuto -> asignacion SEMICOLON .)
    RETURN          reduce using rule 22 (estatuto -> asignacion SEMICOLON .)
    FOR             reduce using rule 22 (estatuto -> asignacion SEMICOLON .)
    WHILE           reduce using rule 22 (estatuto -> asignacion SEMICOLON .)
    RBRACKET        reduce using rule 22 (estatuto -> asignacion SEMICOLON .)


state 67

    (23) estatuto -> condicion SEMICOLON .

    ID              reduce using rule 23 (estatuto -> condicion SEMICOLON .)
    IF              reduce using rule 23 (estatuto -> condicion SEMICOLON .)
    PRINT           reduce using rule 23 (estatuto -> condicion SEMICOLON .)
    RETURN          reduce using rule 23 (estatuto -> condicion SEMICOLON .)
    FOR             reduce using rule 23 (estatuto -> condicion SEMICOLON .)
    WHILE           reduce using rule 23 (estatuto -> condicion SEMICOLON .)
    RBRACKET        reduce using rule 23 (estatuto -> condicion SEMICOLON .)


state 68

    (24) estatuto -> escritura SEMICOLON .

    ID              reduce using rule 24 (estatuto -> escritura SEMICOLON .)
    IF              reduce using rule 24 (estatuto -> escritura SEMICOLON .)
    PRINT           reduce using rule 24 (estatuto -> escritura SEMICOLON .)
    RETURN          reduce using rule 24 (estatuto -> escritura SEMICOLON .)
    FOR             reduce using rule 24 (estatuto -> escritura SEMICOLON .)
    WHILE           reduce using rule 24 (estatuto -> escritura SEMICOLON .)
    RBRACKET        reduce using rule 24 (estatuto -> escritura SEMICOLON .)


state 69

    (25) estatuto -> return SEMICOLON .

    ID              reduce using rule 25 (estatuto -> return SEMICOLON .)
    IF              reduce using rule 25 (estatuto -> return SEMICOLON .)
    PRINT           reduce using rule 25 (estatuto -> return SEMICOLON .)
    RETURN          reduce using rule 25 (estatuto -> return SEMICOLON .)
    FOR             reduce using rule 25 (estatuto -> return SEMICOLON .)
    WHILE           reduce using rule 25 (estatuto -> return SEMICOLON .)
    RBRACKET        reduce using rule 25 (estatuto -> return SEMICOLON .)


state 70

    (26) estatuto -> for SEMICOLON .

    ID              reduce using rule 26 (estatuto -> for SEMICOLON .)
    IF              reduce using rule 26 (estatuto -> for SEMICOLON .)
    PRINT           reduce using rule 26 (estatuto -> for SEMICOLON .)
    RETURN          reduce using rule 26 (estatuto -> for SEMICOLON .)
    FOR             reduce using rule 26 (estatuto -> for SEMICOLON .)
    WHILE           reduce using rule 26 (estatuto -> for SEMICOLON .)
    RBRACKET        reduce using rule 26 (estatuto -> for SEMICOLON .)


state 71

    (27) estatuto -> while SEMICOLON .

    ID              reduce using rule 27 (estatuto -> while SEMICOLON .)
    IF              reduce using rule 27 (estatuto -> while SEMICOLON .)
    PRINT           reduce using rule 27 (estatuto -> while SEMICOLON .)
    RETURN          reduce using rule 27 (estatuto -> while SEMICOLON .)
    FOR             reduce using rule 27 (estatuto -> while SEMICOLON .)
    WHILE           reduce using rule 27 (estatuto -> while SEMICOLON .)
    RBRACKET        reduce using rule 27 (estatuto -> while SEMICOLON .)


state 72

    (28) estatuto -> call_module SEMICOLON .

    ID              reduce using rule 28 (estatuto -> call_module SEMICOLON .)
    IF              reduce using rule 28 (estatuto -> call_module SEMICOLON .)
    PRINT           reduce using rule 28 (estatuto -> call_module SEMICOLON .)
    RETURN          reduce using rule 28 (estatuto -> call_module SEMICOLON .)
    FOR             reduce using rule 28 (estatuto -> call_module SEMICOLON .)
    WHILE           reduce using rule 28 (estatuto -> call_module SEMICOLON .)
    RBRACKET        reduce using rule 28 (estatuto -> call_module SEMICOLON .)


state 73

    (29) asignacion -> ID n_seen_factor_id . EQUAL n_add_operator expresion n_assign

    EQUAL           shift and go to state 98


state 74

    (58) call_module -> ID LPAREN . expresion RPAREN
    (59) call_module -> ID LPAREN . RPAREN
    (30) expresion -> . exp n_gen_and AND n_add_operator expresion
    (31) expresion -> . exp n_gen_and
    (32) exp -> . exp_aux n_gen_or OR n_add_operator exp
    (33) exp -> . exp_aux n_gen_or
    (34) exp_aux -> . exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux
    (35) exp_aux -> . exp_aux2 n_gen_relational LESST n_add_operator exp_aux
    (36) exp_aux -> . exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux
    (37) exp_aux -> . exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux
    (38) exp_aux -> . exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux
    (39) exp_aux -> . exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux
    (40) exp_aux -> . exp_aux2 n_gen_relational
    (41) exp_aux2 -> . term n_gen_term PLUS n_add_operator exp_aux2
    (42) exp_aux2 -> . term n_gen_term MINUS n_add_operator exp_aux2
    (43) exp_aux2 -> . term n_gen_term
    (44) term -> . factor n_gen_factor MULTIPLY n_add_operator term
    (45) term -> . factor n_gen_factor DIVIDE n_add_operator term
    (46) term -> . factor n_gen_factor
    (47) factor -> . LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom
    (48) factor -> . CTEINT n_seen_factor_int
    (49) factor -> . CTEF n_seen_factor_float
    (50) factor -> . CTEC n_seen_factor_char
    (51) factor -> . ID n_seen_factor_id

    RPAREN          shift and go to state 100
    LPAREN          shift and go to state 83
    CTEINT          shift and go to state 84
    CTEF            shift and go to state 85
    CTEC            shift and go to state 86
    ID              shift and go to state 87

    expresion                      shift and go to state 99
    exp                            shift and go to state 78
    exp_aux                        shift and go to state 79
    exp_aux2                       shift and go to state 80
    term                           shift and go to state 81
    factor                         shift and go to state 82

state 75

    (63) condicion -> IF LPAREN . expresion RPAREN n_check_exp bloque ELSE n_else bloque n_fill_end
    (64) condicion -> IF LPAREN . expresion RPAREN n_check_exp bloque n_fill_end
    (30) expresion -> . exp n_gen_and AND n_add_operator expresion
    (31) expresion -> . exp n_gen_and
    (32) exp -> . exp_aux n_gen_or OR n_add_operator exp
    (33) exp -> . exp_aux n_gen_or
    (34) exp_aux -> . exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux
    (35) exp_aux -> . exp_aux2 n_gen_relational LESST n_add_operator exp_aux
    (36) exp_aux -> . exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux
    (37) exp_aux -> . exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux
    (38) exp_aux -> . exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux
    (39) exp_aux -> . exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux
    (40) exp_aux -> . exp_aux2 n_gen_relational
    (41) exp_aux2 -> . term n_gen_term PLUS n_add_operator exp_aux2
    (42) exp_aux2 -> . term n_gen_term MINUS n_add_operator exp_aux2
    (43) exp_aux2 -> . term n_gen_term
    (44) term -> . factor n_gen_factor MULTIPLY n_add_operator term
    (45) term -> . factor n_gen_factor DIVIDE n_add_operator term
    (46) term -> . factor n_gen_factor
    (47) factor -> . LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom
    (48) factor -> . CTEINT n_seen_factor_int
    (49) factor -> . CTEF n_seen_factor_float
    (50) factor -> . CTEC n_seen_factor_char
    (51) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 83
    CTEINT          shift and go to state 84
    CTEF            shift and go to state 85
    CTEC            shift and go to state 86
    ID              shift and go to state 87

    expresion                      shift and go to state 101
    exp                            shift and go to state 78
    exp_aux                        shift and go to state 79
    exp_aux2                       shift and go to state 80
    term                           shift and go to state 81
    factor                         shift and go to state 82

state 76

    (65) escritura -> PRINT LPAREN . escritura_aux RPAREN
    (66) escritura_aux -> . expresion COMA escritura_aux
    (67) escritura_aux -> . CTESTRING COMA escritura_aux
    (68) escritura_aux -> . expresion
    (69) escritura_aux -> . CTESTRING
    (30) expresion -> . exp n_gen_and AND n_add_operator expresion
    (31) expresion -> . exp n_gen_and
    (32) exp -> . exp_aux n_gen_or OR n_add_operator exp
    (33) exp -> . exp_aux n_gen_or
    (34) exp_aux -> . exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux
    (35) exp_aux -> . exp_aux2 n_gen_relational LESST n_add_operator exp_aux
    (36) exp_aux -> . exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux
    (37) exp_aux -> . exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux
    (38) exp_aux -> . exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux
    (39) exp_aux -> . exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux
    (40) exp_aux -> . exp_aux2 n_gen_relational
    (41) exp_aux2 -> . term n_gen_term PLUS n_add_operator exp_aux2
    (42) exp_aux2 -> . term n_gen_term MINUS n_add_operator exp_aux2
    (43) exp_aux2 -> . term n_gen_term
    (44) term -> . factor n_gen_factor MULTIPLY n_add_operator term
    (45) term -> . factor n_gen_factor DIVIDE n_add_operator term
    (46) term -> . factor n_gen_factor
    (47) factor -> . LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom
    (48) factor -> . CTEINT n_seen_factor_int
    (49) factor -> . CTEF n_seen_factor_float
    (50) factor -> . CTEC n_seen_factor_char
    (51) factor -> . ID n_seen_factor_id

    CTESTRING       shift and go to state 104
    LPAREN          shift and go to state 83
    CTEINT          shift and go to state 84
    CTEF            shift and go to state 85
    CTEC            shift and go to state 86
    ID              shift and go to state 87

    escritura_aux                  shift and go to state 102
    expresion                      shift and go to state 103
    exp                            shift and go to state 78
    exp_aux                        shift and go to state 79
    exp_aux2                       shift and go to state 80
    term                           shift and go to state 81
    factor                         shift and go to state 82

state 77

    (60) return -> RETURN expresion .

    SEMICOLON       reduce using rule 60 (return -> RETURN expresion .)


state 78

    (30) expresion -> exp . n_gen_and AND n_add_operator expresion
    (31) expresion -> exp . n_gen_and
    (84) n_gen_and -> .

    AND             reduce using rule 84 (n_gen_and -> .)
    SEMICOLON       reduce using rule 84 (n_gen_and -> .)
    RPAREN          reduce using rule 84 (n_gen_and -> .)
    COMA            reduce using rule 84 (n_gen_and -> .)
    TO              reduce using rule 84 (n_gen_and -> .)

    n_gen_and                      shift and go to state 105

state 79

    (32) exp -> exp_aux . n_gen_or OR n_add_operator exp
    (33) exp -> exp_aux . n_gen_or
    (83) n_gen_or -> .

    OR              reduce using rule 83 (n_gen_or -> .)
    AND             reduce using rule 83 (n_gen_or -> .)
    SEMICOLON       reduce using rule 83 (n_gen_or -> .)
    RPAREN          reduce using rule 83 (n_gen_or -> .)
    COMA            reduce using rule 83 (n_gen_or -> .)
    TO              reduce using rule 83 (n_gen_or -> .)

    n_gen_or                       shift and go to state 106

state 80

    (34) exp_aux -> exp_aux2 . n_gen_relational GREATERT n_add_operator exp_aux
    (35) exp_aux -> exp_aux2 . n_gen_relational LESST n_add_operator exp_aux
    (36) exp_aux -> exp_aux2 . n_gen_relational NOTEQUAL n_add_operator exp_aux
    (37) exp_aux -> exp_aux2 . n_gen_relational DBEQUALS n_add_operator exp_aux
    (38) exp_aux -> exp_aux2 . n_gen_relational GREATEREQUAL n_add_operator exp_aux
    (39) exp_aux -> exp_aux2 . n_gen_relational LESSEQUAL n_add_operator exp_aux
    (40) exp_aux -> exp_aux2 . n_gen_relational
    (82) n_gen_relational -> .

    GREATERT        reduce using rule 82 (n_gen_relational -> .)
    LESST           reduce using rule 82 (n_gen_relational -> .)
    NOTEQUAL        reduce using rule 82 (n_gen_relational -> .)
    DBEQUALS        reduce using rule 82 (n_gen_relational -> .)
    GREATEREQUAL    reduce using rule 82 (n_gen_relational -> .)
    LESSEQUAL       reduce using rule 82 (n_gen_relational -> .)
    OR              reduce using rule 82 (n_gen_relational -> .)
    AND             reduce using rule 82 (n_gen_relational -> .)
    SEMICOLON       reduce using rule 82 (n_gen_relational -> .)
    RPAREN          reduce using rule 82 (n_gen_relational -> .)
    COMA            reduce using rule 82 (n_gen_relational -> .)
    TO              reduce using rule 82 (n_gen_relational -> .)

    n_gen_relational               shift and go to state 107

state 81

    (41) exp_aux2 -> term . n_gen_term PLUS n_add_operator exp_aux2
    (42) exp_aux2 -> term . n_gen_term MINUS n_add_operator exp_aux2
    (43) exp_aux2 -> term . n_gen_term
    (80) n_gen_term -> .

    PLUS            reduce using rule 80 (n_gen_term -> .)
    MINUS           reduce using rule 80 (n_gen_term -> .)
    GREATERT        reduce using rule 80 (n_gen_term -> .)
    LESST           reduce using rule 80 (n_gen_term -> .)
    NOTEQUAL        reduce using rule 80 (n_gen_term -> .)
    DBEQUALS        reduce using rule 80 (n_gen_term -> .)
    GREATEREQUAL    reduce using rule 80 (n_gen_term -> .)
    LESSEQUAL       reduce using rule 80 (n_gen_term -> .)
    OR              reduce using rule 80 (n_gen_term -> .)
    AND             reduce using rule 80 (n_gen_term -> .)
    SEMICOLON       reduce using rule 80 (n_gen_term -> .)
    RPAREN          reduce using rule 80 (n_gen_term -> .)
    COMA            reduce using rule 80 (n_gen_term -> .)
    TO              reduce using rule 80 (n_gen_term -> .)

    n_gen_term                     shift and go to state 108

state 82

    (44) term -> factor . n_gen_factor MULTIPLY n_add_operator term
    (45) term -> factor . n_gen_factor DIVIDE n_add_operator term
    (46) term -> factor . n_gen_factor
    (81) n_gen_factor -> .

    MULTIPLY        reduce using rule 81 (n_gen_factor -> .)
    DIVIDE          reduce using rule 81 (n_gen_factor -> .)
    PLUS            reduce using rule 81 (n_gen_factor -> .)
    MINUS           reduce using rule 81 (n_gen_factor -> .)
    GREATERT        reduce using rule 81 (n_gen_factor -> .)
    LESST           reduce using rule 81 (n_gen_factor -> .)
    NOTEQUAL        reduce using rule 81 (n_gen_factor -> .)
    DBEQUALS        reduce using rule 81 (n_gen_factor -> .)
    GREATEREQUAL    reduce using rule 81 (n_gen_factor -> .)
    LESSEQUAL       reduce using rule 81 (n_gen_factor -> .)
    OR              reduce using rule 81 (n_gen_factor -> .)
    AND             reduce using rule 81 (n_gen_factor -> .)
    SEMICOLON       reduce using rule 81 (n_gen_factor -> .)
    RPAREN          reduce using rule 81 (n_gen_factor -> .)
    COMA            reduce using rule 81 (n_gen_factor -> .)
    TO              reduce using rule 81 (n_gen_factor -> .)

    n_gen_factor                   shift and go to state 109

state 83

    (47) factor -> LPAREN . n_push_fake_bottom expresion RPAREN n_pop_fake_bottom
    (85) n_push_fake_bottom -> .

    LPAREN          reduce using rule 85 (n_push_fake_bottom -> .)
    CTEINT          reduce using rule 85 (n_push_fake_bottom -> .)
    CTEF            reduce using rule 85 (n_push_fake_bottom -> .)
    CTEC            reduce using rule 85 (n_push_fake_bottom -> .)
    ID              reduce using rule 85 (n_push_fake_bottom -> .)

    n_push_fake_bottom             shift and go to state 110

state 84

    (48) factor -> CTEINT . n_seen_factor_int
    (75) n_seen_factor_int -> .

    MULTIPLY        reduce using rule 75 (n_seen_factor_int -> .)
    DIVIDE          reduce using rule 75 (n_seen_factor_int -> .)
    PLUS            reduce using rule 75 (n_seen_factor_int -> .)
    MINUS           reduce using rule 75 (n_seen_factor_int -> .)
    GREATERT        reduce using rule 75 (n_seen_factor_int -> .)
    LESST           reduce using rule 75 (n_seen_factor_int -> .)
    NOTEQUAL        reduce using rule 75 (n_seen_factor_int -> .)
    DBEQUALS        reduce using rule 75 (n_seen_factor_int -> .)
    GREATEREQUAL    reduce using rule 75 (n_seen_factor_int -> .)
    LESSEQUAL       reduce using rule 75 (n_seen_factor_int -> .)
    OR              reduce using rule 75 (n_seen_factor_int -> .)
    AND             reduce using rule 75 (n_seen_factor_int -> .)
    SEMICOLON       reduce using rule 75 (n_seen_factor_int -> .)
    RPAREN          reduce using rule 75 (n_seen_factor_int -> .)
    COMA            reduce using rule 75 (n_seen_factor_int -> .)
    TO              reduce using rule 75 (n_seen_factor_int -> .)

    n_seen_factor_int              shift and go to state 111

state 85

    (49) factor -> CTEF . n_seen_factor_float
    (76) n_seen_factor_float -> .

    MULTIPLY        reduce using rule 76 (n_seen_factor_float -> .)
    DIVIDE          reduce using rule 76 (n_seen_factor_float -> .)
    PLUS            reduce using rule 76 (n_seen_factor_float -> .)
    MINUS           reduce using rule 76 (n_seen_factor_float -> .)
    GREATERT        reduce using rule 76 (n_seen_factor_float -> .)
    LESST           reduce using rule 76 (n_seen_factor_float -> .)
    NOTEQUAL        reduce using rule 76 (n_seen_factor_float -> .)
    DBEQUALS        reduce using rule 76 (n_seen_factor_float -> .)
    GREATEREQUAL    reduce using rule 76 (n_seen_factor_float -> .)
    LESSEQUAL       reduce using rule 76 (n_seen_factor_float -> .)
    OR              reduce using rule 76 (n_seen_factor_float -> .)
    AND             reduce using rule 76 (n_seen_factor_float -> .)
    SEMICOLON       reduce using rule 76 (n_seen_factor_float -> .)
    RPAREN          reduce using rule 76 (n_seen_factor_float -> .)
    COMA            reduce using rule 76 (n_seen_factor_float -> .)
    TO              reduce using rule 76 (n_seen_factor_float -> .)

    n_seen_factor_float            shift and go to state 112

state 86

    (50) factor -> CTEC . n_seen_factor_char
    (77) n_seen_factor_char -> .

    MULTIPLY        reduce using rule 77 (n_seen_factor_char -> .)
    DIVIDE          reduce using rule 77 (n_seen_factor_char -> .)
    PLUS            reduce using rule 77 (n_seen_factor_char -> .)
    MINUS           reduce using rule 77 (n_seen_factor_char -> .)
    GREATERT        reduce using rule 77 (n_seen_factor_char -> .)
    LESST           reduce using rule 77 (n_seen_factor_char -> .)
    NOTEQUAL        reduce using rule 77 (n_seen_factor_char -> .)
    DBEQUALS        reduce using rule 77 (n_seen_factor_char -> .)
    GREATEREQUAL    reduce using rule 77 (n_seen_factor_char -> .)
    LESSEQUAL       reduce using rule 77 (n_seen_factor_char -> .)
    OR              reduce using rule 77 (n_seen_factor_char -> .)
    AND             reduce using rule 77 (n_seen_factor_char -> .)
    SEMICOLON       reduce using rule 77 (n_seen_factor_char -> .)
    RPAREN          reduce using rule 77 (n_seen_factor_char -> .)
    COMA            reduce using rule 77 (n_seen_factor_char -> .)
    TO              reduce using rule 77 (n_seen_factor_char -> .)

    n_seen_factor_char             shift and go to state 113

state 87

    (51) factor -> ID . n_seen_factor_id
    (74) n_seen_factor_id -> .

    MULTIPLY        reduce using rule 74 (n_seen_factor_id -> .)
    DIVIDE          reduce using rule 74 (n_seen_factor_id -> .)
    PLUS            reduce using rule 74 (n_seen_factor_id -> .)
    MINUS           reduce using rule 74 (n_seen_factor_id -> .)
    GREATERT        reduce using rule 74 (n_seen_factor_id -> .)
    LESST           reduce using rule 74 (n_seen_factor_id -> .)
    NOTEQUAL        reduce using rule 74 (n_seen_factor_id -> .)
    DBEQUALS        reduce using rule 74 (n_seen_factor_id -> .)
    GREATEREQUAL    reduce using rule 74 (n_seen_factor_id -> .)
    LESSEQUAL       reduce using rule 74 (n_seen_factor_id -> .)
    OR              reduce using rule 74 (n_seen_factor_id -> .)
    AND             reduce using rule 74 (n_seen_factor_id -> .)
    SEMICOLON       reduce using rule 74 (n_seen_factor_id -> .)
    RPAREN          reduce using rule 74 (n_seen_factor_id -> .)
    COMA            reduce using rule 74 (n_seen_factor_id -> .)
    TO              reduce using rule 74 (n_seen_factor_id -> .)

    n_seen_factor_id               shift and go to state 114

state 88

    (61) for -> FOR asignacion . TO CTEINT bloque

    TO              shift and go to state 115


state 89

    (29) asignacion -> ID . n_seen_factor_id EQUAL n_add_operator expresion n_assign
    (74) n_seen_factor_id -> .

    EQUAL           reduce using rule 74 (n_seen_factor_id -> .)

    n_seen_factor_id               shift and go to state 73

state 90

    (62) while -> WHILE n_salto_while . LPAREN expresion RPAREN n_cond_while bloque n_ret_while

    LPAREN          shift and go to state 116


state 91

    (7) vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON . vars_aux
    (7) vars_aux -> . ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux
    (8) vars_aux -> . ID n_seen_var_name COLON tipo n_set_var_type DOT

    ID              shift and go to state 15

    vars_aux                       shift and go to state 117

state 92

    (8) vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type DOT .

    MODULE          reduce using rule 8 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type DOT .)
    MAIN            reduce using rule 8 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type DOT .)
    RBRACKET        reduce using rule 8 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type DOT .)
    ID              reduce using rule 8 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type DOT .)
    IF              reduce using rule 8 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type DOT .)
    PRINT           reduce using rule 8 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type DOT .)
    RETURN          reduce using rule 8 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type DOT .)
    FOR             reduce using rule 8 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type DOT .)
    WHILE           reduce using rule 8 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type DOT .)


state 93

    (52) module -> MODULE VOID n_seen_type ID n_seen_func_name params bloque_module . module
    (54) module -> MODULE VOID n_seen_type ID n_seen_func_name params bloque_module .
    (52) module -> . MODULE VOID n_seen_type ID n_seen_func_name params bloque_module module
    (53) module -> . MODULE tipo ID n_seen_func_name params bloque_module module
    (54) module -> . MODULE VOID n_seen_type ID n_seen_func_name params bloque_module
    (55) module -> . MODULE tipo ID n_seen_func_name params bloque_module

    MAIN            reduce using rule 54 (module -> MODULE VOID n_seen_type ID n_seen_func_name params bloque_module .)
    MODULE          shift and go to state 9

    module                         shift and go to state 118

state 94

    (53) module -> MODULE tipo ID n_seen_func_name params bloque_module module .

    MAIN            reduce using rule 53 (module -> MODULE tipo ID n_seen_func_name params bloque_module module .)


state 95

    (56) params -> LPAREN vars_func RPAREN .

    LBRACKET        reduce using rule 56 (params -> LPAREN vars_func RPAREN .)


state 96

    (9) vars_func -> ID n_seen_var_name . COLON tipo n_set_var_type COMA vars_func
    (10) vars_func -> ID n_seen_var_name . COLON tipo n_set_var_type

    COLON           shift and go to state 119


state 97

    (14) bloque_module -> LBRACKET vars estatuto_aux RBRACKET .

    $end            reduce using rule 14 (bloque_module -> LBRACKET vars estatuto_aux RBRACKET .)
    MODULE          reduce using rule 14 (bloque_module -> LBRACKET vars estatuto_aux RBRACKET .)
    MAIN            reduce using rule 14 (bloque_module -> LBRACKET vars estatuto_aux RBRACKET .)


state 98

    (29) asignacion -> ID n_seen_factor_id EQUAL . n_add_operator expresion n_assign
    (79) n_add_operator -> .

    LPAREN          reduce using rule 79 (n_add_operator -> .)
    CTEINT          reduce using rule 79 (n_add_operator -> .)
    CTEF            reduce using rule 79 (n_add_operator -> .)
    CTEC            reduce using rule 79 (n_add_operator -> .)
    ID              reduce using rule 79 (n_add_operator -> .)

    n_add_operator                 shift and go to state 120

state 99

    (58) call_module -> ID LPAREN expresion . RPAREN

    RPAREN          shift and go to state 121


state 100

    (59) call_module -> ID LPAREN RPAREN .

    SEMICOLON       reduce using rule 59 (call_module -> ID LPAREN RPAREN .)


state 101

    (63) condicion -> IF LPAREN expresion . RPAREN n_check_exp bloque ELSE n_else bloque n_fill_end
    (64) condicion -> IF LPAREN expresion . RPAREN n_check_exp bloque n_fill_end

    RPAREN          shift and go to state 122


state 102

    (65) escritura -> PRINT LPAREN escritura_aux . RPAREN

    RPAREN          shift and go to state 123


state 103

    (66) escritura_aux -> expresion . COMA escritura_aux
    (68) escritura_aux -> expresion .

    COMA            shift and go to state 124
    RPAREN          reduce using rule 68 (escritura_aux -> expresion .)


state 104

    (67) escritura_aux -> CTESTRING . COMA escritura_aux
    (69) escritura_aux -> CTESTRING .

    COMA            shift and go to state 125
    RPAREN          reduce using rule 69 (escritura_aux -> CTESTRING .)


state 105

    (30) expresion -> exp n_gen_and . AND n_add_operator expresion
    (31) expresion -> exp n_gen_and .

    AND             shift and go to state 126
    SEMICOLON       reduce using rule 31 (expresion -> exp n_gen_and .)
    RPAREN          reduce using rule 31 (expresion -> exp n_gen_and .)
    COMA            reduce using rule 31 (expresion -> exp n_gen_and .)
    TO              reduce using rule 31 (expresion -> exp n_gen_and .)


state 106

    (32) exp -> exp_aux n_gen_or . OR n_add_operator exp
    (33) exp -> exp_aux n_gen_or .

    OR              shift and go to state 127
    AND             reduce using rule 33 (exp -> exp_aux n_gen_or .)
    SEMICOLON       reduce using rule 33 (exp -> exp_aux n_gen_or .)
    RPAREN          reduce using rule 33 (exp -> exp_aux n_gen_or .)
    COMA            reduce using rule 33 (exp -> exp_aux n_gen_or .)
    TO              reduce using rule 33 (exp -> exp_aux n_gen_or .)


state 107

    (34) exp_aux -> exp_aux2 n_gen_relational . GREATERT n_add_operator exp_aux
    (35) exp_aux -> exp_aux2 n_gen_relational . LESST n_add_operator exp_aux
    (36) exp_aux -> exp_aux2 n_gen_relational . NOTEQUAL n_add_operator exp_aux
    (37) exp_aux -> exp_aux2 n_gen_relational . DBEQUALS n_add_operator exp_aux
    (38) exp_aux -> exp_aux2 n_gen_relational . GREATEREQUAL n_add_operator exp_aux
    (39) exp_aux -> exp_aux2 n_gen_relational . LESSEQUAL n_add_operator exp_aux
    (40) exp_aux -> exp_aux2 n_gen_relational .

    GREATERT        shift and go to state 128
    LESST           shift and go to state 129
    NOTEQUAL        shift and go to state 130
    DBEQUALS        shift and go to state 131
    GREATEREQUAL    shift and go to state 132
    LESSEQUAL       shift and go to state 133
    OR              reduce using rule 40 (exp_aux -> exp_aux2 n_gen_relational .)
    AND             reduce using rule 40 (exp_aux -> exp_aux2 n_gen_relational .)
    SEMICOLON       reduce using rule 40 (exp_aux -> exp_aux2 n_gen_relational .)
    RPAREN          reduce using rule 40 (exp_aux -> exp_aux2 n_gen_relational .)
    COMA            reduce using rule 40 (exp_aux -> exp_aux2 n_gen_relational .)
    TO              reduce using rule 40 (exp_aux -> exp_aux2 n_gen_relational .)


state 108

    (41) exp_aux2 -> term n_gen_term . PLUS n_add_operator exp_aux2
    (42) exp_aux2 -> term n_gen_term . MINUS n_add_operator exp_aux2
    (43) exp_aux2 -> term n_gen_term .

    PLUS            shift and go to state 134
    MINUS           shift and go to state 135
    GREATERT        reduce using rule 43 (exp_aux2 -> term n_gen_term .)
    LESST           reduce using rule 43 (exp_aux2 -> term n_gen_term .)
    NOTEQUAL        reduce using rule 43 (exp_aux2 -> term n_gen_term .)
    DBEQUALS        reduce using rule 43 (exp_aux2 -> term n_gen_term .)
    GREATEREQUAL    reduce using rule 43 (exp_aux2 -> term n_gen_term .)
    LESSEQUAL       reduce using rule 43 (exp_aux2 -> term n_gen_term .)
    OR              reduce using rule 43 (exp_aux2 -> term n_gen_term .)
    AND             reduce using rule 43 (exp_aux2 -> term n_gen_term .)
    SEMICOLON       reduce using rule 43 (exp_aux2 -> term n_gen_term .)
    RPAREN          reduce using rule 43 (exp_aux2 -> term n_gen_term .)
    COMA            reduce using rule 43 (exp_aux2 -> term n_gen_term .)
    TO              reduce using rule 43 (exp_aux2 -> term n_gen_term .)


state 109

    (44) term -> factor n_gen_factor . MULTIPLY n_add_operator term
    (45) term -> factor n_gen_factor . DIVIDE n_add_operator term
    (46) term -> factor n_gen_factor .

    MULTIPLY        shift and go to state 136
    DIVIDE          shift and go to state 137
    PLUS            reduce using rule 46 (term -> factor n_gen_factor .)
    MINUS           reduce using rule 46 (term -> factor n_gen_factor .)
    GREATERT        reduce using rule 46 (term -> factor n_gen_factor .)
    LESST           reduce using rule 46 (term -> factor n_gen_factor .)
    NOTEQUAL        reduce using rule 46 (term -> factor n_gen_factor .)
    DBEQUALS        reduce using rule 46 (term -> factor n_gen_factor .)
    GREATEREQUAL    reduce using rule 46 (term -> factor n_gen_factor .)
    LESSEQUAL       reduce using rule 46 (term -> factor n_gen_factor .)
    OR              reduce using rule 46 (term -> factor n_gen_factor .)
    AND             reduce using rule 46 (term -> factor n_gen_factor .)
    SEMICOLON       reduce using rule 46 (term -> factor n_gen_factor .)
    RPAREN          reduce using rule 46 (term -> factor n_gen_factor .)
    COMA            reduce using rule 46 (term -> factor n_gen_factor .)
    TO              reduce using rule 46 (term -> factor n_gen_factor .)


state 110

    (47) factor -> LPAREN n_push_fake_bottom . expresion RPAREN n_pop_fake_bottom
    (30) expresion -> . exp n_gen_and AND n_add_operator expresion
    (31) expresion -> . exp n_gen_and
    (32) exp -> . exp_aux n_gen_or OR n_add_operator exp
    (33) exp -> . exp_aux n_gen_or
    (34) exp_aux -> . exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux
    (35) exp_aux -> . exp_aux2 n_gen_relational LESST n_add_operator exp_aux
    (36) exp_aux -> . exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux
    (37) exp_aux -> . exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux
    (38) exp_aux -> . exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux
    (39) exp_aux -> . exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux
    (40) exp_aux -> . exp_aux2 n_gen_relational
    (41) exp_aux2 -> . term n_gen_term PLUS n_add_operator exp_aux2
    (42) exp_aux2 -> . term n_gen_term MINUS n_add_operator exp_aux2
    (43) exp_aux2 -> . term n_gen_term
    (44) term -> . factor n_gen_factor MULTIPLY n_add_operator term
    (45) term -> . factor n_gen_factor DIVIDE n_add_operator term
    (46) term -> . factor n_gen_factor
    (47) factor -> . LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom
    (48) factor -> . CTEINT n_seen_factor_int
    (49) factor -> . CTEF n_seen_factor_float
    (50) factor -> . CTEC n_seen_factor_char
    (51) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 83
    CTEINT          shift and go to state 84
    CTEF            shift and go to state 85
    CTEC            shift and go to state 86
    ID              shift and go to state 87

    expresion                      shift and go to state 138
    exp                            shift and go to state 78
    exp_aux                        shift and go to state 79
    exp_aux2                       shift and go to state 80
    term                           shift and go to state 81
    factor                         shift and go to state 82

state 111

    (48) factor -> CTEINT n_seen_factor_int .

    MULTIPLY        reduce using rule 48 (factor -> CTEINT n_seen_factor_int .)
    DIVIDE          reduce using rule 48 (factor -> CTEINT n_seen_factor_int .)
    PLUS            reduce using rule 48 (factor -> CTEINT n_seen_factor_int .)
    MINUS           reduce using rule 48 (factor -> CTEINT n_seen_factor_int .)
    GREATERT        reduce using rule 48 (factor -> CTEINT n_seen_factor_int .)
    LESST           reduce using rule 48 (factor -> CTEINT n_seen_factor_int .)
    NOTEQUAL        reduce using rule 48 (factor -> CTEINT n_seen_factor_int .)
    DBEQUALS        reduce using rule 48 (factor -> CTEINT n_seen_factor_int .)
    GREATEREQUAL    reduce using rule 48 (factor -> CTEINT n_seen_factor_int .)
    LESSEQUAL       reduce using rule 48 (factor -> CTEINT n_seen_factor_int .)
    OR              reduce using rule 48 (factor -> CTEINT n_seen_factor_int .)
    AND             reduce using rule 48 (factor -> CTEINT n_seen_factor_int .)
    SEMICOLON       reduce using rule 48 (factor -> CTEINT n_seen_factor_int .)
    RPAREN          reduce using rule 48 (factor -> CTEINT n_seen_factor_int .)
    COMA            reduce using rule 48 (factor -> CTEINT n_seen_factor_int .)
    TO              reduce using rule 48 (factor -> CTEINT n_seen_factor_int .)


state 112

    (49) factor -> CTEF n_seen_factor_float .

    MULTIPLY        reduce using rule 49 (factor -> CTEF n_seen_factor_float .)
    DIVIDE          reduce using rule 49 (factor -> CTEF n_seen_factor_float .)
    PLUS            reduce using rule 49 (factor -> CTEF n_seen_factor_float .)
    MINUS           reduce using rule 49 (factor -> CTEF n_seen_factor_float .)
    GREATERT        reduce using rule 49 (factor -> CTEF n_seen_factor_float .)
    LESST           reduce using rule 49 (factor -> CTEF n_seen_factor_float .)
    NOTEQUAL        reduce using rule 49 (factor -> CTEF n_seen_factor_float .)
    DBEQUALS        reduce using rule 49 (factor -> CTEF n_seen_factor_float .)
    GREATEREQUAL    reduce using rule 49 (factor -> CTEF n_seen_factor_float .)
    LESSEQUAL       reduce using rule 49 (factor -> CTEF n_seen_factor_float .)
    OR              reduce using rule 49 (factor -> CTEF n_seen_factor_float .)
    AND             reduce using rule 49 (factor -> CTEF n_seen_factor_float .)
    SEMICOLON       reduce using rule 49 (factor -> CTEF n_seen_factor_float .)
    RPAREN          reduce using rule 49 (factor -> CTEF n_seen_factor_float .)
    COMA            reduce using rule 49 (factor -> CTEF n_seen_factor_float .)
    TO              reduce using rule 49 (factor -> CTEF n_seen_factor_float .)


state 113

    (50) factor -> CTEC n_seen_factor_char .

    MULTIPLY        reduce using rule 50 (factor -> CTEC n_seen_factor_char .)
    DIVIDE          reduce using rule 50 (factor -> CTEC n_seen_factor_char .)
    PLUS            reduce using rule 50 (factor -> CTEC n_seen_factor_char .)
    MINUS           reduce using rule 50 (factor -> CTEC n_seen_factor_char .)
    GREATERT        reduce using rule 50 (factor -> CTEC n_seen_factor_char .)
    LESST           reduce using rule 50 (factor -> CTEC n_seen_factor_char .)
    NOTEQUAL        reduce using rule 50 (factor -> CTEC n_seen_factor_char .)
    DBEQUALS        reduce using rule 50 (factor -> CTEC n_seen_factor_char .)
    GREATEREQUAL    reduce using rule 50 (factor -> CTEC n_seen_factor_char .)
    LESSEQUAL       reduce using rule 50 (factor -> CTEC n_seen_factor_char .)
    OR              reduce using rule 50 (factor -> CTEC n_seen_factor_char .)
    AND             reduce using rule 50 (factor -> CTEC n_seen_factor_char .)
    SEMICOLON       reduce using rule 50 (factor -> CTEC n_seen_factor_char .)
    RPAREN          reduce using rule 50 (factor -> CTEC n_seen_factor_char .)
    COMA            reduce using rule 50 (factor -> CTEC n_seen_factor_char .)
    TO              reduce using rule 50 (factor -> CTEC n_seen_factor_char .)


state 114

    (51) factor -> ID n_seen_factor_id .

    MULTIPLY        reduce using rule 51 (factor -> ID n_seen_factor_id .)
    DIVIDE          reduce using rule 51 (factor -> ID n_seen_factor_id .)
    PLUS            reduce using rule 51 (factor -> ID n_seen_factor_id .)
    MINUS           reduce using rule 51 (factor -> ID n_seen_factor_id .)
    GREATERT        reduce using rule 51 (factor -> ID n_seen_factor_id .)
    LESST           reduce using rule 51 (factor -> ID n_seen_factor_id .)
    NOTEQUAL        reduce using rule 51 (factor -> ID n_seen_factor_id .)
    DBEQUALS        reduce using rule 51 (factor -> ID n_seen_factor_id .)
    GREATEREQUAL    reduce using rule 51 (factor -> ID n_seen_factor_id .)
    LESSEQUAL       reduce using rule 51 (factor -> ID n_seen_factor_id .)
    OR              reduce using rule 51 (factor -> ID n_seen_factor_id .)
    AND             reduce using rule 51 (factor -> ID n_seen_factor_id .)
    SEMICOLON       reduce using rule 51 (factor -> ID n_seen_factor_id .)
    RPAREN          reduce using rule 51 (factor -> ID n_seen_factor_id .)
    COMA            reduce using rule 51 (factor -> ID n_seen_factor_id .)
    TO              reduce using rule 51 (factor -> ID n_seen_factor_id .)


state 115

    (61) for -> FOR asignacion TO . CTEINT bloque

    CTEINT          shift and go to state 139


state 116

    (62) while -> WHILE n_salto_while LPAREN . expresion RPAREN n_cond_while bloque n_ret_while
    (30) expresion -> . exp n_gen_and AND n_add_operator expresion
    (31) expresion -> . exp n_gen_and
    (32) exp -> . exp_aux n_gen_or OR n_add_operator exp
    (33) exp -> . exp_aux n_gen_or
    (34) exp_aux -> . exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux
    (35) exp_aux -> . exp_aux2 n_gen_relational LESST n_add_operator exp_aux
    (36) exp_aux -> . exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux
    (37) exp_aux -> . exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux
    (38) exp_aux -> . exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux
    (39) exp_aux -> . exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux
    (40) exp_aux -> . exp_aux2 n_gen_relational
    (41) exp_aux2 -> . term n_gen_term PLUS n_add_operator exp_aux2
    (42) exp_aux2 -> . term n_gen_term MINUS n_add_operator exp_aux2
    (43) exp_aux2 -> . term n_gen_term
    (44) term -> . factor n_gen_factor MULTIPLY n_add_operator term
    (45) term -> . factor n_gen_factor DIVIDE n_add_operator term
    (46) term -> . factor n_gen_factor
    (47) factor -> . LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom
    (48) factor -> . CTEINT n_seen_factor_int
    (49) factor -> . CTEF n_seen_factor_float
    (50) factor -> . CTEC n_seen_factor_char
    (51) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 83
    CTEINT          shift and go to state 84
    CTEF            shift and go to state 85
    CTEC            shift and go to state 86
    ID              shift and go to state 87

    expresion                      shift and go to state 140
    exp                            shift and go to state 78
    exp_aux                        shift and go to state 79
    exp_aux2                       shift and go to state 80
    term                           shift and go to state 81
    factor                         shift and go to state 82

state 117

    (7) vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux .

    MODULE          reduce using rule 7 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux .)
    MAIN            reduce using rule 7 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux .)
    RBRACKET        reduce using rule 7 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux .)
    ID              reduce using rule 7 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux .)
    IF              reduce using rule 7 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux .)
    PRINT           reduce using rule 7 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux .)
    RETURN          reduce using rule 7 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux .)
    FOR             reduce using rule 7 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux .)
    WHILE           reduce using rule 7 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux .)


state 118

    (52) module -> MODULE VOID n_seen_type ID n_seen_func_name params bloque_module module .

    MAIN            reduce using rule 52 (module -> MODULE VOID n_seen_type ID n_seen_func_name params bloque_module module .)


state 119

    (9) vars_func -> ID n_seen_var_name COLON . tipo n_set_var_type COMA vars_func
    (10) vars_func -> ID n_seen_var_name COLON . tipo n_set_var_type
    (11) tipo -> . INT n_seen_type
    (12) tipo -> . FLOAT n_seen_type
    (13) tipo -> . CHAR n_seen_type

    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20

    tipo                           shift and go to state 141

state 120

    (29) asignacion -> ID n_seen_factor_id EQUAL n_add_operator . expresion n_assign
    (30) expresion -> . exp n_gen_and AND n_add_operator expresion
    (31) expresion -> . exp n_gen_and
    (32) exp -> . exp_aux n_gen_or OR n_add_operator exp
    (33) exp -> . exp_aux n_gen_or
    (34) exp_aux -> . exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux
    (35) exp_aux -> . exp_aux2 n_gen_relational LESST n_add_operator exp_aux
    (36) exp_aux -> . exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux
    (37) exp_aux -> . exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux
    (38) exp_aux -> . exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux
    (39) exp_aux -> . exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux
    (40) exp_aux -> . exp_aux2 n_gen_relational
    (41) exp_aux2 -> . term n_gen_term PLUS n_add_operator exp_aux2
    (42) exp_aux2 -> . term n_gen_term MINUS n_add_operator exp_aux2
    (43) exp_aux2 -> . term n_gen_term
    (44) term -> . factor n_gen_factor MULTIPLY n_add_operator term
    (45) term -> . factor n_gen_factor DIVIDE n_add_operator term
    (46) term -> . factor n_gen_factor
    (47) factor -> . LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom
    (48) factor -> . CTEINT n_seen_factor_int
    (49) factor -> . CTEF n_seen_factor_float
    (50) factor -> . CTEC n_seen_factor_char
    (51) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 83
    CTEINT          shift and go to state 84
    CTEF            shift and go to state 85
    CTEC            shift and go to state 86
    ID              shift and go to state 87

    expresion                      shift and go to state 142
    exp                            shift and go to state 78
    exp_aux                        shift and go to state 79
    exp_aux2                       shift and go to state 80
    term                           shift and go to state 81
    factor                         shift and go to state 82

state 121

    (58) call_module -> ID LPAREN expresion RPAREN .

    SEMICOLON       reduce using rule 58 (call_module -> ID LPAREN expresion RPAREN .)


state 122

    (63) condicion -> IF LPAREN expresion RPAREN . n_check_exp bloque ELSE n_else bloque n_fill_end
    (64) condicion -> IF LPAREN expresion RPAREN . n_check_exp bloque n_fill_end
    (87) n_check_exp -> .

    LBRACKET        reduce using rule 87 (n_check_exp -> .)

    n_check_exp                    shift and go to state 143

state 123

    (65) escritura -> PRINT LPAREN escritura_aux RPAREN .

    SEMICOLON       reduce using rule 65 (escritura -> PRINT LPAREN escritura_aux RPAREN .)


state 124

    (66) escritura_aux -> expresion COMA . escritura_aux
    (66) escritura_aux -> . expresion COMA escritura_aux
    (67) escritura_aux -> . CTESTRING COMA escritura_aux
    (68) escritura_aux -> . expresion
    (69) escritura_aux -> . CTESTRING
    (30) expresion -> . exp n_gen_and AND n_add_operator expresion
    (31) expresion -> . exp n_gen_and
    (32) exp -> . exp_aux n_gen_or OR n_add_operator exp
    (33) exp -> . exp_aux n_gen_or
    (34) exp_aux -> . exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux
    (35) exp_aux -> . exp_aux2 n_gen_relational LESST n_add_operator exp_aux
    (36) exp_aux -> . exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux
    (37) exp_aux -> . exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux
    (38) exp_aux -> . exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux
    (39) exp_aux -> . exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux
    (40) exp_aux -> . exp_aux2 n_gen_relational
    (41) exp_aux2 -> . term n_gen_term PLUS n_add_operator exp_aux2
    (42) exp_aux2 -> . term n_gen_term MINUS n_add_operator exp_aux2
    (43) exp_aux2 -> . term n_gen_term
    (44) term -> . factor n_gen_factor MULTIPLY n_add_operator term
    (45) term -> . factor n_gen_factor DIVIDE n_add_operator term
    (46) term -> . factor n_gen_factor
    (47) factor -> . LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom
    (48) factor -> . CTEINT n_seen_factor_int
    (49) factor -> . CTEF n_seen_factor_float
    (50) factor -> . CTEC n_seen_factor_char
    (51) factor -> . ID n_seen_factor_id

    CTESTRING       shift and go to state 104
    LPAREN          shift and go to state 83
    CTEINT          shift and go to state 84
    CTEF            shift and go to state 85
    CTEC            shift and go to state 86
    ID              shift and go to state 87

    expresion                      shift and go to state 103
    escritura_aux                  shift and go to state 144
    exp                            shift and go to state 78
    exp_aux                        shift and go to state 79
    exp_aux2                       shift and go to state 80
    term                           shift and go to state 81
    factor                         shift and go to state 82

state 125

    (67) escritura_aux -> CTESTRING COMA . escritura_aux
    (66) escritura_aux -> . expresion COMA escritura_aux
    (67) escritura_aux -> . CTESTRING COMA escritura_aux
    (68) escritura_aux -> . expresion
    (69) escritura_aux -> . CTESTRING
    (30) expresion -> . exp n_gen_and AND n_add_operator expresion
    (31) expresion -> . exp n_gen_and
    (32) exp -> . exp_aux n_gen_or OR n_add_operator exp
    (33) exp -> . exp_aux n_gen_or
    (34) exp_aux -> . exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux
    (35) exp_aux -> . exp_aux2 n_gen_relational LESST n_add_operator exp_aux
    (36) exp_aux -> . exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux
    (37) exp_aux -> . exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux
    (38) exp_aux -> . exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux
    (39) exp_aux -> . exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux
    (40) exp_aux -> . exp_aux2 n_gen_relational
    (41) exp_aux2 -> . term n_gen_term PLUS n_add_operator exp_aux2
    (42) exp_aux2 -> . term n_gen_term MINUS n_add_operator exp_aux2
    (43) exp_aux2 -> . term n_gen_term
    (44) term -> . factor n_gen_factor MULTIPLY n_add_operator term
    (45) term -> . factor n_gen_factor DIVIDE n_add_operator term
    (46) term -> . factor n_gen_factor
    (47) factor -> . LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom
    (48) factor -> . CTEINT n_seen_factor_int
    (49) factor -> . CTEF n_seen_factor_float
    (50) factor -> . CTEC n_seen_factor_char
    (51) factor -> . ID n_seen_factor_id

    CTESTRING       shift and go to state 104
    LPAREN          shift and go to state 83
    CTEINT          shift and go to state 84
    CTEF            shift and go to state 85
    CTEC            shift and go to state 86
    ID              shift and go to state 87

    escritura_aux                  shift and go to state 145
    expresion                      shift and go to state 103
    exp                            shift and go to state 78
    exp_aux                        shift and go to state 79
    exp_aux2                       shift and go to state 80
    term                           shift and go to state 81
    factor                         shift and go to state 82

state 126

    (30) expresion -> exp n_gen_and AND . n_add_operator expresion
    (79) n_add_operator -> .

    LPAREN          reduce using rule 79 (n_add_operator -> .)
    CTEINT          reduce using rule 79 (n_add_operator -> .)
    CTEF            reduce using rule 79 (n_add_operator -> .)
    CTEC            reduce using rule 79 (n_add_operator -> .)
    ID              reduce using rule 79 (n_add_operator -> .)

    n_add_operator                 shift and go to state 146

state 127

    (32) exp -> exp_aux n_gen_or OR . n_add_operator exp
    (79) n_add_operator -> .

    LPAREN          reduce using rule 79 (n_add_operator -> .)
    CTEINT          reduce using rule 79 (n_add_operator -> .)
    CTEF            reduce using rule 79 (n_add_operator -> .)
    CTEC            reduce using rule 79 (n_add_operator -> .)
    ID              reduce using rule 79 (n_add_operator -> .)

    n_add_operator                 shift and go to state 147

state 128

    (34) exp_aux -> exp_aux2 n_gen_relational GREATERT . n_add_operator exp_aux
    (79) n_add_operator -> .

    LPAREN          reduce using rule 79 (n_add_operator -> .)
    CTEINT          reduce using rule 79 (n_add_operator -> .)
    CTEF            reduce using rule 79 (n_add_operator -> .)
    CTEC            reduce using rule 79 (n_add_operator -> .)
    ID              reduce using rule 79 (n_add_operator -> .)

    n_add_operator                 shift and go to state 148

state 129

    (35) exp_aux -> exp_aux2 n_gen_relational LESST . n_add_operator exp_aux
    (79) n_add_operator -> .

    LPAREN          reduce using rule 79 (n_add_operator -> .)
    CTEINT          reduce using rule 79 (n_add_operator -> .)
    CTEF            reduce using rule 79 (n_add_operator -> .)
    CTEC            reduce using rule 79 (n_add_operator -> .)
    ID              reduce using rule 79 (n_add_operator -> .)

    n_add_operator                 shift and go to state 149

state 130

    (36) exp_aux -> exp_aux2 n_gen_relational NOTEQUAL . n_add_operator exp_aux
    (79) n_add_operator -> .

    LPAREN          reduce using rule 79 (n_add_operator -> .)
    CTEINT          reduce using rule 79 (n_add_operator -> .)
    CTEF            reduce using rule 79 (n_add_operator -> .)
    CTEC            reduce using rule 79 (n_add_operator -> .)
    ID              reduce using rule 79 (n_add_operator -> .)

    n_add_operator                 shift and go to state 150

state 131

    (37) exp_aux -> exp_aux2 n_gen_relational DBEQUALS . n_add_operator exp_aux
    (79) n_add_operator -> .

    LPAREN          reduce using rule 79 (n_add_operator -> .)
    CTEINT          reduce using rule 79 (n_add_operator -> .)
    CTEF            reduce using rule 79 (n_add_operator -> .)
    CTEC            reduce using rule 79 (n_add_operator -> .)
    ID              reduce using rule 79 (n_add_operator -> .)

    n_add_operator                 shift and go to state 151

state 132

    (38) exp_aux -> exp_aux2 n_gen_relational GREATEREQUAL . n_add_operator exp_aux
    (79) n_add_operator -> .

    LPAREN          reduce using rule 79 (n_add_operator -> .)
    CTEINT          reduce using rule 79 (n_add_operator -> .)
    CTEF            reduce using rule 79 (n_add_operator -> .)
    CTEC            reduce using rule 79 (n_add_operator -> .)
    ID              reduce using rule 79 (n_add_operator -> .)

    n_add_operator                 shift and go to state 152

state 133

    (39) exp_aux -> exp_aux2 n_gen_relational LESSEQUAL . n_add_operator exp_aux
    (79) n_add_operator -> .

    LPAREN          reduce using rule 79 (n_add_operator -> .)
    CTEINT          reduce using rule 79 (n_add_operator -> .)
    CTEF            reduce using rule 79 (n_add_operator -> .)
    CTEC            reduce using rule 79 (n_add_operator -> .)
    ID              reduce using rule 79 (n_add_operator -> .)

    n_add_operator                 shift and go to state 153

state 134

    (41) exp_aux2 -> term n_gen_term PLUS . n_add_operator exp_aux2
    (79) n_add_operator -> .

    LPAREN          reduce using rule 79 (n_add_operator -> .)
    CTEINT          reduce using rule 79 (n_add_operator -> .)
    CTEF            reduce using rule 79 (n_add_operator -> .)
    CTEC            reduce using rule 79 (n_add_operator -> .)
    ID              reduce using rule 79 (n_add_operator -> .)

    n_add_operator                 shift and go to state 154

state 135

    (42) exp_aux2 -> term n_gen_term MINUS . n_add_operator exp_aux2
    (79) n_add_operator -> .

    LPAREN          reduce using rule 79 (n_add_operator -> .)
    CTEINT          reduce using rule 79 (n_add_operator -> .)
    CTEF            reduce using rule 79 (n_add_operator -> .)
    CTEC            reduce using rule 79 (n_add_operator -> .)
    ID              reduce using rule 79 (n_add_operator -> .)

    n_add_operator                 shift and go to state 155

state 136

    (44) term -> factor n_gen_factor MULTIPLY . n_add_operator term
    (79) n_add_operator -> .

    LPAREN          reduce using rule 79 (n_add_operator -> .)
    CTEINT          reduce using rule 79 (n_add_operator -> .)
    CTEF            reduce using rule 79 (n_add_operator -> .)
    CTEC            reduce using rule 79 (n_add_operator -> .)
    ID              reduce using rule 79 (n_add_operator -> .)

    n_add_operator                 shift and go to state 156

state 137

    (45) term -> factor n_gen_factor DIVIDE . n_add_operator term
    (79) n_add_operator -> .

    LPAREN          reduce using rule 79 (n_add_operator -> .)
    CTEINT          reduce using rule 79 (n_add_operator -> .)
    CTEF            reduce using rule 79 (n_add_operator -> .)
    CTEC            reduce using rule 79 (n_add_operator -> .)
    ID              reduce using rule 79 (n_add_operator -> .)

    n_add_operator                 shift and go to state 157

state 138

    (47) factor -> LPAREN n_push_fake_bottom expresion . RPAREN n_pop_fake_bottom

    RPAREN          shift and go to state 158


state 139

    (61) for -> FOR asignacion TO CTEINT . bloque
    (18) bloque -> . LBRACKET estatuto_aux RBRACKET
    (19) bloque -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 160

    bloque                         shift and go to state 159

state 140

    (62) while -> WHILE n_salto_while LPAREN expresion . RPAREN n_cond_while bloque n_ret_while

    RPAREN          shift and go to state 161


state 141

    (9) vars_func -> ID n_seen_var_name COLON tipo . n_set_var_type COMA vars_func
    (10) vars_func -> ID n_seen_var_name COLON tipo . n_set_var_type
    (73) n_set_var_type -> .

    COMA            reduce using rule 73 (n_set_var_type -> .)
    RPAREN          reduce using rule 73 (n_set_var_type -> .)

    n_set_var_type                 shift and go to state 162

state 142

    (29) asignacion -> ID n_seen_factor_id EQUAL n_add_operator expresion . n_assign
    (78) n_assign -> .

    SEMICOLON       reduce using rule 78 (n_assign -> .)
    TO              reduce using rule 78 (n_assign -> .)

    n_assign                       shift and go to state 163

state 143

    (63) condicion -> IF LPAREN expresion RPAREN n_check_exp . bloque ELSE n_else bloque n_fill_end
    (64) condicion -> IF LPAREN expresion RPAREN n_check_exp . bloque n_fill_end
    (18) bloque -> . LBRACKET estatuto_aux RBRACKET
    (19) bloque -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 160

    bloque                         shift and go to state 164

state 144

    (66) escritura_aux -> expresion COMA escritura_aux .

    RPAREN          reduce using rule 66 (escritura_aux -> expresion COMA escritura_aux .)


state 145

    (67) escritura_aux -> CTESTRING COMA escritura_aux .

    RPAREN          reduce using rule 67 (escritura_aux -> CTESTRING COMA escritura_aux .)


state 146

    (30) expresion -> exp n_gen_and AND n_add_operator . expresion
    (30) expresion -> . exp n_gen_and AND n_add_operator expresion
    (31) expresion -> . exp n_gen_and
    (32) exp -> . exp_aux n_gen_or OR n_add_operator exp
    (33) exp -> . exp_aux n_gen_or
    (34) exp_aux -> . exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux
    (35) exp_aux -> . exp_aux2 n_gen_relational LESST n_add_operator exp_aux
    (36) exp_aux -> . exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux
    (37) exp_aux -> . exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux
    (38) exp_aux -> . exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux
    (39) exp_aux -> . exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux
    (40) exp_aux -> . exp_aux2 n_gen_relational
    (41) exp_aux2 -> . term n_gen_term PLUS n_add_operator exp_aux2
    (42) exp_aux2 -> . term n_gen_term MINUS n_add_operator exp_aux2
    (43) exp_aux2 -> . term n_gen_term
    (44) term -> . factor n_gen_factor MULTIPLY n_add_operator term
    (45) term -> . factor n_gen_factor DIVIDE n_add_operator term
    (46) term -> . factor n_gen_factor
    (47) factor -> . LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom
    (48) factor -> . CTEINT n_seen_factor_int
    (49) factor -> . CTEF n_seen_factor_float
    (50) factor -> . CTEC n_seen_factor_char
    (51) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 83
    CTEINT          shift and go to state 84
    CTEF            shift and go to state 85
    CTEC            shift and go to state 86
    ID              shift and go to state 87

    exp                            shift and go to state 78
    expresion                      shift and go to state 165
    exp_aux                        shift and go to state 79
    exp_aux2                       shift and go to state 80
    term                           shift and go to state 81
    factor                         shift and go to state 82

state 147

    (32) exp -> exp_aux n_gen_or OR n_add_operator . exp
    (32) exp -> . exp_aux n_gen_or OR n_add_operator exp
    (33) exp -> . exp_aux n_gen_or
    (34) exp_aux -> . exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux
    (35) exp_aux -> . exp_aux2 n_gen_relational LESST n_add_operator exp_aux
    (36) exp_aux -> . exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux
    (37) exp_aux -> . exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux
    (38) exp_aux -> . exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux
    (39) exp_aux -> . exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux
    (40) exp_aux -> . exp_aux2 n_gen_relational
    (41) exp_aux2 -> . term n_gen_term PLUS n_add_operator exp_aux2
    (42) exp_aux2 -> . term n_gen_term MINUS n_add_operator exp_aux2
    (43) exp_aux2 -> . term n_gen_term
    (44) term -> . factor n_gen_factor MULTIPLY n_add_operator term
    (45) term -> . factor n_gen_factor DIVIDE n_add_operator term
    (46) term -> . factor n_gen_factor
    (47) factor -> . LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom
    (48) factor -> . CTEINT n_seen_factor_int
    (49) factor -> . CTEF n_seen_factor_float
    (50) factor -> . CTEC n_seen_factor_char
    (51) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 83
    CTEINT          shift and go to state 84
    CTEF            shift and go to state 85
    CTEC            shift and go to state 86
    ID              shift and go to state 87

    exp_aux                        shift and go to state 79
    exp                            shift and go to state 166
    exp_aux2                       shift and go to state 80
    term                           shift and go to state 81
    factor                         shift and go to state 82

state 148

    (34) exp_aux -> exp_aux2 n_gen_relational GREATERT n_add_operator . exp_aux
    (34) exp_aux -> . exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux
    (35) exp_aux -> . exp_aux2 n_gen_relational LESST n_add_operator exp_aux
    (36) exp_aux -> . exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux
    (37) exp_aux -> . exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux
    (38) exp_aux -> . exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux
    (39) exp_aux -> . exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux
    (40) exp_aux -> . exp_aux2 n_gen_relational
    (41) exp_aux2 -> . term n_gen_term PLUS n_add_operator exp_aux2
    (42) exp_aux2 -> . term n_gen_term MINUS n_add_operator exp_aux2
    (43) exp_aux2 -> . term n_gen_term
    (44) term -> . factor n_gen_factor MULTIPLY n_add_operator term
    (45) term -> . factor n_gen_factor DIVIDE n_add_operator term
    (46) term -> . factor n_gen_factor
    (47) factor -> . LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom
    (48) factor -> . CTEINT n_seen_factor_int
    (49) factor -> . CTEF n_seen_factor_float
    (50) factor -> . CTEC n_seen_factor_char
    (51) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 83
    CTEINT          shift and go to state 84
    CTEF            shift and go to state 85
    CTEC            shift and go to state 86
    ID              shift and go to state 87

    exp_aux2                       shift and go to state 80
    exp_aux                        shift and go to state 167
    term                           shift and go to state 81
    factor                         shift and go to state 82

state 149

    (35) exp_aux -> exp_aux2 n_gen_relational LESST n_add_operator . exp_aux
    (34) exp_aux -> . exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux
    (35) exp_aux -> . exp_aux2 n_gen_relational LESST n_add_operator exp_aux
    (36) exp_aux -> . exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux
    (37) exp_aux -> . exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux
    (38) exp_aux -> . exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux
    (39) exp_aux -> . exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux
    (40) exp_aux -> . exp_aux2 n_gen_relational
    (41) exp_aux2 -> . term n_gen_term PLUS n_add_operator exp_aux2
    (42) exp_aux2 -> . term n_gen_term MINUS n_add_operator exp_aux2
    (43) exp_aux2 -> . term n_gen_term
    (44) term -> . factor n_gen_factor MULTIPLY n_add_operator term
    (45) term -> . factor n_gen_factor DIVIDE n_add_operator term
    (46) term -> . factor n_gen_factor
    (47) factor -> . LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom
    (48) factor -> . CTEINT n_seen_factor_int
    (49) factor -> . CTEF n_seen_factor_float
    (50) factor -> . CTEC n_seen_factor_char
    (51) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 83
    CTEINT          shift and go to state 84
    CTEF            shift and go to state 85
    CTEC            shift and go to state 86
    ID              shift and go to state 87

    exp_aux2                       shift and go to state 80
    exp_aux                        shift and go to state 168
    term                           shift and go to state 81
    factor                         shift and go to state 82

state 150

    (36) exp_aux -> exp_aux2 n_gen_relational NOTEQUAL n_add_operator . exp_aux
    (34) exp_aux -> . exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux
    (35) exp_aux -> . exp_aux2 n_gen_relational LESST n_add_operator exp_aux
    (36) exp_aux -> . exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux
    (37) exp_aux -> . exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux
    (38) exp_aux -> . exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux
    (39) exp_aux -> . exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux
    (40) exp_aux -> . exp_aux2 n_gen_relational
    (41) exp_aux2 -> . term n_gen_term PLUS n_add_operator exp_aux2
    (42) exp_aux2 -> . term n_gen_term MINUS n_add_operator exp_aux2
    (43) exp_aux2 -> . term n_gen_term
    (44) term -> . factor n_gen_factor MULTIPLY n_add_operator term
    (45) term -> . factor n_gen_factor DIVIDE n_add_operator term
    (46) term -> . factor n_gen_factor
    (47) factor -> . LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom
    (48) factor -> . CTEINT n_seen_factor_int
    (49) factor -> . CTEF n_seen_factor_float
    (50) factor -> . CTEC n_seen_factor_char
    (51) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 83
    CTEINT          shift and go to state 84
    CTEF            shift and go to state 85
    CTEC            shift and go to state 86
    ID              shift and go to state 87

    exp_aux2                       shift and go to state 80
    exp_aux                        shift and go to state 169
    term                           shift and go to state 81
    factor                         shift and go to state 82

state 151

    (37) exp_aux -> exp_aux2 n_gen_relational DBEQUALS n_add_operator . exp_aux
    (34) exp_aux -> . exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux
    (35) exp_aux -> . exp_aux2 n_gen_relational LESST n_add_operator exp_aux
    (36) exp_aux -> . exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux
    (37) exp_aux -> . exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux
    (38) exp_aux -> . exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux
    (39) exp_aux -> . exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux
    (40) exp_aux -> . exp_aux2 n_gen_relational
    (41) exp_aux2 -> . term n_gen_term PLUS n_add_operator exp_aux2
    (42) exp_aux2 -> . term n_gen_term MINUS n_add_operator exp_aux2
    (43) exp_aux2 -> . term n_gen_term
    (44) term -> . factor n_gen_factor MULTIPLY n_add_operator term
    (45) term -> . factor n_gen_factor DIVIDE n_add_operator term
    (46) term -> . factor n_gen_factor
    (47) factor -> . LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom
    (48) factor -> . CTEINT n_seen_factor_int
    (49) factor -> . CTEF n_seen_factor_float
    (50) factor -> . CTEC n_seen_factor_char
    (51) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 83
    CTEINT          shift and go to state 84
    CTEF            shift and go to state 85
    CTEC            shift and go to state 86
    ID              shift and go to state 87

    exp_aux2                       shift and go to state 80
    exp_aux                        shift and go to state 170
    term                           shift and go to state 81
    factor                         shift and go to state 82

state 152

    (38) exp_aux -> exp_aux2 n_gen_relational GREATEREQUAL n_add_operator . exp_aux
    (34) exp_aux -> . exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux
    (35) exp_aux -> . exp_aux2 n_gen_relational LESST n_add_operator exp_aux
    (36) exp_aux -> . exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux
    (37) exp_aux -> . exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux
    (38) exp_aux -> . exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux
    (39) exp_aux -> . exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux
    (40) exp_aux -> . exp_aux2 n_gen_relational
    (41) exp_aux2 -> . term n_gen_term PLUS n_add_operator exp_aux2
    (42) exp_aux2 -> . term n_gen_term MINUS n_add_operator exp_aux2
    (43) exp_aux2 -> . term n_gen_term
    (44) term -> . factor n_gen_factor MULTIPLY n_add_operator term
    (45) term -> . factor n_gen_factor DIVIDE n_add_operator term
    (46) term -> . factor n_gen_factor
    (47) factor -> . LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom
    (48) factor -> . CTEINT n_seen_factor_int
    (49) factor -> . CTEF n_seen_factor_float
    (50) factor -> . CTEC n_seen_factor_char
    (51) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 83
    CTEINT          shift and go to state 84
    CTEF            shift and go to state 85
    CTEC            shift and go to state 86
    ID              shift and go to state 87

    exp_aux2                       shift and go to state 80
    exp_aux                        shift and go to state 171
    term                           shift and go to state 81
    factor                         shift and go to state 82

state 153

    (39) exp_aux -> exp_aux2 n_gen_relational LESSEQUAL n_add_operator . exp_aux
    (34) exp_aux -> . exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux
    (35) exp_aux -> . exp_aux2 n_gen_relational LESST n_add_operator exp_aux
    (36) exp_aux -> . exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux
    (37) exp_aux -> . exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux
    (38) exp_aux -> . exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux
    (39) exp_aux -> . exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux
    (40) exp_aux -> . exp_aux2 n_gen_relational
    (41) exp_aux2 -> . term n_gen_term PLUS n_add_operator exp_aux2
    (42) exp_aux2 -> . term n_gen_term MINUS n_add_operator exp_aux2
    (43) exp_aux2 -> . term n_gen_term
    (44) term -> . factor n_gen_factor MULTIPLY n_add_operator term
    (45) term -> . factor n_gen_factor DIVIDE n_add_operator term
    (46) term -> . factor n_gen_factor
    (47) factor -> . LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom
    (48) factor -> . CTEINT n_seen_factor_int
    (49) factor -> . CTEF n_seen_factor_float
    (50) factor -> . CTEC n_seen_factor_char
    (51) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 83
    CTEINT          shift and go to state 84
    CTEF            shift and go to state 85
    CTEC            shift and go to state 86
    ID              shift and go to state 87

    exp_aux2                       shift and go to state 80
    exp_aux                        shift and go to state 172
    term                           shift and go to state 81
    factor                         shift and go to state 82

state 154

    (41) exp_aux2 -> term n_gen_term PLUS n_add_operator . exp_aux2
    (41) exp_aux2 -> . term n_gen_term PLUS n_add_operator exp_aux2
    (42) exp_aux2 -> . term n_gen_term MINUS n_add_operator exp_aux2
    (43) exp_aux2 -> . term n_gen_term
    (44) term -> . factor n_gen_factor MULTIPLY n_add_operator term
    (45) term -> . factor n_gen_factor DIVIDE n_add_operator term
    (46) term -> . factor n_gen_factor
    (47) factor -> . LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom
    (48) factor -> . CTEINT n_seen_factor_int
    (49) factor -> . CTEF n_seen_factor_float
    (50) factor -> . CTEC n_seen_factor_char
    (51) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 83
    CTEINT          shift and go to state 84
    CTEF            shift and go to state 85
    CTEC            shift and go to state 86
    ID              shift and go to state 87

    term                           shift and go to state 81
    exp_aux2                       shift and go to state 173
    factor                         shift and go to state 82

state 155

    (42) exp_aux2 -> term n_gen_term MINUS n_add_operator . exp_aux2
    (41) exp_aux2 -> . term n_gen_term PLUS n_add_operator exp_aux2
    (42) exp_aux2 -> . term n_gen_term MINUS n_add_operator exp_aux2
    (43) exp_aux2 -> . term n_gen_term
    (44) term -> . factor n_gen_factor MULTIPLY n_add_operator term
    (45) term -> . factor n_gen_factor DIVIDE n_add_operator term
    (46) term -> . factor n_gen_factor
    (47) factor -> . LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom
    (48) factor -> . CTEINT n_seen_factor_int
    (49) factor -> . CTEF n_seen_factor_float
    (50) factor -> . CTEC n_seen_factor_char
    (51) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 83
    CTEINT          shift and go to state 84
    CTEF            shift and go to state 85
    CTEC            shift and go to state 86
    ID              shift and go to state 87

    term                           shift and go to state 81
    exp_aux2                       shift and go to state 174
    factor                         shift and go to state 82

state 156

    (44) term -> factor n_gen_factor MULTIPLY n_add_operator . term
    (44) term -> . factor n_gen_factor MULTIPLY n_add_operator term
    (45) term -> . factor n_gen_factor DIVIDE n_add_operator term
    (46) term -> . factor n_gen_factor
    (47) factor -> . LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom
    (48) factor -> . CTEINT n_seen_factor_int
    (49) factor -> . CTEF n_seen_factor_float
    (50) factor -> . CTEC n_seen_factor_char
    (51) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 83
    CTEINT          shift and go to state 84
    CTEF            shift and go to state 85
    CTEC            shift and go to state 86
    ID              shift and go to state 87

    factor                         shift and go to state 82
    term                           shift and go to state 175

state 157

    (45) term -> factor n_gen_factor DIVIDE n_add_operator . term
    (44) term -> . factor n_gen_factor MULTIPLY n_add_operator term
    (45) term -> . factor n_gen_factor DIVIDE n_add_operator term
    (46) term -> . factor n_gen_factor
    (47) factor -> . LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom
    (48) factor -> . CTEINT n_seen_factor_int
    (49) factor -> . CTEF n_seen_factor_float
    (50) factor -> . CTEC n_seen_factor_char
    (51) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 83
    CTEINT          shift and go to state 84
    CTEF            shift and go to state 85
    CTEC            shift and go to state 86
    ID              shift and go to state 87

    factor                         shift and go to state 82
    term                           shift and go to state 176

state 158

    (47) factor -> LPAREN n_push_fake_bottom expresion RPAREN . n_pop_fake_bottom
    (86) n_pop_fake_bottom -> .

    MULTIPLY        reduce using rule 86 (n_pop_fake_bottom -> .)
    DIVIDE          reduce using rule 86 (n_pop_fake_bottom -> .)
    PLUS            reduce using rule 86 (n_pop_fake_bottom -> .)
    MINUS           reduce using rule 86 (n_pop_fake_bottom -> .)
    GREATERT        reduce using rule 86 (n_pop_fake_bottom -> .)
    LESST           reduce using rule 86 (n_pop_fake_bottom -> .)
    NOTEQUAL        reduce using rule 86 (n_pop_fake_bottom -> .)
    DBEQUALS        reduce using rule 86 (n_pop_fake_bottom -> .)
    GREATEREQUAL    reduce using rule 86 (n_pop_fake_bottom -> .)
    LESSEQUAL       reduce using rule 86 (n_pop_fake_bottom -> .)
    OR              reduce using rule 86 (n_pop_fake_bottom -> .)
    AND             reduce using rule 86 (n_pop_fake_bottom -> .)
    SEMICOLON       reduce using rule 86 (n_pop_fake_bottom -> .)
    RPAREN          reduce using rule 86 (n_pop_fake_bottom -> .)
    COMA            reduce using rule 86 (n_pop_fake_bottom -> .)
    TO              reduce using rule 86 (n_pop_fake_bottom -> .)

    n_pop_fake_bottom              shift and go to state 177

state 159

    (61) for -> FOR asignacion TO CTEINT bloque .

    SEMICOLON       reduce using rule 61 (for -> FOR asignacion TO CTEINT bloque .)


state 160

    (18) bloque -> LBRACKET . estatuto_aux RBRACKET
    (19) bloque -> LBRACKET . RBRACKET
    (20) estatuto_aux -> . estatuto estatuto_aux
    (21) estatuto_aux -> . estatuto
    (22) estatuto -> . asignacion SEMICOLON
    (23) estatuto -> . condicion SEMICOLON
    (24) estatuto -> . escritura SEMICOLON
    (25) estatuto -> . return SEMICOLON
    (26) estatuto -> . for SEMICOLON
    (27) estatuto -> . while SEMICOLON
    (28) estatuto -> . call_module SEMICOLON
    (29) asignacion -> . ID n_seen_factor_id EQUAL n_add_operator expresion n_assign
    (63) condicion -> . IF LPAREN expresion RPAREN n_check_exp bloque ELSE n_else bloque n_fill_end
    (64) condicion -> . IF LPAREN expresion RPAREN n_check_exp bloque n_fill_end
    (65) escritura -> . PRINT LPAREN escritura_aux RPAREN
    (60) return -> . RETURN expresion
    (61) for -> . FOR asignacion TO CTEINT bloque
    (62) while -> . WHILE n_salto_while LPAREN expresion RPAREN n_cond_while bloque n_ret_while
    (58) call_module -> . ID LPAREN expresion RPAREN
    (59) call_module -> . ID LPAREN RPAREN

    RBRACKET        shift and go to state 179
    ID              shift and go to state 50
    IF              shift and go to state 51
    PRINT           shift and go to state 52
    RETURN          shift and go to state 53
    FOR             shift and go to state 54
    WHILE           shift and go to state 55

    estatuto_aux                   shift and go to state 178
    estatuto                       shift and go to state 42
    asignacion                     shift and go to state 43
    condicion                      shift and go to state 44
    escritura                      shift and go to state 45
    return                         shift and go to state 46
    for                            shift and go to state 47
    while                          shift and go to state 48
    call_module                    shift and go to state 49

state 161

    (62) while -> WHILE n_salto_while LPAREN expresion RPAREN . n_cond_while bloque n_ret_while
    (92) n_cond_while -> .

    LBRACKET        reduce using rule 92 (n_cond_while -> .)

    n_cond_while                   shift and go to state 180

state 162

    (9) vars_func -> ID n_seen_var_name COLON tipo n_set_var_type . COMA vars_func
    (10) vars_func -> ID n_seen_var_name COLON tipo n_set_var_type .

    COMA            shift and go to state 181
    RPAREN          reduce using rule 10 (vars_func -> ID n_seen_var_name COLON tipo n_set_var_type .)


state 163

    (29) asignacion -> ID n_seen_factor_id EQUAL n_add_operator expresion n_assign .

    SEMICOLON       reduce using rule 29 (asignacion -> ID n_seen_factor_id EQUAL n_add_operator expresion n_assign .)
    TO              reduce using rule 29 (asignacion -> ID n_seen_factor_id EQUAL n_add_operator expresion n_assign .)


state 164

    (63) condicion -> IF LPAREN expresion RPAREN n_check_exp bloque . ELSE n_else bloque n_fill_end
    (64) condicion -> IF LPAREN expresion RPAREN n_check_exp bloque . n_fill_end
    (88) n_fill_end -> .

    ELSE            shift and go to state 182
    SEMICOLON       reduce using rule 88 (n_fill_end -> .)

    n_fill_end                     shift and go to state 183

state 165

    (30) expresion -> exp n_gen_and AND n_add_operator expresion .

    SEMICOLON       reduce using rule 30 (expresion -> exp n_gen_and AND n_add_operator expresion .)
    RPAREN          reduce using rule 30 (expresion -> exp n_gen_and AND n_add_operator expresion .)
    COMA            reduce using rule 30 (expresion -> exp n_gen_and AND n_add_operator expresion .)
    TO              reduce using rule 30 (expresion -> exp n_gen_and AND n_add_operator expresion .)


state 166

    (32) exp -> exp_aux n_gen_or OR n_add_operator exp .

    AND             reduce using rule 32 (exp -> exp_aux n_gen_or OR n_add_operator exp .)
    SEMICOLON       reduce using rule 32 (exp -> exp_aux n_gen_or OR n_add_operator exp .)
    RPAREN          reduce using rule 32 (exp -> exp_aux n_gen_or OR n_add_operator exp .)
    COMA            reduce using rule 32 (exp -> exp_aux n_gen_or OR n_add_operator exp .)
    TO              reduce using rule 32 (exp -> exp_aux n_gen_or OR n_add_operator exp .)


state 167

    (34) exp_aux -> exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux .

    OR              reduce using rule 34 (exp_aux -> exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux .)
    AND             reduce using rule 34 (exp_aux -> exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux .)
    SEMICOLON       reduce using rule 34 (exp_aux -> exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux .)
    RPAREN          reduce using rule 34 (exp_aux -> exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux .)
    COMA            reduce using rule 34 (exp_aux -> exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux .)
    TO              reduce using rule 34 (exp_aux -> exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux .)


state 168

    (35) exp_aux -> exp_aux2 n_gen_relational LESST n_add_operator exp_aux .

    OR              reduce using rule 35 (exp_aux -> exp_aux2 n_gen_relational LESST n_add_operator exp_aux .)
    AND             reduce using rule 35 (exp_aux -> exp_aux2 n_gen_relational LESST n_add_operator exp_aux .)
    SEMICOLON       reduce using rule 35 (exp_aux -> exp_aux2 n_gen_relational LESST n_add_operator exp_aux .)
    RPAREN          reduce using rule 35 (exp_aux -> exp_aux2 n_gen_relational LESST n_add_operator exp_aux .)
    COMA            reduce using rule 35 (exp_aux -> exp_aux2 n_gen_relational LESST n_add_operator exp_aux .)
    TO              reduce using rule 35 (exp_aux -> exp_aux2 n_gen_relational LESST n_add_operator exp_aux .)


state 169

    (36) exp_aux -> exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux .

    OR              reduce using rule 36 (exp_aux -> exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux .)
    AND             reduce using rule 36 (exp_aux -> exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux .)
    SEMICOLON       reduce using rule 36 (exp_aux -> exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux .)
    RPAREN          reduce using rule 36 (exp_aux -> exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux .)
    COMA            reduce using rule 36 (exp_aux -> exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux .)
    TO              reduce using rule 36 (exp_aux -> exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux .)


state 170

    (37) exp_aux -> exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux .

    OR              reduce using rule 37 (exp_aux -> exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux .)
    AND             reduce using rule 37 (exp_aux -> exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux .)
    SEMICOLON       reduce using rule 37 (exp_aux -> exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux .)
    RPAREN          reduce using rule 37 (exp_aux -> exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux .)
    COMA            reduce using rule 37 (exp_aux -> exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux .)
    TO              reduce using rule 37 (exp_aux -> exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux .)


state 171

    (38) exp_aux -> exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux .

    OR              reduce using rule 38 (exp_aux -> exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux .)
    AND             reduce using rule 38 (exp_aux -> exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux .)
    SEMICOLON       reduce using rule 38 (exp_aux -> exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux .)
    RPAREN          reduce using rule 38 (exp_aux -> exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux .)
    COMA            reduce using rule 38 (exp_aux -> exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux .)
    TO              reduce using rule 38 (exp_aux -> exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux .)


state 172

    (39) exp_aux -> exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux .

    OR              reduce using rule 39 (exp_aux -> exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux .)
    AND             reduce using rule 39 (exp_aux -> exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux .)
    SEMICOLON       reduce using rule 39 (exp_aux -> exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux .)
    RPAREN          reduce using rule 39 (exp_aux -> exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux .)
    COMA            reduce using rule 39 (exp_aux -> exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux .)
    TO              reduce using rule 39 (exp_aux -> exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux .)


state 173

    (41) exp_aux2 -> term n_gen_term PLUS n_add_operator exp_aux2 .

    GREATERT        reduce using rule 41 (exp_aux2 -> term n_gen_term PLUS n_add_operator exp_aux2 .)
    LESST           reduce using rule 41 (exp_aux2 -> term n_gen_term PLUS n_add_operator exp_aux2 .)
    NOTEQUAL        reduce using rule 41 (exp_aux2 -> term n_gen_term PLUS n_add_operator exp_aux2 .)
    DBEQUALS        reduce using rule 41 (exp_aux2 -> term n_gen_term PLUS n_add_operator exp_aux2 .)
    GREATEREQUAL    reduce using rule 41 (exp_aux2 -> term n_gen_term PLUS n_add_operator exp_aux2 .)
    LESSEQUAL       reduce using rule 41 (exp_aux2 -> term n_gen_term PLUS n_add_operator exp_aux2 .)
    OR              reduce using rule 41 (exp_aux2 -> term n_gen_term PLUS n_add_operator exp_aux2 .)
    AND             reduce using rule 41 (exp_aux2 -> term n_gen_term PLUS n_add_operator exp_aux2 .)
    SEMICOLON       reduce using rule 41 (exp_aux2 -> term n_gen_term PLUS n_add_operator exp_aux2 .)
    RPAREN          reduce using rule 41 (exp_aux2 -> term n_gen_term PLUS n_add_operator exp_aux2 .)
    COMA            reduce using rule 41 (exp_aux2 -> term n_gen_term PLUS n_add_operator exp_aux2 .)
    TO              reduce using rule 41 (exp_aux2 -> term n_gen_term PLUS n_add_operator exp_aux2 .)


state 174

    (42) exp_aux2 -> term n_gen_term MINUS n_add_operator exp_aux2 .

    GREATERT        reduce using rule 42 (exp_aux2 -> term n_gen_term MINUS n_add_operator exp_aux2 .)
    LESST           reduce using rule 42 (exp_aux2 -> term n_gen_term MINUS n_add_operator exp_aux2 .)
    NOTEQUAL        reduce using rule 42 (exp_aux2 -> term n_gen_term MINUS n_add_operator exp_aux2 .)
    DBEQUALS        reduce using rule 42 (exp_aux2 -> term n_gen_term MINUS n_add_operator exp_aux2 .)
    GREATEREQUAL    reduce using rule 42 (exp_aux2 -> term n_gen_term MINUS n_add_operator exp_aux2 .)
    LESSEQUAL       reduce using rule 42 (exp_aux2 -> term n_gen_term MINUS n_add_operator exp_aux2 .)
    OR              reduce using rule 42 (exp_aux2 -> term n_gen_term MINUS n_add_operator exp_aux2 .)
    AND             reduce using rule 42 (exp_aux2 -> term n_gen_term MINUS n_add_operator exp_aux2 .)
    SEMICOLON       reduce using rule 42 (exp_aux2 -> term n_gen_term MINUS n_add_operator exp_aux2 .)
    RPAREN          reduce using rule 42 (exp_aux2 -> term n_gen_term MINUS n_add_operator exp_aux2 .)
    COMA            reduce using rule 42 (exp_aux2 -> term n_gen_term MINUS n_add_operator exp_aux2 .)
    TO              reduce using rule 42 (exp_aux2 -> term n_gen_term MINUS n_add_operator exp_aux2 .)


state 175

    (44) term -> factor n_gen_factor MULTIPLY n_add_operator term .

    PLUS            reduce using rule 44 (term -> factor n_gen_factor MULTIPLY n_add_operator term .)
    MINUS           reduce using rule 44 (term -> factor n_gen_factor MULTIPLY n_add_operator term .)
    GREATERT        reduce using rule 44 (term -> factor n_gen_factor MULTIPLY n_add_operator term .)
    LESST           reduce using rule 44 (term -> factor n_gen_factor MULTIPLY n_add_operator term .)
    NOTEQUAL        reduce using rule 44 (term -> factor n_gen_factor MULTIPLY n_add_operator term .)
    DBEQUALS        reduce using rule 44 (term -> factor n_gen_factor MULTIPLY n_add_operator term .)
    GREATEREQUAL    reduce using rule 44 (term -> factor n_gen_factor MULTIPLY n_add_operator term .)
    LESSEQUAL       reduce using rule 44 (term -> factor n_gen_factor MULTIPLY n_add_operator term .)
    OR              reduce using rule 44 (term -> factor n_gen_factor MULTIPLY n_add_operator term .)
    AND             reduce using rule 44 (term -> factor n_gen_factor MULTIPLY n_add_operator term .)
    SEMICOLON       reduce using rule 44 (term -> factor n_gen_factor MULTIPLY n_add_operator term .)
    RPAREN          reduce using rule 44 (term -> factor n_gen_factor MULTIPLY n_add_operator term .)
    COMA            reduce using rule 44 (term -> factor n_gen_factor MULTIPLY n_add_operator term .)
    TO              reduce using rule 44 (term -> factor n_gen_factor MULTIPLY n_add_operator term .)


state 176

    (45) term -> factor n_gen_factor DIVIDE n_add_operator term .

    PLUS            reduce using rule 45 (term -> factor n_gen_factor DIVIDE n_add_operator term .)
    MINUS           reduce using rule 45 (term -> factor n_gen_factor DIVIDE n_add_operator term .)
    GREATERT        reduce using rule 45 (term -> factor n_gen_factor DIVIDE n_add_operator term .)
    LESST           reduce using rule 45 (term -> factor n_gen_factor DIVIDE n_add_operator term .)
    NOTEQUAL        reduce using rule 45 (term -> factor n_gen_factor DIVIDE n_add_operator term .)
    DBEQUALS        reduce using rule 45 (term -> factor n_gen_factor DIVIDE n_add_operator term .)
    GREATEREQUAL    reduce using rule 45 (term -> factor n_gen_factor DIVIDE n_add_operator term .)
    LESSEQUAL       reduce using rule 45 (term -> factor n_gen_factor DIVIDE n_add_operator term .)
    OR              reduce using rule 45 (term -> factor n_gen_factor DIVIDE n_add_operator term .)
    AND             reduce using rule 45 (term -> factor n_gen_factor DIVIDE n_add_operator term .)
    SEMICOLON       reduce using rule 45 (term -> factor n_gen_factor DIVIDE n_add_operator term .)
    RPAREN          reduce using rule 45 (term -> factor n_gen_factor DIVIDE n_add_operator term .)
    COMA            reduce using rule 45 (term -> factor n_gen_factor DIVIDE n_add_operator term .)
    TO              reduce using rule 45 (term -> factor n_gen_factor DIVIDE n_add_operator term .)


state 177

    (47) factor -> LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom .

    MULTIPLY        reduce using rule 47 (factor -> LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom .)
    DIVIDE          reduce using rule 47 (factor -> LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom .)
    PLUS            reduce using rule 47 (factor -> LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom .)
    MINUS           reduce using rule 47 (factor -> LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom .)
    GREATERT        reduce using rule 47 (factor -> LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom .)
    LESST           reduce using rule 47 (factor -> LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom .)
    NOTEQUAL        reduce using rule 47 (factor -> LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom .)
    DBEQUALS        reduce using rule 47 (factor -> LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom .)
    GREATEREQUAL    reduce using rule 47 (factor -> LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom .)
    LESSEQUAL       reduce using rule 47 (factor -> LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom .)
    OR              reduce using rule 47 (factor -> LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom .)
    AND             reduce using rule 47 (factor -> LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom .)
    SEMICOLON       reduce using rule 47 (factor -> LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom .)
    RPAREN          reduce using rule 47 (factor -> LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom .)
    COMA            reduce using rule 47 (factor -> LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom .)
    TO              reduce using rule 47 (factor -> LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom .)


state 178

    (18) bloque -> LBRACKET estatuto_aux . RBRACKET

    RBRACKET        shift and go to state 184


state 179

    (19) bloque -> LBRACKET RBRACKET .

    SEMICOLON       reduce using rule 19 (bloque -> LBRACKET RBRACKET .)
    ELSE            reduce using rule 19 (bloque -> LBRACKET RBRACKET .)


state 180

    (62) while -> WHILE n_salto_while LPAREN expresion RPAREN n_cond_while . bloque n_ret_while
    (18) bloque -> . LBRACKET estatuto_aux RBRACKET
    (19) bloque -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 160

    bloque                         shift and go to state 185

state 181

    (9) vars_func -> ID n_seen_var_name COLON tipo n_set_var_type COMA . vars_func
    (9) vars_func -> . ID n_seen_var_name COLON tipo n_set_var_type COMA vars_func
    (10) vars_func -> . ID n_seen_var_name COLON tipo n_set_var_type

    ID              shift and go to state 61

    vars_func                      shift and go to state 186

state 182

    (63) condicion -> IF LPAREN expresion RPAREN n_check_exp bloque ELSE . n_else bloque n_fill_end
    (89) n_else -> .

    LBRACKET        reduce using rule 89 (n_else -> .)

    n_else                         shift and go to state 187

state 183

    (64) condicion -> IF LPAREN expresion RPAREN n_check_exp bloque n_fill_end .

    SEMICOLON       reduce using rule 64 (condicion -> IF LPAREN expresion RPAREN n_check_exp bloque n_fill_end .)


state 184

    (18) bloque -> LBRACKET estatuto_aux RBRACKET .

    SEMICOLON       reduce using rule 18 (bloque -> LBRACKET estatuto_aux RBRACKET .)
    ELSE            reduce using rule 18 (bloque -> LBRACKET estatuto_aux RBRACKET .)


state 185

    (62) while -> WHILE n_salto_while LPAREN expresion RPAREN n_cond_while bloque . n_ret_while
    (93) n_ret_while -> .

    SEMICOLON       reduce using rule 93 (n_ret_while -> .)

    n_ret_while                    shift and go to state 188

state 186

    (9) vars_func -> ID n_seen_var_name COLON tipo n_set_var_type COMA vars_func .

    RPAREN          reduce using rule 9 (vars_func -> ID n_seen_var_name COLON tipo n_set_var_type COMA vars_func .)


state 187

    (63) condicion -> IF LPAREN expresion RPAREN n_check_exp bloque ELSE n_else . bloque n_fill_end
    (18) bloque -> . LBRACKET estatuto_aux RBRACKET
    (19) bloque -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 160

    bloque                         shift and go to state 189

state 188

    (62) while -> WHILE n_salto_while LPAREN expresion RPAREN n_cond_while bloque n_ret_while .

    SEMICOLON       reduce using rule 62 (while -> WHILE n_salto_while LPAREN expresion RPAREN n_cond_while bloque n_ret_while .)


state 189

    (63) condicion -> IF LPAREN expresion RPAREN n_check_exp bloque ELSE n_else bloque . n_fill_end
    (88) n_fill_end -> .

    SEMICOLON       reduce using rule 88 (n_fill_end -> .)

    n_fill_end                     shift and go to state 190

state 190

    (63) condicion -> IF LPAREN expresion RPAREN n_check_exp bloque ELSE n_else bloque n_fill_end .

    SEMICOLON       reduce using rule 63 (condicion -> IF LPAREN expresion RPAREN n_check_exp bloque ELSE n_else bloque n_fill_end .)

