Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    TRANSPUESTA
    DETERMINANTE
    INVERSA
    COMMENT
    WRITE

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM ID SEMICOLON vars module main
Rule 2     programa -> PROGRAM ID SEMICOLON module main
Rule 3     programa -> PROGRAM ID SEMICOLON vars main
Rule 4     programa -> PROGRAM ID SEMICOLON main
Rule 5     main -> MAIN n_seen_func_name n_seen_main bloque_module n_end_program
Rule 6     vars -> VAR vars_aux
Rule 7     vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux
Rule 8     vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type DOT
Rule 9     vars_func -> ID n_seen_var_name COLON tipo n_set_var_type n_save_param_type COMA vars_func
Rule 10    vars_func -> ID n_seen_var_name COLON tipo n_set_var_type n_save_param_type
Rule 11    tipo -> INT n_seen_type
Rule 12    tipo -> FLOAT n_seen_type
Rule 13    tipo -> CHAR n_seen_type
Rule 14    bloque_module -> LBRACKET vars estatuto_aux RBRACKET
Rule 15    bloque_module -> LBRACKET vars RBRACKET
Rule 16    bloque_module -> LBRACKET estatuto_aux RBRACKET
Rule 17    bloque_module -> LBRACKET RBRACKET
Rule 18    bloque -> LBRACKET estatuto_aux RBRACKET
Rule 19    bloque -> LBRACKET RBRACKET
Rule 20    estatuto_aux -> estatuto estatuto_aux
Rule 21    estatuto_aux -> estatuto
Rule 22    estatuto -> asignacion SEMICOLON
Rule 23    estatuto -> condicion SEMICOLON
Rule 24    estatuto -> escritura SEMICOLON
Rule 25    estatuto -> lectura SEMICOLON
Rule 26    estatuto -> return SEMICOLON
Rule 27    estatuto -> for SEMICOLON
Rule 28    estatuto -> while SEMICOLON
Rule 29    estatuto -> call_module SEMICOLON
Rule 30    asignacion -> ID n_seen_factor_id EQUAL n_add_operator expresion n_assign
Rule 31    expresion -> exp n_gen_and AND n_add_operator expresion
Rule 32    expresion -> exp n_gen_and
Rule 33    exp -> exp_aux n_gen_or OR n_add_operator exp
Rule 34    exp -> exp_aux n_gen_or
Rule 35    exp_aux -> exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux
Rule 36    exp_aux -> exp_aux2 n_gen_relational LESST n_add_operator exp_aux
Rule 37    exp_aux -> exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux
Rule 38    exp_aux -> exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux
Rule 39    exp_aux -> exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux
Rule 40    exp_aux -> exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux
Rule 41    exp_aux -> exp_aux2 n_gen_relational
Rule 42    exp_aux2 -> term n_gen_term PLUS n_add_operator exp_aux2
Rule 43    exp_aux2 -> term n_gen_term MINUS n_add_operator exp_aux2
Rule 44    exp_aux2 -> term n_gen_term
Rule 45    term -> factor n_gen_factor MULTIPLY n_add_operator term
Rule 46    term -> factor n_gen_factor DIVIDE n_add_operator term
Rule 47    term -> factor n_gen_factor
Rule 48    factor -> LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom
Rule 49    factor -> CTEINT n_seen_factor_int
Rule 50    factor -> CTEF n_seen_factor_float
Rule 51    factor -> CTEC n_seen_factor_char
Rule 52    factor -> ID n_seen_factor_id
Rule 53    module -> MODULE VOID n_seen_type ID n_seen_func_name params n_gen_func_quad bloque_module n_endfunc module
Rule 54    module -> MODULE tipo ID n_seen_func_name params n_gen_func_quad bloque_module n_endfunc module
Rule 55    module -> MODULE VOID n_seen_type ID n_seen_func_name params n_gen_func_quad bloque_module n_endfunc
Rule 56    module -> MODULE tipo ID n_seen_func_name params n_gen_func_quad bloque_module n_endfunc
Rule 57    params -> LPAREN vars_func RPAREN
Rule 58    params -> LPAREN RPAREN
Rule 59    call_module -> ID n_func_exist n_gen_era LPAREN aux_call_module n_verify_num_params RPAREN n_gen_gosub
Rule 60    call_module -> ID n_func_exist n_gen_era LPAREN RPAREN n_gen_gosub
Rule 61    aux_call_module -> expresion n_check_param
Rule 62    aux_call_module -> expresion n_check_param n_param_counter COMA aux_call_module
Rule 63    return -> RETURN n_search_return_func LPAREN expresion RPAREN n_return_quad
Rule 64    for -> FOR ID EQUAL expresion TO expresion DO bloque
Rule 65    while -> WHILE n_salto_while LPAREN expresion RPAREN n_cond_while bloque n_ret_while
Rule 66    condicion -> IF LPAREN expresion RPAREN n_check_exp bloque ELSE n_else bloque n_fill_end
Rule 67    condicion -> IF LPAREN expresion RPAREN n_check_exp bloque n_fill_end
Rule 68    lectura -> READ LPAREN lect_aux RPAREN
Rule 69    lect_aux -> ID n_read
Rule 70    lect_aux -> ID n_read COMA lect_aux
Rule 71    escritura -> PRINT LPAREN escritura_aux RPAREN
Rule 72    escritura_aux -> expresion n_print COMA escritura_aux
Rule 73    escritura_aux -> CTESTRING n_seen_string n_print COMA escritura_aux
Rule 74    escritura_aux -> expresion n_print
Rule 75    escritura_aux -> CTESTRING n_seen_string n_print
Rule 76    n_seen_type -> <empty>
Rule 77    n_seen_var_name -> <empty>
Rule 78    n_set_var_type -> <empty>
Rule 79    n_seen_factor_id -> <empty>
Rule 80    n_seen_factor_int -> <empty>
Rule 81    n_seen_factor_float -> <empty>
Rule 82    n_seen_factor_char -> <empty>
Rule 83    n_seen_string -> <empty>
Rule 84    n_assign -> <empty>
Rule 85    n_add_operator -> <empty>
Rule 86    n_gen_term -> <empty>
Rule 87    n_gen_factor -> <empty>
Rule 88    n_gen_relational -> <empty>
Rule 89    n_gen_or -> <empty>
Rule 90    n_gen_and -> <empty>
Rule 91    n_push_fake_bottom -> <empty>
Rule 92    n_pop_fake_bottom -> <empty>
Rule 93    n_seen_main -> <empty>
Rule 94    n_check_exp -> <empty>
Rule 95    n_fill_end -> <empty>
Rule 96    n_else -> <empty>
Rule 97    n_salto_while -> <empty>
Rule 98    n_cond_while -> <empty>
Rule 99    n_ret_while -> <empty>
Rule 100   n_read -> <empty>
Rule 101   n_print -> <empty>
Rule 102   n_save_param_type -> <empty>
Rule 103   n_gen_func_quad -> <empty>
Rule 104   n_seen_func_name -> <empty>
Rule 105   n_endfunc -> <empty>
Rule 106   n_func_exist -> <empty>
Rule 107   n_gen_era -> <empty>
Rule 108   n_verify_num_params -> <empty>
Rule 109   n_param_counter -> <empty>
Rule 110   n_check_param -> <empty>
Rule 111   n_gen_gosub -> <empty>
Rule 112   n_search_return_func -> <empty>
Rule 113   n_return_quad -> <empty>
Rule 114   n_end_program -> <empty>

Terminals, with rules where they appear

AND                  : 31
CHAR                 : 13
COLON                : 7 8 9 10
COMA                 : 9 62 70 72 73
COMMENT              : 
CTEC                 : 51
CTEF                 : 50
CTEINT               : 49
CTESTRING            : 73 75
DBEQUALS             : 38
DETERMINANTE         : 
DIVIDE               : 46
DO                   : 64
DOT                  : 8
ELSE                 : 66
EQUAL                : 30 64
FLOAT                : 12
FOR                  : 64
GREATEREQUAL         : 39
GREATERT             : 35
ID                   : 1 2 3 4 7 8 9 10 30 52 53 54 55 56 59 60 64 69 70
IF                   : 66 67
INT                  : 11
INVERSA              : 
LBRACKET             : 14 15 16 17 18 19
LESSEQUAL            : 40
LESST                : 36
LPAREN               : 48 57 58 59 60 63 65 66 67 68 71
MAIN                 : 5
MINUS                : 43
MODULE               : 53 54 55 56
MULTIPLY             : 45
NOTEQUAL             : 37
OR                   : 33
PLUS                 : 42
PRINT                : 71
PROGRAM              : 1 2 3 4
RBRACKET             : 14 15 16 17 18 19
READ                 : 68
RETURN               : 63
RPAREN               : 48 57 58 59 60 63 65 66 67 68 71
SEMICOLON            : 1 2 3 4 7 22 23 24 25 26 27 28 29
TO                   : 64
TRANSPUESTA          : 
VAR                  : 6
VOID                 : 53 55
WHILE                : 65
WRITE                : 
error                : 

Nonterminals, with rules where they appear

asignacion           : 22
aux_call_module      : 59 62
bloque               : 64 65 66 66 67
bloque_module        : 5 53 54 55 56
call_module          : 29
condicion            : 23
escritura            : 24
escritura_aux        : 71 72 73
estatuto             : 20 21
estatuto_aux         : 14 16 18 20
exp                  : 31 32 33
exp_aux              : 33 34 35 36 37 38 39 40
exp_aux2             : 35 36 37 38 39 40 41 42 43
expresion            : 30 31 48 61 62 63 64 64 65 66 67 72 74
factor               : 45 46 47
for                  : 27
lect_aux             : 68 70
lectura              : 25
main                 : 1 2 3 4
module               : 1 2 53 54
n_add_operator       : 30 31 33 35 36 37 38 39 40 42 43 45 46
n_assign             : 30
n_check_exp          : 66 67
n_check_param        : 61 62
n_cond_while         : 65
n_else               : 66
n_end_program        : 5
n_endfunc            : 53 54 55 56
n_fill_end           : 66 67
n_func_exist         : 59 60
n_gen_and            : 31 32
n_gen_era            : 59 60
n_gen_factor         : 45 46 47
n_gen_func_quad      : 53 54 55 56
n_gen_gosub          : 59 60
n_gen_or             : 33 34
n_gen_relational     : 35 36 37 38 39 40 41
n_gen_term           : 42 43 44
n_param_counter      : 62
n_pop_fake_bottom    : 48
n_print              : 72 73 74 75
n_push_fake_bottom   : 48
n_read               : 69 70
n_ret_while          : 65
n_return_quad        : 63
n_salto_while        : 65
n_save_param_type    : 9 10
n_search_return_func : 63
n_seen_factor_char   : 51
n_seen_factor_float  : 50
n_seen_factor_id     : 30 52
n_seen_factor_int    : 49
n_seen_func_name     : 5 53 54 55 56
n_seen_main          : 5
n_seen_string        : 73 75
n_seen_type          : 11 12 13 53 55
n_seen_var_name      : 7 8 9 10
n_set_var_type       : 7 8 9 10
n_verify_num_params  : 59
params               : 53 54 55 56
programa             : 0
return               : 26
term                 : 42 43 44 45 46
tipo                 : 7 8 9 10 54 56
vars                 : 1 3 14 15
vars_aux             : 6 7
vars_func            : 9 57
while                : 28

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM ID SEMICOLON vars module main
    (2) programa -> . PROGRAM ID SEMICOLON module main
    (3) programa -> . PROGRAM ID SEMICOLON vars main
    (4) programa -> . PROGRAM ID SEMICOLON main

    PROGRAM         shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAM . ID SEMICOLON vars module main
    (2) programa -> PROGRAM . ID SEMICOLON module main
    (3) programa -> PROGRAM . ID SEMICOLON vars main
    (4) programa -> PROGRAM . ID SEMICOLON main

    ID              shift and go to state 3


state 3

    (1) programa -> PROGRAM ID . SEMICOLON vars module main
    (2) programa -> PROGRAM ID . SEMICOLON module main
    (3) programa -> PROGRAM ID . SEMICOLON vars main
    (4) programa -> PROGRAM ID . SEMICOLON main

    SEMICOLON       shift and go to state 4


state 4

    (1) programa -> PROGRAM ID SEMICOLON . vars module main
    (2) programa -> PROGRAM ID SEMICOLON . module main
    (3) programa -> PROGRAM ID SEMICOLON . vars main
    (4) programa -> PROGRAM ID SEMICOLON . main
    (6) vars -> . VAR vars_aux
    (53) module -> . MODULE VOID n_seen_type ID n_seen_func_name params n_gen_func_quad bloque_module n_endfunc module
    (54) module -> . MODULE tipo ID n_seen_func_name params n_gen_func_quad bloque_module n_endfunc module
    (55) module -> . MODULE VOID n_seen_type ID n_seen_func_name params n_gen_func_quad bloque_module n_endfunc
    (56) module -> . MODULE tipo ID n_seen_func_name params n_gen_func_quad bloque_module n_endfunc
    (5) main -> . MAIN n_seen_func_name n_seen_main bloque_module n_end_program

    VAR             shift and go to state 8
    MODULE          shift and go to state 9
    MAIN            shift and go to state 10

    vars                           shift and go to state 5
    module                         shift and go to state 6
    main                           shift and go to state 7

state 5

    (1) programa -> PROGRAM ID SEMICOLON vars . module main
    (3) programa -> PROGRAM ID SEMICOLON vars . main
    (53) module -> . MODULE VOID n_seen_type ID n_seen_func_name params n_gen_func_quad bloque_module n_endfunc module
    (54) module -> . MODULE tipo ID n_seen_func_name params n_gen_func_quad bloque_module n_endfunc module
    (55) module -> . MODULE VOID n_seen_type ID n_seen_func_name params n_gen_func_quad bloque_module n_endfunc
    (56) module -> . MODULE tipo ID n_seen_func_name params n_gen_func_quad bloque_module n_endfunc
    (5) main -> . MAIN n_seen_func_name n_seen_main bloque_module n_end_program

    MODULE          shift and go to state 9
    MAIN            shift and go to state 10

    module                         shift and go to state 11
    main                           shift and go to state 12

state 6

    (2) programa -> PROGRAM ID SEMICOLON module . main
    (5) main -> . MAIN n_seen_func_name n_seen_main bloque_module n_end_program

    MAIN            shift and go to state 10

    main                           shift and go to state 13

state 7

    (4) programa -> PROGRAM ID SEMICOLON main .

    $end            reduce using rule 4 (programa -> PROGRAM ID SEMICOLON main .)


state 8

    (6) vars -> VAR . vars_aux
    (7) vars_aux -> . ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux
    (8) vars_aux -> . ID n_seen_var_name COLON tipo n_set_var_type DOT

    ID              shift and go to state 15

    vars_aux                       shift and go to state 14

state 9

    (53) module -> MODULE . VOID n_seen_type ID n_seen_func_name params n_gen_func_quad bloque_module n_endfunc module
    (54) module -> MODULE . tipo ID n_seen_func_name params n_gen_func_quad bloque_module n_endfunc module
    (55) module -> MODULE . VOID n_seen_type ID n_seen_func_name params n_gen_func_quad bloque_module n_endfunc
    (56) module -> MODULE . tipo ID n_seen_func_name params n_gen_func_quad bloque_module n_endfunc
    (11) tipo -> . INT n_seen_type
    (12) tipo -> . FLOAT n_seen_type
    (13) tipo -> . CHAR n_seen_type

    VOID            shift and go to state 16
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20

    tipo                           shift and go to state 17

state 10

    (5) main -> MAIN . n_seen_func_name n_seen_main bloque_module n_end_program
    (104) n_seen_func_name -> .

    LBRACKET        reduce using rule 104 (n_seen_func_name -> .)

    n_seen_func_name               shift and go to state 21

state 11

    (1) programa -> PROGRAM ID SEMICOLON vars module . main
    (5) main -> . MAIN n_seen_func_name n_seen_main bloque_module n_end_program

    MAIN            shift and go to state 10

    main                           shift and go to state 22

state 12

    (3) programa -> PROGRAM ID SEMICOLON vars main .

    $end            reduce using rule 3 (programa -> PROGRAM ID SEMICOLON vars main .)


state 13

    (2) programa -> PROGRAM ID SEMICOLON module main .

    $end            reduce using rule 2 (programa -> PROGRAM ID SEMICOLON module main .)


state 14

    (6) vars -> VAR vars_aux .

    MODULE          reduce using rule 6 (vars -> VAR vars_aux .)
    MAIN            reduce using rule 6 (vars -> VAR vars_aux .)
    RBRACKET        reduce using rule 6 (vars -> VAR vars_aux .)
    ID              reduce using rule 6 (vars -> VAR vars_aux .)
    IF              reduce using rule 6 (vars -> VAR vars_aux .)
    PRINT           reduce using rule 6 (vars -> VAR vars_aux .)
    READ            reduce using rule 6 (vars -> VAR vars_aux .)
    RETURN          reduce using rule 6 (vars -> VAR vars_aux .)
    FOR             reduce using rule 6 (vars -> VAR vars_aux .)
    WHILE           reduce using rule 6 (vars -> VAR vars_aux .)


state 15

    (7) vars_aux -> ID . n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux
    (8) vars_aux -> ID . n_seen_var_name COLON tipo n_set_var_type DOT
    (77) n_seen_var_name -> .

    COLON           reduce using rule 77 (n_seen_var_name -> .)

    n_seen_var_name                shift and go to state 23

state 16

    (53) module -> MODULE VOID . n_seen_type ID n_seen_func_name params n_gen_func_quad bloque_module n_endfunc module
    (55) module -> MODULE VOID . n_seen_type ID n_seen_func_name params n_gen_func_quad bloque_module n_endfunc
    (76) n_seen_type -> .

    ID              reduce using rule 76 (n_seen_type -> .)

    n_seen_type                    shift and go to state 24

state 17

    (54) module -> MODULE tipo . ID n_seen_func_name params n_gen_func_quad bloque_module n_endfunc module
    (56) module -> MODULE tipo . ID n_seen_func_name params n_gen_func_quad bloque_module n_endfunc

    ID              shift and go to state 25


state 18

    (11) tipo -> INT . n_seen_type
    (76) n_seen_type -> .

    ID              reduce using rule 76 (n_seen_type -> .)
    SEMICOLON       reduce using rule 76 (n_seen_type -> .)
    DOT             reduce using rule 76 (n_seen_type -> .)
    COMA            reduce using rule 76 (n_seen_type -> .)
    RPAREN          reduce using rule 76 (n_seen_type -> .)

    n_seen_type                    shift and go to state 26

state 19

    (12) tipo -> FLOAT . n_seen_type
    (76) n_seen_type -> .

    ID              reduce using rule 76 (n_seen_type -> .)
    SEMICOLON       reduce using rule 76 (n_seen_type -> .)
    DOT             reduce using rule 76 (n_seen_type -> .)
    COMA            reduce using rule 76 (n_seen_type -> .)
    RPAREN          reduce using rule 76 (n_seen_type -> .)

    n_seen_type                    shift and go to state 27

state 20

    (13) tipo -> CHAR . n_seen_type
    (76) n_seen_type -> .

    ID              reduce using rule 76 (n_seen_type -> .)
    SEMICOLON       reduce using rule 76 (n_seen_type -> .)
    DOT             reduce using rule 76 (n_seen_type -> .)
    COMA            reduce using rule 76 (n_seen_type -> .)
    RPAREN          reduce using rule 76 (n_seen_type -> .)

    n_seen_type                    shift and go to state 28

state 21

    (5) main -> MAIN n_seen_func_name . n_seen_main bloque_module n_end_program
    (93) n_seen_main -> .

    LBRACKET        reduce using rule 93 (n_seen_main -> .)

    n_seen_main                    shift and go to state 29

state 22

    (1) programa -> PROGRAM ID SEMICOLON vars module main .

    $end            reduce using rule 1 (programa -> PROGRAM ID SEMICOLON vars module main .)


state 23

    (7) vars_aux -> ID n_seen_var_name . COLON tipo n_set_var_type SEMICOLON vars_aux
    (8) vars_aux -> ID n_seen_var_name . COLON tipo n_set_var_type DOT

    COLON           shift and go to state 30


state 24

    (53) module -> MODULE VOID n_seen_type . ID n_seen_func_name params n_gen_func_quad bloque_module n_endfunc module
    (55) module -> MODULE VOID n_seen_type . ID n_seen_func_name params n_gen_func_quad bloque_module n_endfunc

    ID              shift and go to state 31


state 25

    (54) module -> MODULE tipo ID . n_seen_func_name params n_gen_func_quad bloque_module n_endfunc module
    (56) module -> MODULE tipo ID . n_seen_func_name params n_gen_func_quad bloque_module n_endfunc
    (104) n_seen_func_name -> .

    LPAREN          reduce using rule 104 (n_seen_func_name -> .)

    n_seen_func_name               shift and go to state 32

state 26

    (11) tipo -> INT n_seen_type .

    ID              reduce using rule 11 (tipo -> INT n_seen_type .)
    SEMICOLON       reduce using rule 11 (tipo -> INT n_seen_type .)
    DOT             reduce using rule 11 (tipo -> INT n_seen_type .)
    COMA            reduce using rule 11 (tipo -> INT n_seen_type .)
    RPAREN          reduce using rule 11 (tipo -> INT n_seen_type .)


state 27

    (12) tipo -> FLOAT n_seen_type .

    ID              reduce using rule 12 (tipo -> FLOAT n_seen_type .)
    SEMICOLON       reduce using rule 12 (tipo -> FLOAT n_seen_type .)
    DOT             reduce using rule 12 (tipo -> FLOAT n_seen_type .)
    COMA            reduce using rule 12 (tipo -> FLOAT n_seen_type .)
    RPAREN          reduce using rule 12 (tipo -> FLOAT n_seen_type .)


state 28

    (13) tipo -> CHAR n_seen_type .

    ID              reduce using rule 13 (tipo -> CHAR n_seen_type .)
    SEMICOLON       reduce using rule 13 (tipo -> CHAR n_seen_type .)
    DOT             reduce using rule 13 (tipo -> CHAR n_seen_type .)
    COMA            reduce using rule 13 (tipo -> CHAR n_seen_type .)
    RPAREN          reduce using rule 13 (tipo -> CHAR n_seen_type .)


state 29

    (5) main -> MAIN n_seen_func_name n_seen_main . bloque_module n_end_program
    (14) bloque_module -> . LBRACKET vars estatuto_aux RBRACKET
    (15) bloque_module -> . LBRACKET vars RBRACKET
    (16) bloque_module -> . LBRACKET estatuto_aux RBRACKET
    (17) bloque_module -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 34

    bloque_module                  shift and go to state 33

state 30

    (7) vars_aux -> ID n_seen_var_name COLON . tipo n_set_var_type SEMICOLON vars_aux
    (8) vars_aux -> ID n_seen_var_name COLON . tipo n_set_var_type DOT
    (11) tipo -> . INT n_seen_type
    (12) tipo -> . FLOAT n_seen_type
    (13) tipo -> . CHAR n_seen_type

    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20

    tipo                           shift and go to state 35

state 31

    (53) module -> MODULE VOID n_seen_type ID . n_seen_func_name params n_gen_func_quad bloque_module n_endfunc module
    (55) module -> MODULE VOID n_seen_type ID . n_seen_func_name params n_gen_func_quad bloque_module n_endfunc
    (104) n_seen_func_name -> .

    LPAREN          reduce using rule 104 (n_seen_func_name -> .)

    n_seen_func_name               shift and go to state 36

state 32

    (54) module -> MODULE tipo ID n_seen_func_name . params n_gen_func_quad bloque_module n_endfunc module
    (56) module -> MODULE tipo ID n_seen_func_name . params n_gen_func_quad bloque_module n_endfunc
    (57) params -> . LPAREN vars_func RPAREN
    (58) params -> . LPAREN RPAREN

    LPAREN          shift and go to state 38

    params                         shift and go to state 37

state 33

    (5) main -> MAIN n_seen_func_name n_seen_main bloque_module . n_end_program
    (114) n_end_program -> .

    $end            reduce using rule 114 (n_end_program -> .)

    n_end_program                  shift and go to state 39

state 34

    (14) bloque_module -> LBRACKET . vars estatuto_aux RBRACKET
    (15) bloque_module -> LBRACKET . vars RBRACKET
    (16) bloque_module -> LBRACKET . estatuto_aux RBRACKET
    (17) bloque_module -> LBRACKET . RBRACKET
    (6) vars -> . VAR vars_aux
    (20) estatuto_aux -> . estatuto estatuto_aux
    (21) estatuto_aux -> . estatuto
    (22) estatuto -> . asignacion SEMICOLON
    (23) estatuto -> . condicion SEMICOLON
    (24) estatuto -> . escritura SEMICOLON
    (25) estatuto -> . lectura SEMICOLON
    (26) estatuto -> . return SEMICOLON
    (27) estatuto -> . for SEMICOLON
    (28) estatuto -> . while SEMICOLON
    (29) estatuto -> . call_module SEMICOLON
    (30) asignacion -> . ID n_seen_factor_id EQUAL n_add_operator expresion n_assign
    (66) condicion -> . IF LPAREN expresion RPAREN n_check_exp bloque ELSE n_else bloque n_fill_end
    (67) condicion -> . IF LPAREN expresion RPAREN n_check_exp bloque n_fill_end
    (71) escritura -> . PRINT LPAREN escritura_aux RPAREN
    (68) lectura -> . READ LPAREN lect_aux RPAREN
    (63) return -> . RETURN n_search_return_func LPAREN expresion RPAREN n_return_quad
    (64) for -> . FOR ID EQUAL expresion TO expresion DO bloque
    (65) while -> . WHILE n_salto_while LPAREN expresion RPAREN n_cond_while bloque n_ret_while
    (59) call_module -> . ID n_func_exist n_gen_era LPAREN aux_call_module n_verify_num_params RPAREN n_gen_gosub
    (60) call_module -> . ID n_func_exist n_gen_era LPAREN RPAREN n_gen_gosub

    RBRACKET        shift and go to state 42
    VAR             shift and go to state 8
    ID              shift and go to state 52
    IF              shift and go to state 53
    PRINT           shift and go to state 54
    READ            shift and go to state 55
    RETURN          shift and go to state 56
    FOR             shift and go to state 57
    WHILE           shift and go to state 58

    vars                           shift and go to state 40
    estatuto_aux                   shift and go to state 41
    estatuto                       shift and go to state 43
    asignacion                     shift and go to state 44
    condicion                      shift and go to state 45
    escritura                      shift and go to state 46
    lectura                        shift and go to state 47
    return                         shift and go to state 48
    for                            shift and go to state 49
    while                          shift and go to state 50
    call_module                    shift and go to state 51

state 35

    (7) vars_aux -> ID n_seen_var_name COLON tipo . n_set_var_type SEMICOLON vars_aux
    (8) vars_aux -> ID n_seen_var_name COLON tipo . n_set_var_type DOT
    (78) n_set_var_type -> .

    SEMICOLON       reduce using rule 78 (n_set_var_type -> .)
    DOT             reduce using rule 78 (n_set_var_type -> .)

    n_set_var_type                 shift and go to state 59

state 36

    (53) module -> MODULE VOID n_seen_type ID n_seen_func_name . params n_gen_func_quad bloque_module n_endfunc module
    (55) module -> MODULE VOID n_seen_type ID n_seen_func_name . params n_gen_func_quad bloque_module n_endfunc
    (57) params -> . LPAREN vars_func RPAREN
    (58) params -> . LPAREN RPAREN

    LPAREN          shift and go to state 38

    params                         shift and go to state 60

state 37

    (54) module -> MODULE tipo ID n_seen_func_name params . n_gen_func_quad bloque_module n_endfunc module
    (56) module -> MODULE tipo ID n_seen_func_name params . n_gen_func_quad bloque_module n_endfunc
    (103) n_gen_func_quad -> .

    LBRACKET        reduce using rule 103 (n_gen_func_quad -> .)

    n_gen_func_quad                shift and go to state 61

state 38

    (57) params -> LPAREN . vars_func RPAREN
    (58) params -> LPAREN . RPAREN
    (9) vars_func -> . ID n_seen_var_name COLON tipo n_set_var_type n_save_param_type COMA vars_func
    (10) vars_func -> . ID n_seen_var_name COLON tipo n_set_var_type n_save_param_type

    RPAREN          shift and go to state 63
    ID              shift and go to state 64

    vars_func                      shift and go to state 62

state 39

    (5) main -> MAIN n_seen_func_name n_seen_main bloque_module n_end_program .

    $end            reduce using rule 5 (main -> MAIN n_seen_func_name n_seen_main bloque_module n_end_program .)


state 40

    (14) bloque_module -> LBRACKET vars . estatuto_aux RBRACKET
    (15) bloque_module -> LBRACKET vars . RBRACKET
    (20) estatuto_aux -> . estatuto estatuto_aux
    (21) estatuto_aux -> . estatuto
    (22) estatuto -> . asignacion SEMICOLON
    (23) estatuto -> . condicion SEMICOLON
    (24) estatuto -> . escritura SEMICOLON
    (25) estatuto -> . lectura SEMICOLON
    (26) estatuto -> . return SEMICOLON
    (27) estatuto -> . for SEMICOLON
    (28) estatuto -> . while SEMICOLON
    (29) estatuto -> . call_module SEMICOLON
    (30) asignacion -> . ID n_seen_factor_id EQUAL n_add_operator expresion n_assign
    (66) condicion -> . IF LPAREN expresion RPAREN n_check_exp bloque ELSE n_else bloque n_fill_end
    (67) condicion -> . IF LPAREN expresion RPAREN n_check_exp bloque n_fill_end
    (71) escritura -> . PRINT LPAREN escritura_aux RPAREN
    (68) lectura -> . READ LPAREN lect_aux RPAREN
    (63) return -> . RETURN n_search_return_func LPAREN expresion RPAREN n_return_quad
    (64) for -> . FOR ID EQUAL expresion TO expresion DO bloque
    (65) while -> . WHILE n_salto_while LPAREN expresion RPAREN n_cond_while bloque n_ret_while
    (59) call_module -> . ID n_func_exist n_gen_era LPAREN aux_call_module n_verify_num_params RPAREN n_gen_gosub
    (60) call_module -> . ID n_func_exist n_gen_era LPAREN RPAREN n_gen_gosub

    RBRACKET        shift and go to state 66
    ID              shift and go to state 52
    IF              shift and go to state 53
    PRINT           shift and go to state 54
    READ            shift and go to state 55
    RETURN          shift and go to state 56
    FOR             shift and go to state 57
    WHILE           shift and go to state 58

    estatuto_aux                   shift and go to state 65
    estatuto                       shift and go to state 43
    asignacion                     shift and go to state 44
    condicion                      shift and go to state 45
    escritura                      shift and go to state 46
    lectura                        shift and go to state 47
    return                         shift and go to state 48
    for                            shift and go to state 49
    while                          shift and go to state 50
    call_module                    shift and go to state 51

state 41

    (16) bloque_module -> LBRACKET estatuto_aux . RBRACKET

    RBRACKET        shift and go to state 67


state 42

    (17) bloque_module -> LBRACKET RBRACKET .

    $end            reduce using rule 17 (bloque_module -> LBRACKET RBRACKET .)
    MODULE          reduce using rule 17 (bloque_module -> LBRACKET RBRACKET .)
    MAIN            reduce using rule 17 (bloque_module -> LBRACKET RBRACKET .)


state 43

    (20) estatuto_aux -> estatuto . estatuto_aux
    (21) estatuto_aux -> estatuto .
    (20) estatuto_aux -> . estatuto estatuto_aux
    (21) estatuto_aux -> . estatuto
    (22) estatuto -> . asignacion SEMICOLON
    (23) estatuto -> . condicion SEMICOLON
    (24) estatuto -> . escritura SEMICOLON
    (25) estatuto -> . lectura SEMICOLON
    (26) estatuto -> . return SEMICOLON
    (27) estatuto -> . for SEMICOLON
    (28) estatuto -> . while SEMICOLON
    (29) estatuto -> . call_module SEMICOLON
    (30) asignacion -> . ID n_seen_factor_id EQUAL n_add_operator expresion n_assign
    (66) condicion -> . IF LPAREN expresion RPAREN n_check_exp bloque ELSE n_else bloque n_fill_end
    (67) condicion -> . IF LPAREN expresion RPAREN n_check_exp bloque n_fill_end
    (71) escritura -> . PRINT LPAREN escritura_aux RPAREN
    (68) lectura -> . READ LPAREN lect_aux RPAREN
    (63) return -> . RETURN n_search_return_func LPAREN expresion RPAREN n_return_quad
    (64) for -> . FOR ID EQUAL expresion TO expresion DO bloque
    (65) while -> . WHILE n_salto_while LPAREN expresion RPAREN n_cond_while bloque n_ret_while
    (59) call_module -> . ID n_func_exist n_gen_era LPAREN aux_call_module n_verify_num_params RPAREN n_gen_gosub
    (60) call_module -> . ID n_func_exist n_gen_era LPAREN RPAREN n_gen_gosub

    RBRACKET        reduce using rule 21 (estatuto_aux -> estatuto .)
    ID              shift and go to state 52
    IF              shift and go to state 53
    PRINT           shift and go to state 54
    READ            shift and go to state 55
    RETURN          shift and go to state 56
    FOR             shift and go to state 57
    WHILE           shift and go to state 58

    estatuto                       shift and go to state 43
    estatuto_aux                   shift and go to state 68
    asignacion                     shift and go to state 44
    condicion                      shift and go to state 45
    escritura                      shift and go to state 46
    lectura                        shift and go to state 47
    return                         shift and go to state 48
    for                            shift and go to state 49
    while                          shift and go to state 50
    call_module                    shift and go to state 51

state 44

    (22) estatuto -> asignacion . SEMICOLON

    SEMICOLON       shift and go to state 69


state 45

    (23) estatuto -> condicion . SEMICOLON

    SEMICOLON       shift and go to state 70


state 46

    (24) estatuto -> escritura . SEMICOLON

    SEMICOLON       shift and go to state 71


state 47

    (25) estatuto -> lectura . SEMICOLON

    SEMICOLON       shift and go to state 72


state 48

    (26) estatuto -> return . SEMICOLON

    SEMICOLON       shift and go to state 73


state 49

    (27) estatuto -> for . SEMICOLON

    SEMICOLON       shift and go to state 74


state 50

    (28) estatuto -> while . SEMICOLON

    SEMICOLON       shift and go to state 75


state 51

    (29) estatuto -> call_module . SEMICOLON

    SEMICOLON       shift and go to state 76


state 52

    (30) asignacion -> ID . n_seen_factor_id EQUAL n_add_operator expresion n_assign
    (59) call_module -> ID . n_func_exist n_gen_era LPAREN aux_call_module n_verify_num_params RPAREN n_gen_gosub
    (60) call_module -> ID . n_func_exist n_gen_era LPAREN RPAREN n_gen_gosub
    (79) n_seen_factor_id -> .
    (106) n_func_exist -> .

    EQUAL           reduce using rule 79 (n_seen_factor_id -> .)
    LPAREN          reduce using rule 106 (n_func_exist -> .)

    n_seen_factor_id               shift and go to state 77
    n_func_exist                   shift and go to state 78

state 53

    (66) condicion -> IF . LPAREN expresion RPAREN n_check_exp bloque ELSE n_else bloque n_fill_end
    (67) condicion -> IF . LPAREN expresion RPAREN n_check_exp bloque n_fill_end

    LPAREN          shift and go to state 79


state 54

    (71) escritura -> PRINT . LPAREN escritura_aux RPAREN

    LPAREN          shift and go to state 80


state 55

    (68) lectura -> READ . LPAREN lect_aux RPAREN

    LPAREN          shift and go to state 81


state 56

    (63) return -> RETURN . n_search_return_func LPAREN expresion RPAREN n_return_quad
    (112) n_search_return_func -> .

    LPAREN          reduce using rule 112 (n_search_return_func -> .)

    n_search_return_func           shift and go to state 82

state 57

    (64) for -> FOR . ID EQUAL expresion TO expresion DO bloque

    ID              shift and go to state 83


state 58

    (65) while -> WHILE . n_salto_while LPAREN expresion RPAREN n_cond_while bloque n_ret_while
    (97) n_salto_while -> .

    LPAREN          reduce using rule 97 (n_salto_while -> .)

    n_salto_while                  shift and go to state 84

state 59

    (7) vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type . SEMICOLON vars_aux
    (8) vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type . DOT

    SEMICOLON       shift and go to state 85
    DOT             shift and go to state 86


state 60

    (53) module -> MODULE VOID n_seen_type ID n_seen_func_name params . n_gen_func_quad bloque_module n_endfunc module
    (55) module -> MODULE VOID n_seen_type ID n_seen_func_name params . n_gen_func_quad bloque_module n_endfunc
    (103) n_gen_func_quad -> .

    LBRACKET        reduce using rule 103 (n_gen_func_quad -> .)

    n_gen_func_quad                shift and go to state 87

state 61

    (54) module -> MODULE tipo ID n_seen_func_name params n_gen_func_quad . bloque_module n_endfunc module
    (56) module -> MODULE tipo ID n_seen_func_name params n_gen_func_quad . bloque_module n_endfunc
    (14) bloque_module -> . LBRACKET vars estatuto_aux RBRACKET
    (15) bloque_module -> . LBRACKET vars RBRACKET
    (16) bloque_module -> . LBRACKET estatuto_aux RBRACKET
    (17) bloque_module -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 34

    bloque_module                  shift and go to state 88

state 62

    (57) params -> LPAREN vars_func . RPAREN

    RPAREN          shift and go to state 89


state 63

    (58) params -> LPAREN RPAREN .

    LBRACKET        reduce using rule 58 (params -> LPAREN RPAREN .)


state 64

    (9) vars_func -> ID . n_seen_var_name COLON tipo n_set_var_type n_save_param_type COMA vars_func
    (10) vars_func -> ID . n_seen_var_name COLON tipo n_set_var_type n_save_param_type
    (77) n_seen_var_name -> .

    COLON           reduce using rule 77 (n_seen_var_name -> .)

    n_seen_var_name                shift and go to state 90

state 65

    (14) bloque_module -> LBRACKET vars estatuto_aux . RBRACKET

    RBRACKET        shift and go to state 91


state 66

    (15) bloque_module -> LBRACKET vars RBRACKET .

    $end            reduce using rule 15 (bloque_module -> LBRACKET vars RBRACKET .)
    MODULE          reduce using rule 15 (bloque_module -> LBRACKET vars RBRACKET .)
    MAIN            reduce using rule 15 (bloque_module -> LBRACKET vars RBRACKET .)


state 67

    (16) bloque_module -> LBRACKET estatuto_aux RBRACKET .

    $end            reduce using rule 16 (bloque_module -> LBRACKET estatuto_aux RBRACKET .)
    MODULE          reduce using rule 16 (bloque_module -> LBRACKET estatuto_aux RBRACKET .)
    MAIN            reduce using rule 16 (bloque_module -> LBRACKET estatuto_aux RBRACKET .)


state 68

    (20) estatuto_aux -> estatuto estatuto_aux .

    RBRACKET        reduce using rule 20 (estatuto_aux -> estatuto estatuto_aux .)


state 69

    (22) estatuto -> asignacion SEMICOLON .

    ID              reduce using rule 22 (estatuto -> asignacion SEMICOLON .)
    IF              reduce using rule 22 (estatuto -> asignacion SEMICOLON .)
    PRINT           reduce using rule 22 (estatuto -> asignacion SEMICOLON .)
    READ            reduce using rule 22 (estatuto -> asignacion SEMICOLON .)
    RETURN          reduce using rule 22 (estatuto -> asignacion SEMICOLON .)
    FOR             reduce using rule 22 (estatuto -> asignacion SEMICOLON .)
    WHILE           reduce using rule 22 (estatuto -> asignacion SEMICOLON .)
    RBRACKET        reduce using rule 22 (estatuto -> asignacion SEMICOLON .)


state 70

    (23) estatuto -> condicion SEMICOLON .

    ID              reduce using rule 23 (estatuto -> condicion SEMICOLON .)
    IF              reduce using rule 23 (estatuto -> condicion SEMICOLON .)
    PRINT           reduce using rule 23 (estatuto -> condicion SEMICOLON .)
    READ            reduce using rule 23 (estatuto -> condicion SEMICOLON .)
    RETURN          reduce using rule 23 (estatuto -> condicion SEMICOLON .)
    FOR             reduce using rule 23 (estatuto -> condicion SEMICOLON .)
    WHILE           reduce using rule 23 (estatuto -> condicion SEMICOLON .)
    RBRACKET        reduce using rule 23 (estatuto -> condicion SEMICOLON .)


state 71

    (24) estatuto -> escritura SEMICOLON .

    ID              reduce using rule 24 (estatuto -> escritura SEMICOLON .)
    IF              reduce using rule 24 (estatuto -> escritura SEMICOLON .)
    PRINT           reduce using rule 24 (estatuto -> escritura SEMICOLON .)
    READ            reduce using rule 24 (estatuto -> escritura SEMICOLON .)
    RETURN          reduce using rule 24 (estatuto -> escritura SEMICOLON .)
    FOR             reduce using rule 24 (estatuto -> escritura SEMICOLON .)
    WHILE           reduce using rule 24 (estatuto -> escritura SEMICOLON .)
    RBRACKET        reduce using rule 24 (estatuto -> escritura SEMICOLON .)


state 72

    (25) estatuto -> lectura SEMICOLON .

    ID              reduce using rule 25 (estatuto -> lectura SEMICOLON .)
    IF              reduce using rule 25 (estatuto -> lectura SEMICOLON .)
    PRINT           reduce using rule 25 (estatuto -> lectura SEMICOLON .)
    READ            reduce using rule 25 (estatuto -> lectura SEMICOLON .)
    RETURN          reduce using rule 25 (estatuto -> lectura SEMICOLON .)
    FOR             reduce using rule 25 (estatuto -> lectura SEMICOLON .)
    WHILE           reduce using rule 25 (estatuto -> lectura SEMICOLON .)
    RBRACKET        reduce using rule 25 (estatuto -> lectura SEMICOLON .)


state 73

    (26) estatuto -> return SEMICOLON .

    ID              reduce using rule 26 (estatuto -> return SEMICOLON .)
    IF              reduce using rule 26 (estatuto -> return SEMICOLON .)
    PRINT           reduce using rule 26 (estatuto -> return SEMICOLON .)
    READ            reduce using rule 26 (estatuto -> return SEMICOLON .)
    RETURN          reduce using rule 26 (estatuto -> return SEMICOLON .)
    FOR             reduce using rule 26 (estatuto -> return SEMICOLON .)
    WHILE           reduce using rule 26 (estatuto -> return SEMICOLON .)
    RBRACKET        reduce using rule 26 (estatuto -> return SEMICOLON .)


state 74

    (27) estatuto -> for SEMICOLON .

    ID              reduce using rule 27 (estatuto -> for SEMICOLON .)
    IF              reduce using rule 27 (estatuto -> for SEMICOLON .)
    PRINT           reduce using rule 27 (estatuto -> for SEMICOLON .)
    READ            reduce using rule 27 (estatuto -> for SEMICOLON .)
    RETURN          reduce using rule 27 (estatuto -> for SEMICOLON .)
    FOR             reduce using rule 27 (estatuto -> for SEMICOLON .)
    WHILE           reduce using rule 27 (estatuto -> for SEMICOLON .)
    RBRACKET        reduce using rule 27 (estatuto -> for SEMICOLON .)


state 75

    (28) estatuto -> while SEMICOLON .

    ID              reduce using rule 28 (estatuto -> while SEMICOLON .)
    IF              reduce using rule 28 (estatuto -> while SEMICOLON .)
    PRINT           reduce using rule 28 (estatuto -> while SEMICOLON .)
    READ            reduce using rule 28 (estatuto -> while SEMICOLON .)
    RETURN          reduce using rule 28 (estatuto -> while SEMICOLON .)
    FOR             reduce using rule 28 (estatuto -> while SEMICOLON .)
    WHILE           reduce using rule 28 (estatuto -> while SEMICOLON .)
    RBRACKET        reduce using rule 28 (estatuto -> while SEMICOLON .)


state 76

    (29) estatuto -> call_module SEMICOLON .

    ID              reduce using rule 29 (estatuto -> call_module SEMICOLON .)
    IF              reduce using rule 29 (estatuto -> call_module SEMICOLON .)
    PRINT           reduce using rule 29 (estatuto -> call_module SEMICOLON .)
    READ            reduce using rule 29 (estatuto -> call_module SEMICOLON .)
    RETURN          reduce using rule 29 (estatuto -> call_module SEMICOLON .)
    FOR             reduce using rule 29 (estatuto -> call_module SEMICOLON .)
    WHILE           reduce using rule 29 (estatuto -> call_module SEMICOLON .)
    RBRACKET        reduce using rule 29 (estatuto -> call_module SEMICOLON .)


state 77

    (30) asignacion -> ID n_seen_factor_id . EQUAL n_add_operator expresion n_assign

    EQUAL           shift and go to state 92


state 78

    (59) call_module -> ID n_func_exist . n_gen_era LPAREN aux_call_module n_verify_num_params RPAREN n_gen_gosub
    (60) call_module -> ID n_func_exist . n_gen_era LPAREN RPAREN n_gen_gosub
    (107) n_gen_era -> .

    LPAREN          reduce using rule 107 (n_gen_era -> .)

    n_gen_era                      shift and go to state 93

state 79

    (66) condicion -> IF LPAREN . expresion RPAREN n_check_exp bloque ELSE n_else bloque n_fill_end
    (67) condicion -> IF LPAREN . expresion RPAREN n_check_exp bloque n_fill_end
    (31) expresion -> . exp n_gen_and AND n_add_operator expresion
    (32) expresion -> . exp n_gen_and
    (33) exp -> . exp_aux n_gen_or OR n_add_operator exp
    (34) exp -> . exp_aux n_gen_or
    (35) exp_aux -> . exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux
    (36) exp_aux -> . exp_aux2 n_gen_relational LESST n_add_operator exp_aux
    (37) exp_aux -> . exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux
    (38) exp_aux -> . exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux
    (39) exp_aux -> . exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux
    (40) exp_aux -> . exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux
    (41) exp_aux -> . exp_aux2 n_gen_relational
    (42) exp_aux2 -> . term n_gen_term PLUS n_add_operator exp_aux2
    (43) exp_aux2 -> . term n_gen_term MINUS n_add_operator exp_aux2
    (44) exp_aux2 -> . term n_gen_term
    (45) term -> . factor n_gen_factor MULTIPLY n_add_operator term
    (46) term -> . factor n_gen_factor DIVIDE n_add_operator term
    (47) term -> . factor n_gen_factor
    (48) factor -> . LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom
    (49) factor -> . CTEINT n_seen_factor_int
    (50) factor -> . CTEF n_seen_factor_float
    (51) factor -> . CTEC n_seen_factor_char
    (52) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 94
    CTEINT          shift and go to state 101
    CTEF            shift and go to state 102
    CTEC            shift and go to state 103
    ID              shift and go to state 104

    expresion                      shift and go to state 95
    exp                            shift and go to state 96
    exp_aux                        shift and go to state 97
    exp_aux2                       shift and go to state 98
    term                           shift and go to state 99
    factor                         shift and go to state 100

state 80

    (71) escritura -> PRINT LPAREN . escritura_aux RPAREN
    (72) escritura_aux -> . expresion n_print COMA escritura_aux
    (73) escritura_aux -> . CTESTRING n_seen_string n_print COMA escritura_aux
    (74) escritura_aux -> . expresion n_print
    (75) escritura_aux -> . CTESTRING n_seen_string n_print
    (31) expresion -> . exp n_gen_and AND n_add_operator expresion
    (32) expresion -> . exp n_gen_and
    (33) exp -> . exp_aux n_gen_or OR n_add_operator exp
    (34) exp -> . exp_aux n_gen_or
    (35) exp_aux -> . exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux
    (36) exp_aux -> . exp_aux2 n_gen_relational LESST n_add_operator exp_aux
    (37) exp_aux -> . exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux
    (38) exp_aux -> . exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux
    (39) exp_aux -> . exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux
    (40) exp_aux -> . exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux
    (41) exp_aux -> . exp_aux2 n_gen_relational
    (42) exp_aux2 -> . term n_gen_term PLUS n_add_operator exp_aux2
    (43) exp_aux2 -> . term n_gen_term MINUS n_add_operator exp_aux2
    (44) exp_aux2 -> . term n_gen_term
    (45) term -> . factor n_gen_factor MULTIPLY n_add_operator term
    (46) term -> . factor n_gen_factor DIVIDE n_add_operator term
    (47) term -> . factor n_gen_factor
    (48) factor -> . LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom
    (49) factor -> . CTEINT n_seen_factor_int
    (50) factor -> . CTEF n_seen_factor_float
    (51) factor -> . CTEC n_seen_factor_char
    (52) factor -> . ID n_seen_factor_id

    CTESTRING       shift and go to state 107
    LPAREN          shift and go to state 94
    CTEINT          shift and go to state 101
    CTEF            shift and go to state 102
    CTEC            shift and go to state 103
    ID              shift and go to state 104

    escritura_aux                  shift and go to state 105
    expresion                      shift and go to state 106
    exp                            shift and go to state 96
    exp_aux                        shift and go to state 97
    exp_aux2                       shift and go to state 98
    term                           shift and go to state 99
    factor                         shift and go to state 100

state 81

    (68) lectura -> READ LPAREN . lect_aux RPAREN
    (69) lect_aux -> . ID n_read
    (70) lect_aux -> . ID n_read COMA lect_aux

    ID              shift and go to state 109

    lect_aux                       shift and go to state 108

state 82

    (63) return -> RETURN n_search_return_func . LPAREN expresion RPAREN n_return_quad

    LPAREN          shift and go to state 110


state 83

    (64) for -> FOR ID . EQUAL expresion TO expresion DO bloque

    EQUAL           shift and go to state 111


state 84

    (65) while -> WHILE n_salto_while . LPAREN expresion RPAREN n_cond_while bloque n_ret_while

    LPAREN          shift and go to state 112


state 85

    (7) vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON . vars_aux
    (7) vars_aux -> . ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux
    (8) vars_aux -> . ID n_seen_var_name COLON tipo n_set_var_type DOT

    ID              shift and go to state 15

    vars_aux                       shift and go to state 113

state 86

    (8) vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type DOT .

    MODULE          reduce using rule 8 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type DOT .)
    MAIN            reduce using rule 8 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type DOT .)
    RBRACKET        reduce using rule 8 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type DOT .)
    ID              reduce using rule 8 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type DOT .)
    IF              reduce using rule 8 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type DOT .)
    PRINT           reduce using rule 8 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type DOT .)
    READ            reduce using rule 8 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type DOT .)
    RETURN          reduce using rule 8 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type DOT .)
    FOR             reduce using rule 8 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type DOT .)
    WHILE           reduce using rule 8 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type DOT .)


state 87

    (53) module -> MODULE VOID n_seen_type ID n_seen_func_name params n_gen_func_quad . bloque_module n_endfunc module
    (55) module -> MODULE VOID n_seen_type ID n_seen_func_name params n_gen_func_quad . bloque_module n_endfunc
    (14) bloque_module -> . LBRACKET vars estatuto_aux RBRACKET
    (15) bloque_module -> . LBRACKET vars RBRACKET
    (16) bloque_module -> . LBRACKET estatuto_aux RBRACKET
    (17) bloque_module -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 34

    bloque_module                  shift and go to state 114

state 88

    (54) module -> MODULE tipo ID n_seen_func_name params n_gen_func_quad bloque_module . n_endfunc module
    (56) module -> MODULE tipo ID n_seen_func_name params n_gen_func_quad bloque_module . n_endfunc
    (105) n_endfunc -> .

    MODULE          reduce using rule 105 (n_endfunc -> .)
    MAIN            reduce using rule 105 (n_endfunc -> .)

    n_endfunc                      shift and go to state 115

state 89

    (57) params -> LPAREN vars_func RPAREN .

    LBRACKET        reduce using rule 57 (params -> LPAREN vars_func RPAREN .)


state 90

    (9) vars_func -> ID n_seen_var_name . COLON tipo n_set_var_type n_save_param_type COMA vars_func
    (10) vars_func -> ID n_seen_var_name . COLON tipo n_set_var_type n_save_param_type

    COLON           shift and go to state 116


state 91

    (14) bloque_module -> LBRACKET vars estatuto_aux RBRACKET .

    $end            reduce using rule 14 (bloque_module -> LBRACKET vars estatuto_aux RBRACKET .)
    MODULE          reduce using rule 14 (bloque_module -> LBRACKET vars estatuto_aux RBRACKET .)
    MAIN            reduce using rule 14 (bloque_module -> LBRACKET vars estatuto_aux RBRACKET .)


state 92

    (30) asignacion -> ID n_seen_factor_id EQUAL . n_add_operator expresion n_assign
    (85) n_add_operator -> .

    LPAREN          reduce using rule 85 (n_add_operator -> .)
    CTEINT          reduce using rule 85 (n_add_operator -> .)
    CTEF            reduce using rule 85 (n_add_operator -> .)
    CTEC            reduce using rule 85 (n_add_operator -> .)
    ID              reduce using rule 85 (n_add_operator -> .)

    n_add_operator                 shift and go to state 117

state 93

    (59) call_module -> ID n_func_exist n_gen_era . LPAREN aux_call_module n_verify_num_params RPAREN n_gen_gosub
    (60) call_module -> ID n_func_exist n_gen_era . LPAREN RPAREN n_gen_gosub

    LPAREN          shift and go to state 118


state 94

    (48) factor -> LPAREN . n_push_fake_bottom expresion RPAREN n_pop_fake_bottom
    (91) n_push_fake_bottom -> .

    LPAREN          reduce using rule 91 (n_push_fake_bottom -> .)
    CTEINT          reduce using rule 91 (n_push_fake_bottom -> .)
    CTEF            reduce using rule 91 (n_push_fake_bottom -> .)
    CTEC            reduce using rule 91 (n_push_fake_bottom -> .)
    ID              reduce using rule 91 (n_push_fake_bottom -> .)

    n_push_fake_bottom             shift and go to state 119

state 95

    (66) condicion -> IF LPAREN expresion . RPAREN n_check_exp bloque ELSE n_else bloque n_fill_end
    (67) condicion -> IF LPAREN expresion . RPAREN n_check_exp bloque n_fill_end

    RPAREN          shift and go to state 120


state 96

    (31) expresion -> exp . n_gen_and AND n_add_operator expresion
    (32) expresion -> exp . n_gen_and
    (90) n_gen_and -> .

    AND             reduce using rule 90 (n_gen_and -> .)
    RPAREN          reduce using rule 90 (n_gen_and -> .)
    COMA            reduce using rule 90 (n_gen_and -> .)
    TO              reduce using rule 90 (n_gen_and -> .)
    SEMICOLON       reduce using rule 90 (n_gen_and -> .)
    DO              reduce using rule 90 (n_gen_and -> .)

    n_gen_and                      shift and go to state 121

state 97

    (33) exp -> exp_aux . n_gen_or OR n_add_operator exp
    (34) exp -> exp_aux . n_gen_or
    (89) n_gen_or -> .

    OR              reduce using rule 89 (n_gen_or -> .)
    AND             reduce using rule 89 (n_gen_or -> .)
    RPAREN          reduce using rule 89 (n_gen_or -> .)
    COMA            reduce using rule 89 (n_gen_or -> .)
    TO              reduce using rule 89 (n_gen_or -> .)
    SEMICOLON       reduce using rule 89 (n_gen_or -> .)
    DO              reduce using rule 89 (n_gen_or -> .)

    n_gen_or                       shift and go to state 122

state 98

    (35) exp_aux -> exp_aux2 . n_gen_relational GREATERT n_add_operator exp_aux
    (36) exp_aux -> exp_aux2 . n_gen_relational LESST n_add_operator exp_aux
    (37) exp_aux -> exp_aux2 . n_gen_relational NOTEQUAL n_add_operator exp_aux
    (38) exp_aux -> exp_aux2 . n_gen_relational DBEQUALS n_add_operator exp_aux
    (39) exp_aux -> exp_aux2 . n_gen_relational GREATEREQUAL n_add_operator exp_aux
    (40) exp_aux -> exp_aux2 . n_gen_relational LESSEQUAL n_add_operator exp_aux
    (41) exp_aux -> exp_aux2 . n_gen_relational
    (88) n_gen_relational -> .

    GREATERT        reduce using rule 88 (n_gen_relational -> .)
    LESST           reduce using rule 88 (n_gen_relational -> .)
    NOTEQUAL        reduce using rule 88 (n_gen_relational -> .)
    DBEQUALS        reduce using rule 88 (n_gen_relational -> .)
    GREATEREQUAL    reduce using rule 88 (n_gen_relational -> .)
    LESSEQUAL       reduce using rule 88 (n_gen_relational -> .)
    OR              reduce using rule 88 (n_gen_relational -> .)
    AND             reduce using rule 88 (n_gen_relational -> .)
    RPAREN          reduce using rule 88 (n_gen_relational -> .)
    COMA            reduce using rule 88 (n_gen_relational -> .)
    TO              reduce using rule 88 (n_gen_relational -> .)
    SEMICOLON       reduce using rule 88 (n_gen_relational -> .)
    DO              reduce using rule 88 (n_gen_relational -> .)

    n_gen_relational               shift and go to state 123

state 99

    (42) exp_aux2 -> term . n_gen_term PLUS n_add_operator exp_aux2
    (43) exp_aux2 -> term . n_gen_term MINUS n_add_operator exp_aux2
    (44) exp_aux2 -> term . n_gen_term
    (86) n_gen_term -> .

    PLUS            reduce using rule 86 (n_gen_term -> .)
    MINUS           reduce using rule 86 (n_gen_term -> .)
    GREATERT        reduce using rule 86 (n_gen_term -> .)
    LESST           reduce using rule 86 (n_gen_term -> .)
    NOTEQUAL        reduce using rule 86 (n_gen_term -> .)
    DBEQUALS        reduce using rule 86 (n_gen_term -> .)
    GREATEREQUAL    reduce using rule 86 (n_gen_term -> .)
    LESSEQUAL       reduce using rule 86 (n_gen_term -> .)
    OR              reduce using rule 86 (n_gen_term -> .)
    AND             reduce using rule 86 (n_gen_term -> .)
    RPAREN          reduce using rule 86 (n_gen_term -> .)
    COMA            reduce using rule 86 (n_gen_term -> .)
    TO              reduce using rule 86 (n_gen_term -> .)
    SEMICOLON       reduce using rule 86 (n_gen_term -> .)
    DO              reduce using rule 86 (n_gen_term -> .)

    n_gen_term                     shift and go to state 124

state 100

    (45) term -> factor . n_gen_factor MULTIPLY n_add_operator term
    (46) term -> factor . n_gen_factor DIVIDE n_add_operator term
    (47) term -> factor . n_gen_factor
    (87) n_gen_factor -> .

    MULTIPLY        reduce using rule 87 (n_gen_factor -> .)
    DIVIDE          reduce using rule 87 (n_gen_factor -> .)
    PLUS            reduce using rule 87 (n_gen_factor -> .)
    MINUS           reduce using rule 87 (n_gen_factor -> .)
    GREATERT        reduce using rule 87 (n_gen_factor -> .)
    LESST           reduce using rule 87 (n_gen_factor -> .)
    NOTEQUAL        reduce using rule 87 (n_gen_factor -> .)
    DBEQUALS        reduce using rule 87 (n_gen_factor -> .)
    GREATEREQUAL    reduce using rule 87 (n_gen_factor -> .)
    LESSEQUAL       reduce using rule 87 (n_gen_factor -> .)
    OR              reduce using rule 87 (n_gen_factor -> .)
    AND             reduce using rule 87 (n_gen_factor -> .)
    RPAREN          reduce using rule 87 (n_gen_factor -> .)
    COMA            reduce using rule 87 (n_gen_factor -> .)
    TO              reduce using rule 87 (n_gen_factor -> .)
    SEMICOLON       reduce using rule 87 (n_gen_factor -> .)
    DO              reduce using rule 87 (n_gen_factor -> .)

    n_gen_factor                   shift and go to state 125

state 101

    (49) factor -> CTEINT . n_seen_factor_int
    (80) n_seen_factor_int -> .

    MULTIPLY        reduce using rule 80 (n_seen_factor_int -> .)
    DIVIDE          reduce using rule 80 (n_seen_factor_int -> .)
    PLUS            reduce using rule 80 (n_seen_factor_int -> .)
    MINUS           reduce using rule 80 (n_seen_factor_int -> .)
    GREATERT        reduce using rule 80 (n_seen_factor_int -> .)
    LESST           reduce using rule 80 (n_seen_factor_int -> .)
    NOTEQUAL        reduce using rule 80 (n_seen_factor_int -> .)
    DBEQUALS        reduce using rule 80 (n_seen_factor_int -> .)
    GREATEREQUAL    reduce using rule 80 (n_seen_factor_int -> .)
    LESSEQUAL       reduce using rule 80 (n_seen_factor_int -> .)
    OR              reduce using rule 80 (n_seen_factor_int -> .)
    AND             reduce using rule 80 (n_seen_factor_int -> .)
    RPAREN          reduce using rule 80 (n_seen_factor_int -> .)
    COMA            reduce using rule 80 (n_seen_factor_int -> .)
    TO              reduce using rule 80 (n_seen_factor_int -> .)
    SEMICOLON       reduce using rule 80 (n_seen_factor_int -> .)
    DO              reduce using rule 80 (n_seen_factor_int -> .)

    n_seen_factor_int              shift and go to state 126

state 102

    (50) factor -> CTEF . n_seen_factor_float
    (81) n_seen_factor_float -> .

    MULTIPLY        reduce using rule 81 (n_seen_factor_float -> .)
    DIVIDE          reduce using rule 81 (n_seen_factor_float -> .)
    PLUS            reduce using rule 81 (n_seen_factor_float -> .)
    MINUS           reduce using rule 81 (n_seen_factor_float -> .)
    GREATERT        reduce using rule 81 (n_seen_factor_float -> .)
    LESST           reduce using rule 81 (n_seen_factor_float -> .)
    NOTEQUAL        reduce using rule 81 (n_seen_factor_float -> .)
    DBEQUALS        reduce using rule 81 (n_seen_factor_float -> .)
    GREATEREQUAL    reduce using rule 81 (n_seen_factor_float -> .)
    LESSEQUAL       reduce using rule 81 (n_seen_factor_float -> .)
    OR              reduce using rule 81 (n_seen_factor_float -> .)
    AND             reduce using rule 81 (n_seen_factor_float -> .)
    RPAREN          reduce using rule 81 (n_seen_factor_float -> .)
    COMA            reduce using rule 81 (n_seen_factor_float -> .)
    TO              reduce using rule 81 (n_seen_factor_float -> .)
    SEMICOLON       reduce using rule 81 (n_seen_factor_float -> .)
    DO              reduce using rule 81 (n_seen_factor_float -> .)

    n_seen_factor_float            shift and go to state 127

state 103

    (51) factor -> CTEC . n_seen_factor_char
    (82) n_seen_factor_char -> .

    MULTIPLY        reduce using rule 82 (n_seen_factor_char -> .)
    DIVIDE          reduce using rule 82 (n_seen_factor_char -> .)
    PLUS            reduce using rule 82 (n_seen_factor_char -> .)
    MINUS           reduce using rule 82 (n_seen_factor_char -> .)
    GREATERT        reduce using rule 82 (n_seen_factor_char -> .)
    LESST           reduce using rule 82 (n_seen_factor_char -> .)
    NOTEQUAL        reduce using rule 82 (n_seen_factor_char -> .)
    DBEQUALS        reduce using rule 82 (n_seen_factor_char -> .)
    GREATEREQUAL    reduce using rule 82 (n_seen_factor_char -> .)
    LESSEQUAL       reduce using rule 82 (n_seen_factor_char -> .)
    OR              reduce using rule 82 (n_seen_factor_char -> .)
    AND             reduce using rule 82 (n_seen_factor_char -> .)
    RPAREN          reduce using rule 82 (n_seen_factor_char -> .)
    COMA            reduce using rule 82 (n_seen_factor_char -> .)
    TO              reduce using rule 82 (n_seen_factor_char -> .)
    SEMICOLON       reduce using rule 82 (n_seen_factor_char -> .)
    DO              reduce using rule 82 (n_seen_factor_char -> .)

    n_seen_factor_char             shift and go to state 128

state 104

    (52) factor -> ID . n_seen_factor_id
    (79) n_seen_factor_id -> .

    MULTIPLY        reduce using rule 79 (n_seen_factor_id -> .)
    DIVIDE          reduce using rule 79 (n_seen_factor_id -> .)
    PLUS            reduce using rule 79 (n_seen_factor_id -> .)
    MINUS           reduce using rule 79 (n_seen_factor_id -> .)
    GREATERT        reduce using rule 79 (n_seen_factor_id -> .)
    LESST           reduce using rule 79 (n_seen_factor_id -> .)
    NOTEQUAL        reduce using rule 79 (n_seen_factor_id -> .)
    DBEQUALS        reduce using rule 79 (n_seen_factor_id -> .)
    GREATEREQUAL    reduce using rule 79 (n_seen_factor_id -> .)
    LESSEQUAL       reduce using rule 79 (n_seen_factor_id -> .)
    OR              reduce using rule 79 (n_seen_factor_id -> .)
    AND             reduce using rule 79 (n_seen_factor_id -> .)
    RPAREN          reduce using rule 79 (n_seen_factor_id -> .)
    COMA            reduce using rule 79 (n_seen_factor_id -> .)
    TO              reduce using rule 79 (n_seen_factor_id -> .)
    SEMICOLON       reduce using rule 79 (n_seen_factor_id -> .)
    DO              reduce using rule 79 (n_seen_factor_id -> .)

    n_seen_factor_id               shift and go to state 129

state 105

    (71) escritura -> PRINT LPAREN escritura_aux . RPAREN

    RPAREN          shift and go to state 130


state 106

    (72) escritura_aux -> expresion . n_print COMA escritura_aux
    (74) escritura_aux -> expresion . n_print
    (101) n_print -> .

    COMA            reduce using rule 101 (n_print -> .)
    RPAREN          reduce using rule 101 (n_print -> .)

    n_print                        shift and go to state 131

state 107

    (73) escritura_aux -> CTESTRING . n_seen_string n_print COMA escritura_aux
    (75) escritura_aux -> CTESTRING . n_seen_string n_print
    (83) n_seen_string -> .

    COMA            reduce using rule 83 (n_seen_string -> .)
    RPAREN          reduce using rule 83 (n_seen_string -> .)

    n_seen_string                  shift and go to state 132

state 108

    (68) lectura -> READ LPAREN lect_aux . RPAREN

    RPAREN          shift and go to state 133


state 109

    (69) lect_aux -> ID . n_read
    (70) lect_aux -> ID . n_read COMA lect_aux
    (100) n_read -> .

    COMA            reduce using rule 100 (n_read -> .)
    RPAREN          reduce using rule 100 (n_read -> .)

    n_read                         shift and go to state 134

state 110

    (63) return -> RETURN n_search_return_func LPAREN . expresion RPAREN n_return_quad
    (31) expresion -> . exp n_gen_and AND n_add_operator expresion
    (32) expresion -> . exp n_gen_and
    (33) exp -> . exp_aux n_gen_or OR n_add_operator exp
    (34) exp -> . exp_aux n_gen_or
    (35) exp_aux -> . exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux
    (36) exp_aux -> . exp_aux2 n_gen_relational LESST n_add_operator exp_aux
    (37) exp_aux -> . exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux
    (38) exp_aux -> . exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux
    (39) exp_aux -> . exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux
    (40) exp_aux -> . exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux
    (41) exp_aux -> . exp_aux2 n_gen_relational
    (42) exp_aux2 -> . term n_gen_term PLUS n_add_operator exp_aux2
    (43) exp_aux2 -> . term n_gen_term MINUS n_add_operator exp_aux2
    (44) exp_aux2 -> . term n_gen_term
    (45) term -> . factor n_gen_factor MULTIPLY n_add_operator term
    (46) term -> . factor n_gen_factor DIVIDE n_add_operator term
    (47) term -> . factor n_gen_factor
    (48) factor -> . LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom
    (49) factor -> . CTEINT n_seen_factor_int
    (50) factor -> . CTEF n_seen_factor_float
    (51) factor -> . CTEC n_seen_factor_char
    (52) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 94
    CTEINT          shift and go to state 101
    CTEF            shift and go to state 102
    CTEC            shift and go to state 103
    ID              shift and go to state 104

    expresion                      shift and go to state 135
    exp                            shift and go to state 96
    exp_aux                        shift and go to state 97
    exp_aux2                       shift and go to state 98
    term                           shift and go to state 99
    factor                         shift and go to state 100

state 111

    (64) for -> FOR ID EQUAL . expresion TO expresion DO bloque
    (31) expresion -> . exp n_gen_and AND n_add_operator expresion
    (32) expresion -> . exp n_gen_and
    (33) exp -> . exp_aux n_gen_or OR n_add_operator exp
    (34) exp -> . exp_aux n_gen_or
    (35) exp_aux -> . exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux
    (36) exp_aux -> . exp_aux2 n_gen_relational LESST n_add_operator exp_aux
    (37) exp_aux -> . exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux
    (38) exp_aux -> . exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux
    (39) exp_aux -> . exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux
    (40) exp_aux -> . exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux
    (41) exp_aux -> . exp_aux2 n_gen_relational
    (42) exp_aux2 -> . term n_gen_term PLUS n_add_operator exp_aux2
    (43) exp_aux2 -> . term n_gen_term MINUS n_add_operator exp_aux2
    (44) exp_aux2 -> . term n_gen_term
    (45) term -> . factor n_gen_factor MULTIPLY n_add_operator term
    (46) term -> . factor n_gen_factor DIVIDE n_add_operator term
    (47) term -> . factor n_gen_factor
    (48) factor -> . LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom
    (49) factor -> . CTEINT n_seen_factor_int
    (50) factor -> . CTEF n_seen_factor_float
    (51) factor -> . CTEC n_seen_factor_char
    (52) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 94
    CTEINT          shift and go to state 101
    CTEF            shift and go to state 102
    CTEC            shift and go to state 103
    ID              shift and go to state 104

    expresion                      shift and go to state 136
    exp                            shift and go to state 96
    exp_aux                        shift and go to state 97
    exp_aux2                       shift and go to state 98
    term                           shift and go to state 99
    factor                         shift and go to state 100

state 112

    (65) while -> WHILE n_salto_while LPAREN . expresion RPAREN n_cond_while bloque n_ret_while
    (31) expresion -> . exp n_gen_and AND n_add_operator expresion
    (32) expresion -> . exp n_gen_and
    (33) exp -> . exp_aux n_gen_or OR n_add_operator exp
    (34) exp -> . exp_aux n_gen_or
    (35) exp_aux -> . exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux
    (36) exp_aux -> . exp_aux2 n_gen_relational LESST n_add_operator exp_aux
    (37) exp_aux -> . exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux
    (38) exp_aux -> . exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux
    (39) exp_aux -> . exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux
    (40) exp_aux -> . exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux
    (41) exp_aux -> . exp_aux2 n_gen_relational
    (42) exp_aux2 -> . term n_gen_term PLUS n_add_operator exp_aux2
    (43) exp_aux2 -> . term n_gen_term MINUS n_add_operator exp_aux2
    (44) exp_aux2 -> . term n_gen_term
    (45) term -> . factor n_gen_factor MULTIPLY n_add_operator term
    (46) term -> . factor n_gen_factor DIVIDE n_add_operator term
    (47) term -> . factor n_gen_factor
    (48) factor -> . LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom
    (49) factor -> . CTEINT n_seen_factor_int
    (50) factor -> . CTEF n_seen_factor_float
    (51) factor -> . CTEC n_seen_factor_char
    (52) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 94
    CTEINT          shift and go to state 101
    CTEF            shift and go to state 102
    CTEC            shift and go to state 103
    ID              shift and go to state 104

    expresion                      shift and go to state 137
    exp                            shift and go to state 96
    exp_aux                        shift and go to state 97
    exp_aux2                       shift and go to state 98
    term                           shift and go to state 99
    factor                         shift and go to state 100

state 113

    (7) vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux .

    MODULE          reduce using rule 7 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux .)
    MAIN            reduce using rule 7 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux .)
    RBRACKET        reduce using rule 7 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux .)
    ID              reduce using rule 7 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux .)
    IF              reduce using rule 7 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux .)
    PRINT           reduce using rule 7 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux .)
    READ            reduce using rule 7 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux .)
    RETURN          reduce using rule 7 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux .)
    FOR             reduce using rule 7 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux .)
    WHILE           reduce using rule 7 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux .)


state 114

    (53) module -> MODULE VOID n_seen_type ID n_seen_func_name params n_gen_func_quad bloque_module . n_endfunc module
    (55) module -> MODULE VOID n_seen_type ID n_seen_func_name params n_gen_func_quad bloque_module . n_endfunc
    (105) n_endfunc -> .

    MODULE          reduce using rule 105 (n_endfunc -> .)
    MAIN            reduce using rule 105 (n_endfunc -> .)

    n_endfunc                      shift and go to state 138

state 115

    (54) module -> MODULE tipo ID n_seen_func_name params n_gen_func_quad bloque_module n_endfunc . module
    (56) module -> MODULE tipo ID n_seen_func_name params n_gen_func_quad bloque_module n_endfunc .
    (53) module -> . MODULE VOID n_seen_type ID n_seen_func_name params n_gen_func_quad bloque_module n_endfunc module
    (54) module -> . MODULE tipo ID n_seen_func_name params n_gen_func_quad bloque_module n_endfunc module
    (55) module -> . MODULE VOID n_seen_type ID n_seen_func_name params n_gen_func_quad bloque_module n_endfunc
    (56) module -> . MODULE tipo ID n_seen_func_name params n_gen_func_quad bloque_module n_endfunc

    MAIN            reduce using rule 56 (module -> MODULE tipo ID n_seen_func_name params n_gen_func_quad bloque_module n_endfunc .)
    MODULE          shift and go to state 9

    module                         shift and go to state 139

state 116

    (9) vars_func -> ID n_seen_var_name COLON . tipo n_set_var_type n_save_param_type COMA vars_func
    (10) vars_func -> ID n_seen_var_name COLON . tipo n_set_var_type n_save_param_type
    (11) tipo -> . INT n_seen_type
    (12) tipo -> . FLOAT n_seen_type
    (13) tipo -> . CHAR n_seen_type

    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20

    tipo                           shift and go to state 140

state 117

    (30) asignacion -> ID n_seen_factor_id EQUAL n_add_operator . expresion n_assign
    (31) expresion -> . exp n_gen_and AND n_add_operator expresion
    (32) expresion -> . exp n_gen_and
    (33) exp -> . exp_aux n_gen_or OR n_add_operator exp
    (34) exp -> . exp_aux n_gen_or
    (35) exp_aux -> . exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux
    (36) exp_aux -> . exp_aux2 n_gen_relational LESST n_add_operator exp_aux
    (37) exp_aux -> . exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux
    (38) exp_aux -> . exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux
    (39) exp_aux -> . exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux
    (40) exp_aux -> . exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux
    (41) exp_aux -> . exp_aux2 n_gen_relational
    (42) exp_aux2 -> . term n_gen_term PLUS n_add_operator exp_aux2
    (43) exp_aux2 -> . term n_gen_term MINUS n_add_operator exp_aux2
    (44) exp_aux2 -> . term n_gen_term
    (45) term -> . factor n_gen_factor MULTIPLY n_add_operator term
    (46) term -> . factor n_gen_factor DIVIDE n_add_operator term
    (47) term -> . factor n_gen_factor
    (48) factor -> . LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom
    (49) factor -> . CTEINT n_seen_factor_int
    (50) factor -> . CTEF n_seen_factor_float
    (51) factor -> . CTEC n_seen_factor_char
    (52) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 94
    CTEINT          shift and go to state 101
    CTEF            shift and go to state 102
    CTEC            shift and go to state 103
    ID              shift and go to state 104

    expresion                      shift and go to state 141
    exp                            shift and go to state 96
    exp_aux                        shift and go to state 97
    exp_aux2                       shift and go to state 98
    term                           shift and go to state 99
    factor                         shift and go to state 100

state 118

    (59) call_module -> ID n_func_exist n_gen_era LPAREN . aux_call_module n_verify_num_params RPAREN n_gen_gosub
    (60) call_module -> ID n_func_exist n_gen_era LPAREN . RPAREN n_gen_gosub
    (61) aux_call_module -> . expresion n_check_param
    (62) aux_call_module -> . expresion n_check_param n_param_counter COMA aux_call_module
    (31) expresion -> . exp n_gen_and AND n_add_operator expresion
    (32) expresion -> . exp n_gen_and
    (33) exp -> . exp_aux n_gen_or OR n_add_operator exp
    (34) exp -> . exp_aux n_gen_or
    (35) exp_aux -> . exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux
    (36) exp_aux -> . exp_aux2 n_gen_relational LESST n_add_operator exp_aux
    (37) exp_aux -> . exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux
    (38) exp_aux -> . exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux
    (39) exp_aux -> . exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux
    (40) exp_aux -> . exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux
    (41) exp_aux -> . exp_aux2 n_gen_relational
    (42) exp_aux2 -> . term n_gen_term PLUS n_add_operator exp_aux2
    (43) exp_aux2 -> . term n_gen_term MINUS n_add_operator exp_aux2
    (44) exp_aux2 -> . term n_gen_term
    (45) term -> . factor n_gen_factor MULTIPLY n_add_operator term
    (46) term -> . factor n_gen_factor DIVIDE n_add_operator term
    (47) term -> . factor n_gen_factor
    (48) factor -> . LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom
    (49) factor -> . CTEINT n_seen_factor_int
    (50) factor -> . CTEF n_seen_factor_float
    (51) factor -> . CTEC n_seen_factor_char
    (52) factor -> . ID n_seen_factor_id

    RPAREN          shift and go to state 143
    LPAREN          shift and go to state 94
    CTEINT          shift and go to state 101
    CTEF            shift and go to state 102
    CTEC            shift and go to state 103
    ID              shift and go to state 104

    aux_call_module                shift and go to state 142
    expresion                      shift and go to state 144
    exp                            shift and go to state 96
    exp_aux                        shift and go to state 97
    exp_aux2                       shift and go to state 98
    term                           shift and go to state 99
    factor                         shift and go to state 100

state 119

    (48) factor -> LPAREN n_push_fake_bottom . expresion RPAREN n_pop_fake_bottom
    (31) expresion -> . exp n_gen_and AND n_add_operator expresion
    (32) expresion -> . exp n_gen_and
    (33) exp -> . exp_aux n_gen_or OR n_add_operator exp
    (34) exp -> . exp_aux n_gen_or
    (35) exp_aux -> . exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux
    (36) exp_aux -> . exp_aux2 n_gen_relational LESST n_add_operator exp_aux
    (37) exp_aux -> . exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux
    (38) exp_aux -> . exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux
    (39) exp_aux -> . exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux
    (40) exp_aux -> . exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux
    (41) exp_aux -> . exp_aux2 n_gen_relational
    (42) exp_aux2 -> . term n_gen_term PLUS n_add_operator exp_aux2
    (43) exp_aux2 -> . term n_gen_term MINUS n_add_operator exp_aux2
    (44) exp_aux2 -> . term n_gen_term
    (45) term -> . factor n_gen_factor MULTIPLY n_add_operator term
    (46) term -> . factor n_gen_factor DIVIDE n_add_operator term
    (47) term -> . factor n_gen_factor
    (48) factor -> . LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom
    (49) factor -> . CTEINT n_seen_factor_int
    (50) factor -> . CTEF n_seen_factor_float
    (51) factor -> . CTEC n_seen_factor_char
    (52) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 94
    CTEINT          shift and go to state 101
    CTEF            shift and go to state 102
    CTEC            shift and go to state 103
    ID              shift and go to state 104

    expresion                      shift and go to state 145
    exp                            shift and go to state 96
    exp_aux                        shift and go to state 97
    exp_aux2                       shift and go to state 98
    term                           shift and go to state 99
    factor                         shift and go to state 100

state 120

    (66) condicion -> IF LPAREN expresion RPAREN . n_check_exp bloque ELSE n_else bloque n_fill_end
    (67) condicion -> IF LPAREN expresion RPAREN . n_check_exp bloque n_fill_end
    (94) n_check_exp -> .

    LBRACKET        reduce using rule 94 (n_check_exp -> .)

    n_check_exp                    shift and go to state 146

state 121

    (31) expresion -> exp n_gen_and . AND n_add_operator expresion
    (32) expresion -> exp n_gen_and .

    AND             shift and go to state 147
    RPAREN          reduce using rule 32 (expresion -> exp n_gen_and .)
    COMA            reduce using rule 32 (expresion -> exp n_gen_and .)
    TO              reduce using rule 32 (expresion -> exp n_gen_and .)
    SEMICOLON       reduce using rule 32 (expresion -> exp n_gen_and .)
    DO              reduce using rule 32 (expresion -> exp n_gen_and .)


state 122

    (33) exp -> exp_aux n_gen_or . OR n_add_operator exp
    (34) exp -> exp_aux n_gen_or .

    OR              shift and go to state 148
    AND             reduce using rule 34 (exp -> exp_aux n_gen_or .)
    RPAREN          reduce using rule 34 (exp -> exp_aux n_gen_or .)
    COMA            reduce using rule 34 (exp -> exp_aux n_gen_or .)
    TO              reduce using rule 34 (exp -> exp_aux n_gen_or .)
    SEMICOLON       reduce using rule 34 (exp -> exp_aux n_gen_or .)
    DO              reduce using rule 34 (exp -> exp_aux n_gen_or .)


state 123

    (35) exp_aux -> exp_aux2 n_gen_relational . GREATERT n_add_operator exp_aux
    (36) exp_aux -> exp_aux2 n_gen_relational . LESST n_add_operator exp_aux
    (37) exp_aux -> exp_aux2 n_gen_relational . NOTEQUAL n_add_operator exp_aux
    (38) exp_aux -> exp_aux2 n_gen_relational . DBEQUALS n_add_operator exp_aux
    (39) exp_aux -> exp_aux2 n_gen_relational . GREATEREQUAL n_add_operator exp_aux
    (40) exp_aux -> exp_aux2 n_gen_relational . LESSEQUAL n_add_operator exp_aux
    (41) exp_aux -> exp_aux2 n_gen_relational .

    GREATERT        shift and go to state 149
    LESST           shift and go to state 150
    NOTEQUAL        shift and go to state 151
    DBEQUALS        shift and go to state 152
    GREATEREQUAL    shift and go to state 153
    LESSEQUAL       shift and go to state 154
    OR              reduce using rule 41 (exp_aux -> exp_aux2 n_gen_relational .)
    AND             reduce using rule 41 (exp_aux -> exp_aux2 n_gen_relational .)
    RPAREN          reduce using rule 41 (exp_aux -> exp_aux2 n_gen_relational .)
    COMA            reduce using rule 41 (exp_aux -> exp_aux2 n_gen_relational .)
    TO              reduce using rule 41 (exp_aux -> exp_aux2 n_gen_relational .)
    SEMICOLON       reduce using rule 41 (exp_aux -> exp_aux2 n_gen_relational .)
    DO              reduce using rule 41 (exp_aux -> exp_aux2 n_gen_relational .)


state 124

    (42) exp_aux2 -> term n_gen_term . PLUS n_add_operator exp_aux2
    (43) exp_aux2 -> term n_gen_term . MINUS n_add_operator exp_aux2
    (44) exp_aux2 -> term n_gen_term .

    PLUS            shift and go to state 155
    MINUS           shift and go to state 156
    GREATERT        reduce using rule 44 (exp_aux2 -> term n_gen_term .)
    LESST           reduce using rule 44 (exp_aux2 -> term n_gen_term .)
    NOTEQUAL        reduce using rule 44 (exp_aux2 -> term n_gen_term .)
    DBEQUALS        reduce using rule 44 (exp_aux2 -> term n_gen_term .)
    GREATEREQUAL    reduce using rule 44 (exp_aux2 -> term n_gen_term .)
    LESSEQUAL       reduce using rule 44 (exp_aux2 -> term n_gen_term .)
    OR              reduce using rule 44 (exp_aux2 -> term n_gen_term .)
    AND             reduce using rule 44 (exp_aux2 -> term n_gen_term .)
    RPAREN          reduce using rule 44 (exp_aux2 -> term n_gen_term .)
    COMA            reduce using rule 44 (exp_aux2 -> term n_gen_term .)
    TO              reduce using rule 44 (exp_aux2 -> term n_gen_term .)
    SEMICOLON       reduce using rule 44 (exp_aux2 -> term n_gen_term .)
    DO              reduce using rule 44 (exp_aux2 -> term n_gen_term .)


state 125

    (45) term -> factor n_gen_factor . MULTIPLY n_add_operator term
    (46) term -> factor n_gen_factor . DIVIDE n_add_operator term
    (47) term -> factor n_gen_factor .

    MULTIPLY        shift and go to state 157
    DIVIDE          shift and go to state 158
    PLUS            reduce using rule 47 (term -> factor n_gen_factor .)
    MINUS           reduce using rule 47 (term -> factor n_gen_factor .)
    GREATERT        reduce using rule 47 (term -> factor n_gen_factor .)
    LESST           reduce using rule 47 (term -> factor n_gen_factor .)
    NOTEQUAL        reduce using rule 47 (term -> factor n_gen_factor .)
    DBEQUALS        reduce using rule 47 (term -> factor n_gen_factor .)
    GREATEREQUAL    reduce using rule 47 (term -> factor n_gen_factor .)
    LESSEQUAL       reduce using rule 47 (term -> factor n_gen_factor .)
    OR              reduce using rule 47 (term -> factor n_gen_factor .)
    AND             reduce using rule 47 (term -> factor n_gen_factor .)
    RPAREN          reduce using rule 47 (term -> factor n_gen_factor .)
    COMA            reduce using rule 47 (term -> factor n_gen_factor .)
    TO              reduce using rule 47 (term -> factor n_gen_factor .)
    SEMICOLON       reduce using rule 47 (term -> factor n_gen_factor .)
    DO              reduce using rule 47 (term -> factor n_gen_factor .)


state 126

    (49) factor -> CTEINT n_seen_factor_int .

    MULTIPLY        reduce using rule 49 (factor -> CTEINT n_seen_factor_int .)
    DIVIDE          reduce using rule 49 (factor -> CTEINT n_seen_factor_int .)
    PLUS            reduce using rule 49 (factor -> CTEINT n_seen_factor_int .)
    MINUS           reduce using rule 49 (factor -> CTEINT n_seen_factor_int .)
    GREATERT        reduce using rule 49 (factor -> CTEINT n_seen_factor_int .)
    LESST           reduce using rule 49 (factor -> CTEINT n_seen_factor_int .)
    NOTEQUAL        reduce using rule 49 (factor -> CTEINT n_seen_factor_int .)
    DBEQUALS        reduce using rule 49 (factor -> CTEINT n_seen_factor_int .)
    GREATEREQUAL    reduce using rule 49 (factor -> CTEINT n_seen_factor_int .)
    LESSEQUAL       reduce using rule 49 (factor -> CTEINT n_seen_factor_int .)
    OR              reduce using rule 49 (factor -> CTEINT n_seen_factor_int .)
    AND             reduce using rule 49 (factor -> CTEINT n_seen_factor_int .)
    RPAREN          reduce using rule 49 (factor -> CTEINT n_seen_factor_int .)
    COMA            reduce using rule 49 (factor -> CTEINT n_seen_factor_int .)
    TO              reduce using rule 49 (factor -> CTEINT n_seen_factor_int .)
    SEMICOLON       reduce using rule 49 (factor -> CTEINT n_seen_factor_int .)
    DO              reduce using rule 49 (factor -> CTEINT n_seen_factor_int .)


state 127

    (50) factor -> CTEF n_seen_factor_float .

    MULTIPLY        reduce using rule 50 (factor -> CTEF n_seen_factor_float .)
    DIVIDE          reduce using rule 50 (factor -> CTEF n_seen_factor_float .)
    PLUS            reduce using rule 50 (factor -> CTEF n_seen_factor_float .)
    MINUS           reduce using rule 50 (factor -> CTEF n_seen_factor_float .)
    GREATERT        reduce using rule 50 (factor -> CTEF n_seen_factor_float .)
    LESST           reduce using rule 50 (factor -> CTEF n_seen_factor_float .)
    NOTEQUAL        reduce using rule 50 (factor -> CTEF n_seen_factor_float .)
    DBEQUALS        reduce using rule 50 (factor -> CTEF n_seen_factor_float .)
    GREATEREQUAL    reduce using rule 50 (factor -> CTEF n_seen_factor_float .)
    LESSEQUAL       reduce using rule 50 (factor -> CTEF n_seen_factor_float .)
    OR              reduce using rule 50 (factor -> CTEF n_seen_factor_float .)
    AND             reduce using rule 50 (factor -> CTEF n_seen_factor_float .)
    RPAREN          reduce using rule 50 (factor -> CTEF n_seen_factor_float .)
    COMA            reduce using rule 50 (factor -> CTEF n_seen_factor_float .)
    TO              reduce using rule 50 (factor -> CTEF n_seen_factor_float .)
    SEMICOLON       reduce using rule 50 (factor -> CTEF n_seen_factor_float .)
    DO              reduce using rule 50 (factor -> CTEF n_seen_factor_float .)


state 128

    (51) factor -> CTEC n_seen_factor_char .

    MULTIPLY        reduce using rule 51 (factor -> CTEC n_seen_factor_char .)
    DIVIDE          reduce using rule 51 (factor -> CTEC n_seen_factor_char .)
    PLUS            reduce using rule 51 (factor -> CTEC n_seen_factor_char .)
    MINUS           reduce using rule 51 (factor -> CTEC n_seen_factor_char .)
    GREATERT        reduce using rule 51 (factor -> CTEC n_seen_factor_char .)
    LESST           reduce using rule 51 (factor -> CTEC n_seen_factor_char .)
    NOTEQUAL        reduce using rule 51 (factor -> CTEC n_seen_factor_char .)
    DBEQUALS        reduce using rule 51 (factor -> CTEC n_seen_factor_char .)
    GREATEREQUAL    reduce using rule 51 (factor -> CTEC n_seen_factor_char .)
    LESSEQUAL       reduce using rule 51 (factor -> CTEC n_seen_factor_char .)
    OR              reduce using rule 51 (factor -> CTEC n_seen_factor_char .)
    AND             reduce using rule 51 (factor -> CTEC n_seen_factor_char .)
    RPAREN          reduce using rule 51 (factor -> CTEC n_seen_factor_char .)
    COMA            reduce using rule 51 (factor -> CTEC n_seen_factor_char .)
    TO              reduce using rule 51 (factor -> CTEC n_seen_factor_char .)
    SEMICOLON       reduce using rule 51 (factor -> CTEC n_seen_factor_char .)
    DO              reduce using rule 51 (factor -> CTEC n_seen_factor_char .)


state 129

    (52) factor -> ID n_seen_factor_id .

    MULTIPLY        reduce using rule 52 (factor -> ID n_seen_factor_id .)
    DIVIDE          reduce using rule 52 (factor -> ID n_seen_factor_id .)
    PLUS            reduce using rule 52 (factor -> ID n_seen_factor_id .)
    MINUS           reduce using rule 52 (factor -> ID n_seen_factor_id .)
    GREATERT        reduce using rule 52 (factor -> ID n_seen_factor_id .)
    LESST           reduce using rule 52 (factor -> ID n_seen_factor_id .)
    NOTEQUAL        reduce using rule 52 (factor -> ID n_seen_factor_id .)
    DBEQUALS        reduce using rule 52 (factor -> ID n_seen_factor_id .)
    GREATEREQUAL    reduce using rule 52 (factor -> ID n_seen_factor_id .)
    LESSEQUAL       reduce using rule 52 (factor -> ID n_seen_factor_id .)
    OR              reduce using rule 52 (factor -> ID n_seen_factor_id .)
    AND             reduce using rule 52 (factor -> ID n_seen_factor_id .)
    RPAREN          reduce using rule 52 (factor -> ID n_seen_factor_id .)
    COMA            reduce using rule 52 (factor -> ID n_seen_factor_id .)
    TO              reduce using rule 52 (factor -> ID n_seen_factor_id .)
    SEMICOLON       reduce using rule 52 (factor -> ID n_seen_factor_id .)
    DO              reduce using rule 52 (factor -> ID n_seen_factor_id .)


state 130

    (71) escritura -> PRINT LPAREN escritura_aux RPAREN .

    SEMICOLON       reduce using rule 71 (escritura -> PRINT LPAREN escritura_aux RPAREN .)


state 131

    (72) escritura_aux -> expresion n_print . COMA escritura_aux
    (74) escritura_aux -> expresion n_print .

    COMA            shift and go to state 159
    RPAREN          reduce using rule 74 (escritura_aux -> expresion n_print .)


state 132

    (73) escritura_aux -> CTESTRING n_seen_string . n_print COMA escritura_aux
    (75) escritura_aux -> CTESTRING n_seen_string . n_print
    (101) n_print -> .

    COMA            reduce using rule 101 (n_print -> .)
    RPAREN          reduce using rule 101 (n_print -> .)

    n_print                        shift and go to state 160

state 133

    (68) lectura -> READ LPAREN lect_aux RPAREN .

    SEMICOLON       reduce using rule 68 (lectura -> READ LPAREN lect_aux RPAREN .)


state 134

    (69) lect_aux -> ID n_read .
    (70) lect_aux -> ID n_read . COMA lect_aux

    RPAREN          reduce using rule 69 (lect_aux -> ID n_read .)
    COMA            shift and go to state 161


state 135

    (63) return -> RETURN n_search_return_func LPAREN expresion . RPAREN n_return_quad

    RPAREN          shift and go to state 162


state 136

    (64) for -> FOR ID EQUAL expresion . TO expresion DO bloque

    TO              shift and go to state 163


state 137

    (65) while -> WHILE n_salto_while LPAREN expresion . RPAREN n_cond_while bloque n_ret_while

    RPAREN          shift and go to state 164


state 138

    (53) module -> MODULE VOID n_seen_type ID n_seen_func_name params n_gen_func_quad bloque_module n_endfunc . module
    (55) module -> MODULE VOID n_seen_type ID n_seen_func_name params n_gen_func_quad bloque_module n_endfunc .
    (53) module -> . MODULE VOID n_seen_type ID n_seen_func_name params n_gen_func_quad bloque_module n_endfunc module
    (54) module -> . MODULE tipo ID n_seen_func_name params n_gen_func_quad bloque_module n_endfunc module
    (55) module -> . MODULE VOID n_seen_type ID n_seen_func_name params n_gen_func_quad bloque_module n_endfunc
    (56) module -> . MODULE tipo ID n_seen_func_name params n_gen_func_quad bloque_module n_endfunc

    MAIN            reduce using rule 55 (module -> MODULE VOID n_seen_type ID n_seen_func_name params n_gen_func_quad bloque_module n_endfunc .)
    MODULE          shift and go to state 9

    module                         shift and go to state 165

state 139

    (54) module -> MODULE tipo ID n_seen_func_name params n_gen_func_quad bloque_module n_endfunc module .

    MAIN            reduce using rule 54 (module -> MODULE tipo ID n_seen_func_name params n_gen_func_quad bloque_module n_endfunc module .)


state 140

    (9) vars_func -> ID n_seen_var_name COLON tipo . n_set_var_type n_save_param_type COMA vars_func
    (10) vars_func -> ID n_seen_var_name COLON tipo . n_set_var_type n_save_param_type
    (78) n_set_var_type -> .

    COMA            reduce using rule 78 (n_set_var_type -> .)
    RPAREN          reduce using rule 78 (n_set_var_type -> .)

    n_set_var_type                 shift and go to state 166

state 141

    (30) asignacion -> ID n_seen_factor_id EQUAL n_add_operator expresion . n_assign
    (84) n_assign -> .

    SEMICOLON       reduce using rule 84 (n_assign -> .)

    n_assign                       shift and go to state 167

state 142

    (59) call_module -> ID n_func_exist n_gen_era LPAREN aux_call_module . n_verify_num_params RPAREN n_gen_gosub
    (108) n_verify_num_params -> .

    RPAREN          reduce using rule 108 (n_verify_num_params -> .)

    n_verify_num_params            shift and go to state 168

state 143

    (60) call_module -> ID n_func_exist n_gen_era LPAREN RPAREN . n_gen_gosub
    (111) n_gen_gosub -> .

    SEMICOLON       reduce using rule 111 (n_gen_gosub -> .)

    n_gen_gosub                    shift and go to state 169

state 144

    (61) aux_call_module -> expresion . n_check_param
    (62) aux_call_module -> expresion . n_check_param n_param_counter COMA aux_call_module
    (110) n_check_param -> .

    COMA            reduce using rule 110 (n_check_param -> .)
    RPAREN          reduce using rule 110 (n_check_param -> .)

    n_check_param                  shift and go to state 170

state 145

    (48) factor -> LPAREN n_push_fake_bottom expresion . RPAREN n_pop_fake_bottom

    RPAREN          shift and go to state 171


state 146

    (66) condicion -> IF LPAREN expresion RPAREN n_check_exp . bloque ELSE n_else bloque n_fill_end
    (67) condicion -> IF LPAREN expresion RPAREN n_check_exp . bloque n_fill_end
    (18) bloque -> . LBRACKET estatuto_aux RBRACKET
    (19) bloque -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 173

    bloque                         shift and go to state 172

state 147

    (31) expresion -> exp n_gen_and AND . n_add_operator expresion
    (85) n_add_operator -> .

    LPAREN          reduce using rule 85 (n_add_operator -> .)
    CTEINT          reduce using rule 85 (n_add_operator -> .)
    CTEF            reduce using rule 85 (n_add_operator -> .)
    CTEC            reduce using rule 85 (n_add_operator -> .)
    ID              reduce using rule 85 (n_add_operator -> .)

    n_add_operator                 shift and go to state 174

state 148

    (33) exp -> exp_aux n_gen_or OR . n_add_operator exp
    (85) n_add_operator -> .

    LPAREN          reduce using rule 85 (n_add_operator -> .)
    CTEINT          reduce using rule 85 (n_add_operator -> .)
    CTEF            reduce using rule 85 (n_add_operator -> .)
    CTEC            reduce using rule 85 (n_add_operator -> .)
    ID              reduce using rule 85 (n_add_operator -> .)

    n_add_operator                 shift and go to state 175

state 149

    (35) exp_aux -> exp_aux2 n_gen_relational GREATERT . n_add_operator exp_aux
    (85) n_add_operator -> .

    LPAREN          reduce using rule 85 (n_add_operator -> .)
    CTEINT          reduce using rule 85 (n_add_operator -> .)
    CTEF            reduce using rule 85 (n_add_operator -> .)
    CTEC            reduce using rule 85 (n_add_operator -> .)
    ID              reduce using rule 85 (n_add_operator -> .)

    n_add_operator                 shift and go to state 176

state 150

    (36) exp_aux -> exp_aux2 n_gen_relational LESST . n_add_operator exp_aux
    (85) n_add_operator -> .

    LPAREN          reduce using rule 85 (n_add_operator -> .)
    CTEINT          reduce using rule 85 (n_add_operator -> .)
    CTEF            reduce using rule 85 (n_add_operator -> .)
    CTEC            reduce using rule 85 (n_add_operator -> .)
    ID              reduce using rule 85 (n_add_operator -> .)

    n_add_operator                 shift and go to state 177

state 151

    (37) exp_aux -> exp_aux2 n_gen_relational NOTEQUAL . n_add_operator exp_aux
    (85) n_add_operator -> .

    LPAREN          reduce using rule 85 (n_add_operator -> .)
    CTEINT          reduce using rule 85 (n_add_operator -> .)
    CTEF            reduce using rule 85 (n_add_operator -> .)
    CTEC            reduce using rule 85 (n_add_operator -> .)
    ID              reduce using rule 85 (n_add_operator -> .)

    n_add_operator                 shift and go to state 178

state 152

    (38) exp_aux -> exp_aux2 n_gen_relational DBEQUALS . n_add_operator exp_aux
    (85) n_add_operator -> .

    LPAREN          reduce using rule 85 (n_add_operator -> .)
    CTEINT          reduce using rule 85 (n_add_operator -> .)
    CTEF            reduce using rule 85 (n_add_operator -> .)
    CTEC            reduce using rule 85 (n_add_operator -> .)
    ID              reduce using rule 85 (n_add_operator -> .)

    n_add_operator                 shift and go to state 179

state 153

    (39) exp_aux -> exp_aux2 n_gen_relational GREATEREQUAL . n_add_operator exp_aux
    (85) n_add_operator -> .

    LPAREN          reduce using rule 85 (n_add_operator -> .)
    CTEINT          reduce using rule 85 (n_add_operator -> .)
    CTEF            reduce using rule 85 (n_add_operator -> .)
    CTEC            reduce using rule 85 (n_add_operator -> .)
    ID              reduce using rule 85 (n_add_operator -> .)

    n_add_operator                 shift and go to state 180

state 154

    (40) exp_aux -> exp_aux2 n_gen_relational LESSEQUAL . n_add_operator exp_aux
    (85) n_add_operator -> .

    LPAREN          reduce using rule 85 (n_add_operator -> .)
    CTEINT          reduce using rule 85 (n_add_operator -> .)
    CTEF            reduce using rule 85 (n_add_operator -> .)
    CTEC            reduce using rule 85 (n_add_operator -> .)
    ID              reduce using rule 85 (n_add_operator -> .)

    n_add_operator                 shift and go to state 181

state 155

    (42) exp_aux2 -> term n_gen_term PLUS . n_add_operator exp_aux2
    (85) n_add_operator -> .

    LPAREN          reduce using rule 85 (n_add_operator -> .)
    CTEINT          reduce using rule 85 (n_add_operator -> .)
    CTEF            reduce using rule 85 (n_add_operator -> .)
    CTEC            reduce using rule 85 (n_add_operator -> .)
    ID              reduce using rule 85 (n_add_operator -> .)

    n_add_operator                 shift and go to state 182

state 156

    (43) exp_aux2 -> term n_gen_term MINUS . n_add_operator exp_aux2
    (85) n_add_operator -> .

    LPAREN          reduce using rule 85 (n_add_operator -> .)
    CTEINT          reduce using rule 85 (n_add_operator -> .)
    CTEF            reduce using rule 85 (n_add_operator -> .)
    CTEC            reduce using rule 85 (n_add_operator -> .)
    ID              reduce using rule 85 (n_add_operator -> .)

    n_add_operator                 shift and go to state 183

state 157

    (45) term -> factor n_gen_factor MULTIPLY . n_add_operator term
    (85) n_add_operator -> .

    LPAREN          reduce using rule 85 (n_add_operator -> .)
    CTEINT          reduce using rule 85 (n_add_operator -> .)
    CTEF            reduce using rule 85 (n_add_operator -> .)
    CTEC            reduce using rule 85 (n_add_operator -> .)
    ID              reduce using rule 85 (n_add_operator -> .)

    n_add_operator                 shift and go to state 184

state 158

    (46) term -> factor n_gen_factor DIVIDE . n_add_operator term
    (85) n_add_operator -> .

    LPAREN          reduce using rule 85 (n_add_operator -> .)
    CTEINT          reduce using rule 85 (n_add_operator -> .)
    CTEF            reduce using rule 85 (n_add_operator -> .)
    CTEC            reduce using rule 85 (n_add_operator -> .)
    ID              reduce using rule 85 (n_add_operator -> .)

    n_add_operator                 shift and go to state 185

state 159

    (72) escritura_aux -> expresion n_print COMA . escritura_aux
    (72) escritura_aux -> . expresion n_print COMA escritura_aux
    (73) escritura_aux -> . CTESTRING n_seen_string n_print COMA escritura_aux
    (74) escritura_aux -> . expresion n_print
    (75) escritura_aux -> . CTESTRING n_seen_string n_print
    (31) expresion -> . exp n_gen_and AND n_add_operator expresion
    (32) expresion -> . exp n_gen_and
    (33) exp -> . exp_aux n_gen_or OR n_add_operator exp
    (34) exp -> . exp_aux n_gen_or
    (35) exp_aux -> . exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux
    (36) exp_aux -> . exp_aux2 n_gen_relational LESST n_add_operator exp_aux
    (37) exp_aux -> . exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux
    (38) exp_aux -> . exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux
    (39) exp_aux -> . exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux
    (40) exp_aux -> . exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux
    (41) exp_aux -> . exp_aux2 n_gen_relational
    (42) exp_aux2 -> . term n_gen_term PLUS n_add_operator exp_aux2
    (43) exp_aux2 -> . term n_gen_term MINUS n_add_operator exp_aux2
    (44) exp_aux2 -> . term n_gen_term
    (45) term -> . factor n_gen_factor MULTIPLY n_add_operator term
    (46) term -> . factor n_gen_factor DIVIDE n_add_operator term
    (47) term -> . factor n_gen_factor
    (48) factor -> . LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom
    (49) factor -> . CTEINT n_seen_factor_int
    (50) factor -> . CTEF n_seen_factor_float
    (51) factor -> . CTEC n_seen_factor_char
    (52) factor -> . ID n_seen_factor_id

    CTESTRING       shift and go to state 107
    LPAREN          shift and go to state 94
    CTEINT          shift and go to state 101
    CTEF            shift and go to state 102
    CTEC            shift and go to state 103
    ID              shift and go to state 104

    expresion                      shift and go to state 106
    escritura_aux                  shift and go to state 186
    exp                            shift and go to state 96
    exp_aux                        shift and go to state 97
    exp_aux2                       shift and go to state 98
    term                           shift and go to state 99
    factor                         shift and go to state 100

state 160

    (73) escritura_aux -> CTESTRING n_seen_string n_print . COMA escritura_aux
    (75) escritura_aux -> CTESTRING n_seen_string n_print .

    COMA            shift and go to state 187
    RPAREN          reduce using rule 75 (escritura_aux -> CTESTRING n_seen_string n_print .)


state 161

    (70) lect_aux -> ID n_read COMA . lect_aux
    (69) lect_aux -> . ID n_read
    (70) lect_aux -> . ID n_read COMA lect_aux

    ID              shift and go to state 109

    lect_aux                       shift and go to state 188

state 162

    (63) return -> RETURN n_search_return_func LPAREN expresion RPAREN . n_return_quad
    (113) n_return_quad -> .

    SEMICOLON       reduce using rule 113 (n_return_quad -> .)

    n_return_quad                  shift and go to state 189

state 163

    (64) for -> FOR ID EQUAL expresion TO . expresion DO bloque
    (31) expresion -> . exp n_gen_and AND n_add_operator expresion
    (32) expresion -> . exp n_gen_and
    (33) exp -> . exp_aux n_gen_or OR n_add_operator exp
    (34) exp -> . exp_aux n_gen_or
    (35) exp_aux -> . exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux
    (36) exp_aux -> . exp_aux2 n_gen_relational LESST n_add_operator exp_aux
    (37) exp_aux -> . exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux
    (38) exp_aux -> . exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux
    (39) exp_aux -> . exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux
    (40) exp_aux -> . exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux
    (41) exp_aux -> . exp_aux2 n_gen_relational
    (42) exp_aux2 -> . term n_gen_term PLUS n_add_operator exp_aux2
    (43) exp_aux2 -> . term n_gen_term MINUS n_add_operator exp_aux2
    (44) exp_aux2 -> . term n_gen_term
    (45) term -> . factor n_gen_factor MULTIPLY n_add_operator term
    (46) term -> . factor n_gen_factor DIVIDE n_add_operator term
    (47) term -> . factor n_gen_factor
    (48) factor -> . LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom
    (49) factor -> . CTEINT n_seen_factor_int
    (50) factor -> . CTEF n_seen_factor_float
    (51) factor -> . CTEC n_seen_factor_char
    (52) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 94
    CTEINT          shift and go to state 101
    CTEF            shift and go to state 102
    CTEC            shift and go to state 103
    ID              shift and go to state 104

    expresion                      shift and go to state 190
    exp                            shift and go to state 96
    exp_aux                        shift and go to state 97
    exp_aux2                       shift and go to state 98
    term                           shift and go to state 99
    factor                         shift and go to state 100

state 164

    (65) while -> WHILE n_salto_while LPAREN expresion RPAREN . n_cond_while bloque n_ret_while
    (98) n_cond_while -> .

    LBRACKET        reduce using rule 98 (n_cond_while -> .)

    n_cond_while                   shift and go to state 191

state 165

    (53) module -> MODULE VOID n_seen_type ID n_seen_func_name params n_gen_func_quad bloque_module n_endfunc module .

    MAIN            reduce using rule 53 (module -> MODULE VOID n_seen_type ID n_seen_func_name params n_gen_func_quad bloque_module n_endfunc module .)


state 166

    (9) vars_func -> ID n_seen_var_name COLON tipo n_set_var_type . n_save_param_type COMA vars_func
    (10) vars_func -> ID n_seen_var_name COLON tipo n_set_var_type . n_save_param_type
    (102) n_save_param_type -> .

    COMA            reduce using rule 102 (n_save_param_type -> .)
    RPAREN          reduce using rule 102 (n_save_param_type -> .)

    n_save_param_type              shift and go to state 192

state 167

    (30) asignacion -> ID n_seen_factor_id EQUAL n_add_operator expresion n_assign .

    SEMICOLON       reduce using rule 30 (asignacion -> ID n_seen_factor_id EQUAL n_add_operator expresion n_assign .)


state 168

    (59) call_module -> ID n_func_exist n_gen_era LPAREN aux_call_module n_verify_num_params . RPAREN n_gen_gosub

    RPAREN          shift and go to state 193


state 169

    (60) call_module -> ID n_func_exist n_gen_era LPAREN RPAREN n_gen_gosub .

    SEMICOLON       reduce using rule 60 (call_module -> ID n_func_exist n_gen_era LPAREN RPAREN n_gen_gosub .)


state 170

    (61) aux_call_module -> expresion n_check_param .
    (62) aux_call_module -> expresion n_check_param . n_param_counter COMA aux_call_module
    (109) n_param_counter -> .

    RPAREN          reduce using rule 61 (aux_call_module -> expresion n_check_param .)
    COMA            reduce using rule 109 (n_param_counter -> .)

    n_param_counter                shift and go to state 194

state 171

    (48) factor -> LPAREN n_push_fake_bottom expresion RPAREN . n_pop_fake_bottom
    (92) n_pop_fake_bottom -> .

    MULTIPLY        reduce using rule 92 (n_pop_fake_bottom -> .)
    DIVIDE          reduce using rule 92 (n_pop_fake_bottom -> .)
    PLUS            reduce using rule 92 (n_pop_fake_bottom -> .)
    MINUS           reduce using rule 92 (n_pop_fake_bottom -> .)
    GREATERT        reduce using rule 92 (n_pop_fake_bottom -> .)
    LESST           reduce using rule 92 (n_pop_fake_bottom -> .)
    NOTEQUAL        reduce using rule 92 (n_pop_fake_bottom -> .)
    DBEQUALS        reduce using rule 92 (n_pop_fake_bottom -> .)
    GREATEREQUAL    reduce using rule 92 (n_pop_fake_bottom -> .)
    LESSEQUAL       reduce using rule 92 (n_pop_fake_bottom -> .)
    OR              reduce using rule 92 (n_pop_fake_bottom -> .)
    AND             reduce using rule 92 (n_pop_fake_bottom -> .)
    RPAREN          reduce using rule 92 (n_pop_fake_bottom -> .)
    COMA            reduce using rule 92 (n_pop_fake_bottom -> .)
    TO              reduce using rule 92 (n_pop_fake_bottom -> .)
    SEMICOLON       reduce using rule 92 (n_pop_fake_bottom -> .)
    DO              reduce using rule 92 (n_pop_fake_bottom -> .)

    n_pop_fake_bottom              shift and go to state 195

state 172

    (66) condicion -> IF LPAREN expresion RPAREN n_check_exp bloque . ELSE n_else bloque n_fill_end
    (67) condicion -> IF LPAREN expresion RPAREN n_check_exp bloque . n_fill_end
    (95) n_fill_end -> .

    ELSE            shift and go to state 196
    SEMICOLON       reduce using rule 95 (n_fill_end -> .)

    n_fill_end                     shift and go to state 197

state 173

    (18) bloque -> LBRACKET . estatuto_aux RBRACKET
    (19) bloque -> LBRACKET . RBRACKET
    (20) estatuto_aux -> . estatuto estatuto_aux
    (21) estatuto_aux -> . estatuto
    (22) estatuto -> . asignacion SEMICOLON
    (23) estatuto -> . condicion SEMICOLON
    (24) estatuto -> . escritura SEMICOLON
    (25) estatuto -> . lectura SEMICOLON
    (26) estatuto -> . return SEMICOLON
    (27) estatuto -> . for SEMICOLON
    (28) estatuto -> . while SEMICOLON
    (29) estatuto -> . call_module SEMICOLON
    (30) asignacion -> . ID n_seen_factor_id EQUAL n_add_operator expresion n_assign
    (66) condicion -> . IF LPAREN expresion RPAREN n_check_exp bloque ELSE n_else bloque n_fill_end
    (67) condicion -> . IF LPAREN expresion RPAREN n_check_exp bloque n_fill_end
    (71) escritura -> . PRINT LPAREN escritura_aux RPAREN
    (68) lectura -> . READ LPAREN lect_aux RPAREN
    (63) return -> . RETURN n_search_return_func LPAREN expresion RPAREN n_return_quad
    (64) for -> . FOR ID EQUAL expresion TO expresion DO bloque
    (65) while -> . WHILE n_salto_while LPAREN expresion RPAREN n_cond_while bloque n_ret_while
    (59) call_module -> . ID n_func_exist n_gen_era LPAREN aux_call_module n_verify_num_params RPAREN n_gen_gosub
    (60) call_module -> . ID n_func_exist n_gen_era LPAREN RPAREN n_gen_gosub

    RBRACKET        shift and go to state 199
    ID              shift and go to state 52
    IF              shift and go to state 53
    PRINT           shift and go to state 54
    READ            shift and go to state 55
    RETURN          shift and go to state 56
    FOR             shift and go to state 57
    WHILE           shift and go to state 58

    estatuto_aux                   shift and go to state 198
    estatuto                       shift and go to state 43
    asignacion                     shift and go to state 44
    condicion                      shift and go to state 45
    escritura                      shift and go to state 46
    lectura                        shift and go to state 47
    return                         shift and go to state 48
    for                            shift and go to state 49
    while                          shift and go to state 50
    call_module                    shift and go to state 51

state 174

    (31) expresion -> exp n_gen_and AND n_add_operator . expresion
    (31) expresion -> . exp n_gen_and AND n_add_operator expresion
    (32) expresion -> . exp n_gen_and
    (33) exp -> . exp_aux n_gen_or OR n_add_operator exp
    (34) exp -> . exp_aux n_gen_or
    (35) exp_aux -> . exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux
    (36) exp_aux -> . exp_aux2 n_gen_relational LESST n_add_operator exp_aux
    (37) exp_aux -> . exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux
    (38) exp_aux -> . exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux
    (39) exp_aux -> . exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux
    (40) exp_aux -> . exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux
    (41) exp_aux -> . exp_aux2 n_gen_relational
    (42) exp_aux2 -> . term n_gen_term PLUS n_add_operator exp_aux2
    (43) exp_aux2 -> . term n_gen_term MINUS n_add_operator exp_aux2
    (44) exp_aux2 -> . term n_gen_term
    (45) term -> . factor n_gen_factor MULTIPLY n_add_operator term
    (46) term -> . factor n_gen_factor DIVIDE n_add_operator term
    (47) term -> . factor n_gen_factor
    (48) factor -> . LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom
    (49) factor -> . CTEINT n_seen_factor_int
    (50) factor -> . CTEF n_seen_factor_float
    (51) factor -> . CTEC n_seen_factor_char
    (52) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 94
    CTEINT          shift and go to state 101
    CTEF            shift and go to state 102
    CTEC            shift and go to state 103
    ID              shift and go to state 104

    exp                            shift and go to state 96
    expresion                      shift and go to state 200
    exp_aux                        shift and go to state 97
    exp_aux2                       shift and go to state 98
    term                           shift and go to state 99
    factor                         shift and go to state 100

state 175

    (33) exp -> exp_aux n_gen_or OR n_add_operator . exp
    (33) exp -> . exp_aux n_gen_or OR n_add_operator exp
    (34) exp -> . exp_aux n_gen_or
    (35) exp_aux -> . exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux
    (36) exp_aux -> . exp_aux2 n_gen_relational LESST n_add_operator exp_aux
    (37) exp_aux -> . exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux
    (38) exp_aux -> . exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux
    (39) exp_aux -> . exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux
    (40) exp_aux -> . exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux
    (41) exp_aux -> . exp_aux2 n_gen_relational
    (42) exp_aux2 -> . term n_gen_term PLUS n_add_operator exp_aux2
    (43) exp_aux2 -> . term n_gen_term MINUS n_add_operator exp_aux2
    (44) exp_aux2 -> . term n_gen_term
    (45) term -> . factor n_gen_factor MULTIPLY n_add_operator term
    (46) term -> . factor n_gen_factor DIVIDE n_add_operator term
    (47) term -> . factor n_gen_factor
    (48) factor -> . LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom
    (49) factor -> . CTEINT n_seen_factor_int
    (50) factor -> . CTEF n_seen_factor_float
    (51) factor -> . CTEC n_seen_factor_char
    (52) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 94
    CTEINT          shift and go to state 101
    CTEF            shift and go to state 102
    CTEC            shift and go to state 103
    ID              shift and go to state 104

    exp_aux                        shift and go to state 97
    exp                            shift and go to state 201
    exp_aux2                       shift and go to state 98
    term                           shift and go to state 99
    factor                         shift and go to state 100

state 176

    (35) exp_aux -> exp_aux2 n_gen_relational GREATERT n_add_operator . exp_aux
    (35) exp_aux -> . exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux
    (36) exp_aux -> . exp_aux2 n_gen_relational LESST n_add_operator exp_aux
    (37) exp_aux -> . exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux
    (38) exp_aux -> . exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux
    (39) exp_aux -> . exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux
    (40) exp_aux -> . exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux
    (41) exp_aux -> . exp_aux2 n_gen_relational
    (42) exp_aux2 -> . term n_gen_term PLUS n_add_operator exp_aux2
    (43) exp_aux2 -> . term n_gen_term MINUS n_add_operator exp_aux2
    (44) exp_aux2 -> . term n_gen_term
    (45) term -> . factor n_gen_factor MULTIPLY n_add_operator term
    (46) term -> . factor n_gen_factor DIVIDE n_add_operator term
    (47) term -> . factor n_gen_factor
    (48) factor -> . LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom
    (49) factor -> . CTEINT n_seen_factor_int
    (50) factor -> . CTEF n_seen_factor_float
    (51) factor -> . CTEC n_seen_factor_char
    (52) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 94
    CTEINT          shift and go to state 101
    CTEF            shift and go to state 102
    CTEC            shift and go to state 103
    ID              shift and go to state 104

    exp_aux2                       shift and go to state 98
    exp_aux                        shift and go to state 202
    term                           shift and go to state 99
    factor                         shift and go to state 100

state 177

    (36) exp_aux -> exp_aux2 n_gen_relational LESST n_add_operator . exp_aux
    (35) exp_aux -> . exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux
    (36) exp_aux -> . exp_aux2 n_gen_relational LESST n_add_operator exp_aux
    (37) exp_aux -> . exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux
    (38) exp_aux -> . exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux
    (39) exp_aux -> . exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux
    (40) exp_aux -> . exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux
    (41) exp_aux -> . exp_aux2 n_gen_relational
    (42) exp_aux2 -> . term n_gen_term PLUS n_add_operator exp_aux2
    (43) exp_aux2 -> . term n_gen_term MINUS n_add_operator exp_aux2
    (44) exp_aux2 -> . term n_gen_term
    (45) term -> . factor n_gen_factor MULTIPLY n_add_operator term
    (46) term -> . factor n_gen_factor DIVIDE n_add_operator term
    (47) term -> . factor n_gen_factor
    (48) factor -> . LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom
    (49) factor -> . CTEINT n_seen_factor_int
    (50) factor -> . CTEF n_seen_factor_float
    (51) factor -> . CTEC n_seen_factor_char
    (52) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 94
    CTEINT          shift and go to state 101
    CTEF            shift and go to state 102
    CTEC            shift and go to state 103
    ID              shift and go to state 104

    exp_aux2                       shift and go to state 98
    exp_aux                        shift and go to state 203
    term                           shift and go to state 99
    factor                         shift and go to state 100

state 178

    (37) exp_aux -> exp_aux2 n_gen_relational NOTEQUAL n_add_operator . exp_aux
    (35) exp_aux -> . exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux
    (36) exp_aux -> . exp_aux2 n_gen_relational LESST n_add_operator exp_aux
    (37) exp_aux -> . exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux
    (38) exp_aux -> . exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux
    (39) exp_aux -> . exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux
    (40) exp_aux -> . exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux
    (41) exp_aux -> . exp_aux2 n_gen_relational
    (42) exp_aux2 -> . term n_gen_term PLUS n_add_operator exp_aux2
    (43) exp_aux2 -> . term n_gen_term MINUS n_add_operator exp_aux2
    (44) exp_aux2 -> . term n_gen_term
    (45) term -> . factor n_gen_factor MULTIPLY n_add_operator term
    (46) term -> . factor n_gen_factor DIVIDE n_add_operator term
    (47) term -> . factor n_gen_factor
    (48) factor -> . LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom
    (49) factor -> . CTEINT n_seen_factor_int
    (50) factor -> . CTEF n_seen_factor_float
    (51) factor -> . CTEC n_seen_factor_char
    (52) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 94
    CTEINT          shift and go to state 101
    CTEF            shift and go to state 102
    CTEC            shift and go to state 103
    ID              shift and go to state 104

    exp_aux2                       shift and go to state 98
    exp_aux                        shift and go to state 204
    term                           shift and go to state 99
    factor                         shift and go to state 100

state 179

    (38) exp_aux -> exp_aux2 n_gen_relational DBEQUALS n_add_operator . exp_aux
    (35) exp_aux -> . exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux
    (36) exp_aux -> . exp_aux2 n_gen_relational LESST n_add_operator exp_aux
    (37) exp_aux -> . exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux
    (38) exp_aux -> . exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux
    (39) exp_aux -> . exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux
    (40) exp_aux -> . exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux
    (41) exp_aux -> . exp_aux2 n_gen_relational
    (42) exp_aux2 -> . term n_gen_term PLUS n_add_operator exp_aux2
    (43) exp_aux2 -> . term n_gen_term MINUS n_add_operator exp_aux2
    (44) exp_aux2 -> . term n_gen_term
    (45) term -> . factor n_gen_factor MULTIPLY n_add_operator term
    (46) term -> . factor n_gen_factor DIVIDE n_add_operator term
    (47) term -> . factor n_gen_factor
    (48) factor -> . LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom
    (49) factor -> . CTEINT n_seen_factor_int
    (50) factor -> . CTEF n_seen_factor_float
    (51) factor -> . CTEC n_seen_factor_char
    (52) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 94
    CTEINT          shift and go to state 101
    CTEF            shift and go to state 102
    CTEC            shift and go to state 103
    ID              shift and go to state 104

    exp_aux2                       shift and go to state 98
    exp_aux                        shift and go to state 205
    term                           shift and go to state 99
    factor                         shift and go to state 100

state 180

    (39) exp_aux -> exp_aux2 n_gen_relational GREATEREQUAL n_add_operator . exp_aux
    (35) exp_aux -> . exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux
    (36) exp_aux -> . exp_aux2 n_gen_relational LESST n_add_operator exp_aux
    (37) exp_aux -> . exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux
    (38) exp_aux -> . exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux
    (39) exp_aux -> . exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux
    (40) exp_aux -> . exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux
    (41) exp_aux -> . exp_aux2 n_gen_relational
    (42) exp_aux2 -> . term n_gen_term PLUS n_add_operator exp_aux2
    (43) exp_aux2 -> . term n_gen_term MINUS n_add_operator exp_aux2
    (44) exp_aux2 -> . term n_gen_term
    (45) term -> . factor n_gen_factor MULTIPLY n_add_operator term
    (46) term -> . factor n_gen_factor DIVIDE n_add_operator term
    (47) term -> . factor n_gen_factor
    (48) factor -> . LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom
    (49) factor -> . CTEINT n_seen_factor_int
    (50) factor -> . CTEF n_seen_factor_float
    (51) factor -> . CTEC n_seen_factor_char
    (52) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 94
    CTEINT          shift and go to state 101
    CTEF            shift and go to state 102
    CTEC            shift and go to state 103
    ID              shift and go to state 104

    exp_aux2                       shift and go to state 98
    exp_aux                        shift and go to state 206
    term                           shift and go to state 99
    factor                         shift and go to state 100

state 181

    (40) exp_aux -> exp_aux2 n_gen_relational LESSEQUAL n_add_operator . exp_aux
    (35) exp_aux -> . exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux
    (36) exp_aux -> . exp_aux2 n_gen_relational LESST n_add_operator exp_aux
    (37) exp_aux -> . exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux
    (38) exp_aux -> . exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux
    (39) exp_aux -> . exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux
    (40) exp_aux -> . exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux
    (41) exp_aux -> . exp_aux2 n_gen_relational
    (42) exp_aux2 -> . term n_gen_term PLUS n_add_operator exp_aux2
    (43) exp_aux2 -> . term n_gen_term MINUS n_add_operator exp_aux2
    (44) exp_aux2 -> . term n_gen_term
    (45) term -> . factor n_gen_factor MULTIPLY n_add_operator term
    (46) term -> . factor n_gen_factor DIVIDE n_add_operator term
    (47) term -> . factor n_gen_factor
    (48) factor -> . LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom
    (49) factor -> . CTEINT n_seen_factor_int
    (50) factor -> . CTEF n_seen_factor_float
    (51) factor -> . CTEC n_seen_factor_char
    (52) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 94
    CTEINT          shift and go to state 101
    CTEF            shift and go to state 102
    CTEC            shift and go to state 103
    ID              shift and go to state 104

    exp_aux2                       shift and go to state 98
    exp_aux                        shift and go to state 207
    term                           shift and go to state 99
    factor                         shift and go to state 100

state 182

    (42) exp_aux2 -> term n_gen_term PLUS n_add_operator . exp_aux2
    (42) exp_aux2 -> . term n_gen_term PLUS n_add_operator exp_aux2
    (43) exp_aux2 -> . term n_gen_term MINUS n_add_operator exp_aux2
    (44) exp_aux2 -> . term n_gen_term
    (45) term -> . factor n_gen_factor MULTIPLY n_add_operator term
    (46) term -> . factor n_gen_factor DIVIDE n_add_operator term
    (47) term -> . factor n_gen_factor
    (48) factor -> . LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom
    (49) factor -> . CTEINT n_seen_factor_int
    (50) factor -> . CTEF n_seen_factor_float
    (51) factor -> . CTEC n_seen_factor_char
    (52) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 94
    CTEINT          shift and go to state 101
    CTEF            shift and go to state 102
    CTEC            shift and go to state 103
    ID              shift and go to state 104

    term                           shift and go to state 99
    exp_aux2                       shift and go to state 208
    factor                         shift and go to state 100

state 183

    (43) exp_aux2 -> term n_gen_term MINUS n_add_operator . exp_aux2
    (42) exp_aux2 -> . term n_gen_term PLUS n_add_operator exp_aux2
    (43) exp_aux2 -> . term n_gen_term MINUS n_add_operator exp_aux2
    (44) exp_aux2 -> . term n_gen_term
    (45) term -> . factor n_gen_factor MULTIPLY n_add_operator term
    (46) term -> . factor n_gen_factor DIVIDE n_add_operator term
    (47) term -> . factor n_gen_factor
    (48) factor -> . LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom
    (49) factor -> . CTEINT n_seen_factor_int
    (50) factor -> . CTEF n_seen_factor_float
    (51) factor -> . CTEC n_seen_factor_char
    (52) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 94
    CTEINT          shift and go to state 101
    CTEF            shift and go to state 102
    CTEC            shift and go to state 103
    ID              shift and go to state 104

    term                           shift and go to state 99
    exp_aux2                       shift and go to state 209
    factor                         shift and go to state 100

state 184

    (45) term -> factor n_gen_factor MULTIPLY n_add_operator . term
    (45) term -> . factor n_gen_factor MULTIPLY n_add_operator term
    (46) term -> . factor n_gen_factor DIVIDE n_add_operator term
    (47) term -> . factor n_gen_factor
    (48) factor -> . LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom
    (49) factor -> . CTEINT n_seen_factor_int
    (50) factor -> . CTEF n_seen_factor_float
    (51) factor -> . CTEC n_seen_factor_char
    (52) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 94
    CTEINT          shift and go to state 101
    CTEF            shift and go to state 102
    CTEC            shift and go to state 103
    ID              shift and go to state 104

    factor                         shift and go to state 100
    term                           shift and go to state 210

state 185

    (46) term -> factor n_gen_factor DIVIDE n_add_operator . term
    (45) term -> . factor n_gen_factor MULTIPLY n_add_operator term
    (46) term -> . factor n_gen_factor DIVIDE n_add_operator term
    (47) term -> . factor n_gen_factor
    (48) factor -> . LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom
    (49) factor -> . CTEINT n_seen_factor_int
    (50) factor -> . CTEF n_seen_factor_float
    (51) factor -> . CTEC n_seen_factor_char
    (52) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 94
    CTEINT          shift and go to state 101
    CTEF            shift and go to state 102
    CTEC            shift and go to state 103
    ID              shift and go to state 104

    factor                         shift and go to state 100
    term                           shift and go to state 211

state 186

    (72) escritura_aux -> expresion n_print COMA escritura_aux .

    RPAREN          reduce using rule 72 (escritura_aux -> expresion n_print COMA escritura_aux .)


state 187

    (73) escritura_aux -> CTESTRING n_seen_string n_print COMA . escritura_aux
    (72) escritura_aux -> . expresion n_print COMA escritura_aux
    (73) escritura_aux -> . CTESTRING n_seen_string n_print COMA escritura_aux
    (74) escritura_aux -> . expresion n_print
    (75) escritura_aux -> . CTESTRING n_seen_string n_print
    (31) expresion -> . exp n_gen_and AND n_add_operator expresion
    (32) expresion -> . exp n_gen_and
    (33) exp -> . exp_aux n_gen_or OR n_add_operator exp
    (34) exp -> . exp_aux n_gen_or
    (35) exp_aux -> . exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux
    (36) exp_aux -> . exp_aux2 n_gen_relational LESST n_add_operator exp_aux
    (37) exp_aux -> . exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux
    (38) exp_aux -> . exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux
    (39) exp_aux -> . exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux
    (40) exp_aux -> . exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux
    (41) exp_aux -> . exp_aux2 n_gen_relational
    (42) exp_aux2 -> . term n_gen_term PLUS n_add_operator exp_aux2
    (43) exp_aux2 -> . term n_gen_term MINUS n_add_operator exp_aux2
    (44) exp_aux2 -> . term n_gen_term
    (45) term -> . factor n_gen_factor MULTIPLY n_add_operator term
    (46) term -> . factor n_gen_factor DIVIDE n_add_operator term
    (47) term -> . factor n_gen_factor
    (48) factor -> . LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom
    (49) factor -> . CTEINT n_seen_factor_int
    (50) factor -> . CTEF n_seen_factor_float
    (51) factor -> . CTEC n_seen_factor_char
    (52) factor -> . ID n_seen_factor_id

    CTESTRING       shift and go to state 107
    LPAREN          shift and go to state 94
    CTEINT          shift and go to state 101
    CTEF            shift and go to state 102
    CTEC            shift and go to state 103
    ID              shift and go to state 104

    escritura_aux                  shift and go to state 212
    expresion                      shift and go to state 106
    exp                            shift and go to state 96
    exp_aux                        shift and go to state 97
    exp_aux2                       shift and go to state 98
    term                           shift and go to state 99
    factor                         shift and go to state 100

state 188

    (70) lect_aux -> ID n_read COMA lect_aux .

    RPAREN          reduce using rule 70 (lect_aux -> ID n_read COMA lect_aux .)


state 189

    (63) return -> RETURN n_search_return_func LPAREN expresion RPAREN n_return_quad .

    SEMICOLON       reduce using rule 63 (return -> RETURN n_search_return_func LPAREN expresion RPAREN n_return_quad .)


state 190

    (64) for -> FOR ID EQUAL expresion TO expresion . DO bloque

    DO              shift and go to state 213


state 191

    (65) while -> WHILE n_salto_while LPAREN expresion RPAREN n_cond_while . bloque n_ret_while
    (18) bloque -> . LBRACKET estatuto_aux RBRACKET
    (19) bloque -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 173

    bloque                         shift and go to state 214

state 192

    (9) vars_func -> ID n_seen_var_name COLON tipo n_set_var_type n_save_param_type . COMA vars_func
    (10) vars_func -> ID n_seen_var_name COLON tipo n_set_var_type n_save_param_type .

    COMA            shift and go to state 215
    RPAREN          reduce using rule 10 (vars_func -> ID n_seen_var_name COLON tipo n_set_var_type n_save_param_type .)


state 193

    (59) call_module -> ID n_func_exist n_gen_era LPAREN aux_call_module n_verify_num_params RPAREN . n_gen_gosub
    (111) n_gen_gosub -> .

    SEMICOLON       reduce using rule 111 (n_gen_gosub -> .)

    n_gen_gosub                    shift and go to state 216

state 194

    (62) aux_call_module -> expresion n_check_param n_param_counter . COMA aux_call_module

    COMA            shift and go to state 217


state 195

    (48) factor -> LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom .

    MULTIPLY        reduce using rule 48 (factor -> LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom .)
    DIVIDE          reduce using rule 48 (factor -> LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom .)
    PLUS            reduce using rule 48 (factor -> LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom .)
    MINUS           reduce using rule 48 (factor -> LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom .)
    GREATERT        reduce using rule 48 (factor -> LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom .)
    LESST           reduce using rule 48 (factor -> LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom .)
    NOTEQUAL        reduce using rule 48 (factor -> LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom .)
    DBEQUALS        reduce using rule 48 (factor -> LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom .)
    GREATEREQUAL    reduce using rule 48 (factor -> LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom .)
    LESSEQUAL       reduce using rule 48 (factor -> LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom .)
    OR              reduce using rule 48 (factor -> LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom .)
    AND             reduce using rule 48 (factor -> LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom .)
    RPAREN          reduce using rule 48 (factor -> LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom .)
    COMA            reduce using rule 48 (factor -> LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom .)
    TO              reduce using rule 48 (factor -> LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom .)
    SEMICOLON       reduce using rule 48 (factor -> LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom .)
    DO              reduce using rule 48 (factor -> LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom .)


state 196

    (66) condicion -> IF LPAREN expresion RPAREN n_check_exp bloque ELSE . n_else bloque n_fill_end
    (96) n_else -> .

    LBRACKET        reduce using rule 96 (n_else -> .)

    n_else                         shift and go to state 218

state 197

    (67) condicion -> IF LPAREN expresion RPAREN n_check_exp bloque n_fill_end .

    SEMICOLON       reduce using rule 67 (condicion -> IF LPAREN expresion RPAREN n_check_exp bloque n_fill_end .)


state 198

    (18) bloque -> LBRACKET estatuto_aux . RBRACKET

    RBRACKET        shift and go to state 219


state 199

    (19) bloque -> LBRACKET RBRACKET .

    ELSE            reduce using rule 19 (bloque -> LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 19 (bloque -> LBRACKET RBRACKET .)


state 200

    (31) expresion -> exp n_gen_and AND n_add_operator expresion .

    RPAREN          reduce using rule 31 (expresion -> exp n_gen_and AND n_add_operator expresion .)
    COMA            reduce using rule 31 (expresion -> exp n_gen_and AND n_add_operator expresion .)
    TO              reduce using rule 31 (expresion -> exp n_gen_and AND n_add_operator expresion .)
    SEMICOLON       reduce using rule 31 (expresion -> exp n_gen_and AND n_add_operator expresion .)
    DO              reduce using rule 31 (expresion -> exp n_gen_and AND n_add_operator expresion .)


state 201

    (33) exp -> exp_aux n_gen_or OR n_add_operator exp .

    AND             reduce using rule 33 (exp -> exp_aux n_gen_or OR n_add_operator exp .)
    RPAREN          reduce using rule 33 (exp -> exp_aux n_gen_or OR n_add_operator exp .)
    COMA            reduce using rule 33 (exp -> exp_aux n_gen_or OR n_add_operator exp .)
    TO              reduce using rule 33 (exp -> exp_aux n_gen_or OR n_add_operator exp .)
    SEMICOLON       reduce using rule 33 (exp -> exp_aux n_gen_or OR n_add_operator exp .)
    DO              reduce using rule 33 (exp -> exp_aux n_gen_or OR n_add_operator exp .)


state 202

    (35) exp_aux -> exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux .

    OR              reduce using rule 35 (exp_aux -> exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux .)
    AND             reduce using rule 35 (exp_aux -> exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux .)
    RPAREN          reduce using rule 35 (exp_aux -> exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux .)
    COMA            reduce using rule 35 (exp_aux -> exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux .)
    TO              reduce using rule 35 (exp_aux -> exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux .)
    SEMICOLON       reduce using rule 35 (exp_aux -> exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux .)
    DO              reduce using rule 35 (exp_aux -> exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux .)


state 203

    (36) exp_aux -> exp_aux2 n_gen_relational LESST n_add_operator exp_aux .

    OR              reduce using rule 36 (exp_aux -> exp_aux2 n_gen_relational LESST n_add_operator exp_aux .)
    AND             reduce using rule 36 (exp_aux -> exp_aux2 n_gen_relational LESST n_add_operator exp_aux .)
    RPAREN          reduce using rule 36 (exp_aux -> exp_aux2 n_gen_relational LESST n_add_operator exp_aux .)
    COMA            reduce using rule 36 (exp_aux -> exp_aux2 n_gen_relational LESST n_add_operator exp_aux .)
    TO              reduce using rule 36 (exp_aux -> exp_aux2 n_gen_relational LESST n_add_operator exp_aux .)
    SEMICOLON       reduce using rule 36 (exp_aux -> exp_aux2 n_gen_relational LESST n_add_operator exp_aux .)
    DO              reduce using rule 36 (exp_aux -> exp_aux2 n_gen_relational LESST n_add_operator exp_aux .)


state 204

    (37) exp_aux -> exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux .

    OR              reduce using rule 37 (exp_aux -> exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux .)
    AND             reduce using rule 37 (exp_aux -> exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux .)
    RPAREN          reduce using rule 37 (exp_aux -> exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux .)
    COMA            reduce using rule 37 (exp_aux -> exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux .)
    TO              reduce using rule 37 (exp_aux -> exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux .)
    SEMICOLON       reduce using rule 37 (exp_aux -> exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux .)
    DO              reduce using rule 37 (exp_aux -> exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux .)


state 205

    (38) exp_aux -> exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux .

    OR              reduce using rule 38 (exp_aux -> exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux .)
    AND             reduce using rule 38 (exp_aux -> exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux .)
    RPAREN          reduce using rule 38 (exp_aux -> exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux .)
    COMA            reduce using rule 38 (exp_aux -> exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux .)
    TO              reduce using rule 38 (exp_aux -> exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux .)
    SEMICOLON       reduce using rule 38 (exp_aux -> exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux .)
    DO              reduce using rule 38 (exp_aux -> exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux .)


state 206

    (39) exp_aux -> exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux .

    OR              reduce using rule 39 (exp_aux -> exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux .)
    AND             reduce using rule 39 (exp_aux -> exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux .)
    RPAREN          reduce using rule 39 (exp_aux -> exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux .)
    COMA            reduce using rule 39 (exp_aux -> exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux .)
    TO              reduce using rule 39 (exp_aux -> exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux .)
    SEMICOLON       reduce using rule 39 (exp_aux -> exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux .)
    DO              reduce using rule 39 (exp_aux -> exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux .)


state 207

    (40) exp_aux -> exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux .

    OR              reduce using rule 40 (exp_aux -> exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux .)
    AND             reduce using rule 40 (exp_aux -> exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux .)
    RPAREN          reduce using rule 40 (exp_aux -> exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux .)
    COMA            reduce using rule 40 (exp_aux -> exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux .)
    TO              reduce using rule 40 (exp_aux -> exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux .)
    SEMICOLON       reduce using rule 40 (exp_aux -> exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux .)
    DO              reduce using rule 40 (exp_aux -> exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux .)


state 208

    (42) exp_aux2 -> term n_gen_term PLUS n_add_operator exp_aux2 .

    GREATERT        reduce using rule 42 (exp_aux2 -> term n_gen_term PLUS n_add_operator exp_aux2 .)
    LESST           reduce using rule 42 (exp_aux2 -> term n_gen_term PLUS n_add_operator exp_aux2 .)
    NOTEQUAL        reduce using rule 42 (exp_aux2 -> term n_gen_term PLUS n_add_operator exp_aux2 .)
    DBEQUALS        reduce using rule 42 (exp_aux2 -> term n_gen_term PLUS n_add_operator exp_aux2 .)
    GREATEREQUAL    reduce using rule 42 (exp_aux2 -> term n_gen_term PLUS n_add_operator exp_aux2 .)
    LESSEQUAL       reduce using rule 42 (exp_aux2 -> term n_gen_term PLUS n_add_operator exp_aux2 .)
    OR              reduce using rule 42 (exp_aux2 -> term n_gen_term PLUS n_add_operator exp_aux2 .)
    AND             reduce using rule 42 (exp_aux2 -> term n_gen_term PLUS n_add_operator exp_aux2 .)
    RPAREN          reduce using rule 42 (exp_aux2 -> term n_gen_term PLUS n_add_operator exp_aux2 .)
    COMA            reduce using rule 42 (exp_aux2 -> term n_gen_term PLUS n_add_operator exp_aux2 .)
    TO              reduce using rule 42 (exp_aux2 -> term n_gen_term PLUS n_add_operator exp_aux2 .)
    SEMICOLON       reduce using rule 42 (exp_aux2 -> term n_gen_term PLUS n_add_operator exp_aux2 .)
    DO              reduce using rule 42 (exp_aux2 -> term n_gen_term PLUS n_add_operator exp_aux2 .)


state 209

    (43) exp_aux2 -> term n_gen_term MINUS n_add_operator exp_aux2 .

    GREATERT        reduce using rule 43 (exp_aux2 -> term n_gen_term MINUS n_add_operator exp_aux2 .)
    LESST           reduce using rule 43 (exp_aux2 -> term n_gen_term MINUS n_add_operator exp_aux2 .)
    NOTEQUAL        reduce using rule 43 (exp_aux2 -> term n_gen_term MINUS n_add_operator exp_aux2 .)
    DBEQUALS        reduce using rule 43 (exp_aux2 -> term n_gen_term MINUS n_add_operator exp_aux2 .)
    GREATEREQUAL    reduce using rule 43 (exp_aux2 -> term n_gen_term MINUS n_add_operator exp_aux2 .)
    LESSEQUAL       reduce using rule 43 (exp_aux2 -> term n_gen_term MINUS n_add_operator exp_aux2 .)
    OR              reduce using rule 43 (exp_aux2 -> term n_gen_term MINUS n_add_operator exp_aux2 .)
    AND             reduce using rule 43 (exp_aux2 -> term n_gen_term MINUS n_add_operator exp_aux2 .)
    RPAREN          reduce using rule 43 (exp_aux2 -> term n_gen_term MINUS n_add_operator exp_aux2 .)
    COMA            reduce using rule 43 (exp_aux2 -> term n_gen_term MINUS n_add_operator exp_aux2 .)
    TO              reduce using rule 43 (exp_aux2 -> term n_gen_term MINUS n_add_operator exp_aux2 .)
    SEMICOLON       reduce using rule 43 (exp_aux2 -> term n_gen_term MINUS n_add_operator exp_aux2 .)
    DO              reduce using rule 43 (exp_aux2 -> term n_gen_term MINUS n_add_operator exp_aux2 .)


state 210

    (45) term -> factor n_gen_factor MULTIPLY n_add_operator term .

    PLUS            reduce using rule 45 (term -> factor n_gen_factor MULTIPLY n_add_operator term .)
    MINUS           reduce using rule 45 (term -> factor n_gen_factor MULTIPLY n_add_operator term .)
    GREATERT        reduce using rule 45 (term -> factor n_gen_factor MULTIPLY n_add_operator term .)
    LESST           reduce using rule 45 (term -> factor n_gen_factor MULTIPLY n_add_operator term .)
    NOTEQUAL        reduce using rule 45 (term -> factor n_gen_factor MULTIPLY n_add_operator term .)
    DBEQUALS        reduce using rule 45 (term -> factor n_gen_factor MULTIPLY n_add_operator term .)
    GREATEREQUAL    reduce using rule 45 (term -> factor n_gen_factor MULTIPLY n_add_operator term .)
    LESSEQUAL       reduce using rule 45 (term -> factor n_gen_factor MULTIPLY n_add_operator term .)
    OR              reduce using rule 45 (term -> factor n_gen_factor MULTIPLY n_add_operator term .)
    AND             reduce using rule 45 (term -> factor n_gen_factor MULTIPLY n_add_operator term .)
    RPAREN          reduce using rule 45 (term -> factor n_gen_factor MULTIPLY n_add_operator term .)
    COMA            reduce using rule 45 (term -> factor n_gen_factor MULTIPLY n_add_operator term .)
    TO              reduce using rule 45 (term -> factor n_gen_factor MULTIPLY n_add_operator term .)
    SEMICOLON       reduce using rule 45 (term -> factor n_gen_factor MULTIPLY n_add_operator term .)
    DO              reduce using rule 45 (term -> factor n_gen_factor MULTIPLY n_add_operator term .)


state 211

    (46) term -> factor n_gen_factor DIVIDE n_add_operator term .

    PLUS            reduce using rule 46 (term -> factor n_gen_factor DIVIDE n_add_operator term .)
    MINUS           reduce using rule 46 (term -> factor n_gen_factor DIVIDE n_add_operator term .)
    GREATERT        reduce using rule 46 (term -> factor n_gen_factor DIVIDE n_add_operator term .)
    LESST           reduce using rule 46 (term -> factor n_gen_factor DIVIDE n_add_operator term .)
    NOTEQUAL        reduce using rule 46 (term -> factor n_gen_factor DIVIDE n_add_operator term .)
    DBEQUALS        reduce using rule 46 (term -> factor n_gen_factor DIVIDE n_add_operator term .)
    GREATEREQUAL    reduce using rule 46 (term -> factor n_gen_factor DIVIDE n_add_operator term .)
    LESSEQUAL       reduce using rule 46 (term -> factor n_gen_factor DIVIDE n_add_operator term .)
    OR              reduce using rule 46 (term -> factor n_gen_factor DIVIDE n_add_operator term .)
    AND             reduce using rule 46 (term -> factor n_gen_factor DIVIDE n_add_operator term .)
    RPAREN          reduce using rule 46 (term -> factor n_gen_factor DIVIDE n_add_operator term .)
    COMA            reduce using rule 46 (term -> factor n_gen_factor DIVIDE n_add_operator term .)
    TO              reduce using rule 46 (term -> factor n_gen_factor DIVIDE n_add_operator term .)
    SEMICOLON       reduce using rule 46 (term -> factor n_gen_factor DIVIDE n_add_operator term .)
    DO              reduce using rule 46 (term -> factor n_gen_factor DIVIDE n_add_operator term .)


state 212

    (73) escritura_aux -> CTESTRING n_seen_string n_print COMA escritura_aux .

    RPAREN          reduce using rule 73 (escritura_aux -> CTESTRING n_seen_string n_print COMA escritura_aux .)


state 213

    (64) for -> FOR ID EQUAL expresion TO expresion DO . bloque
    (18) bloque -> . LBRACKET estatuto_aux RBRACKET
    (19) bloque -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 173

    bloque                         shift and go to state 220

state 214

    (65) while -> WHILE n_salto_while LPAREN expresion RPAREN n_cond_while bloque . n_ret_while
    (99) n_ret_while -> .

    SEMICOLON       reduce using rule 99 (n_ret_while -> .)

    n_ret_while                    shift and go to state 221

state 215

    (9) vars_func -> ID n_seen_var_name COLON tipo n_set_var_type n_save_param_type COMA . vars_func
    (9) vars_func -> . ID n_seen_var_name COLON tipo n_set_var_type n_save_param_type COMA vars_func
    (10) vars_func -> . ID n_seen_var_name COLON tipo n_set_var_type n_save_param_type

    ID              shift and go to state 64

    vars_func                      shift and go to state 222

state 216

    (59) call_module -> ID n_func_exist n_gen_era LPAREN aux_call_module n_verify_num_params RPAREN n_gen_gosub .

    SEMICOLON       reduce using rule 59 (call_module -> ID n_func_exist n_gen_era LPAREN aux_call_module n_verify_num_params RPAREN n_gen_gosub .)


state 217

    (62) aux_call_module -> expresion n_check_param n_param_counter COMA . aux_call_module
    (61) aux_call_module -> . expresion n_check_param
    (62) aux_call_module -> . expresion n_check_param n_param_counter COMA aux_call_module
    (31) expresion -> . exp n_gen_and AND n_add_operator expresion
    (32) expresion -> . exp n_gen_and
    (33) exp -> . exp_aux n_gen_or OR n_add_operator exp
    (34) exp -> . exp_aux n_gen_or
    (35) exp_aux -> . exp_aux2 n_gen_relational GREATERT n_add_operator exp_aux
    (36) exp_aux -> . exp_aux2 n_gen_relational LESST n_add_operator exp_aux
    (37) exp_aux -> . exp_aux2 n_gen_relational NOTEQUAL n_add_operator exp_aux
    (38) exp_aux -> . exp_aux2 n_gen_relational DBEQUALS n_add_operator exp_aux
    (39) exp_aux -> . exp_aux2 n_gen_relational GREATEREQUAL n_add_operator exp_aux
    (40) exp_aux -> . exp_aux2 n_gen_relational LESSEQUAL n_add_operator exp_aux
    (41) exp_aux -> . exp_aux2 n_gen_relational
    (42) exp_aux2 -> . term n_gen_term PLUS n_add_operator exp_aux2
    (43) exp_aux2 -> . term n_gen_term MINUS n_add_operator exp_aux2
    (44) exp_aux2 -> . term n_gen_term
    (45) term -> . factor n_gen_factor MULTIPLY n_add_operator term
    (46) term -> . factor n_gen_factor DIVIDE n_add_operator term
    (47) term -> . factor n_gen_factor
    (48) factor -> . LPAREN n_push_fake_bottom expresion RPAREN n_pop_fake_bottom
    (49) factor -> . CTEINT n_seen_factor_int
    (50) factor -> . CTEF n_seen_factor_float
    (51) factor -> . CTEC n_seen_factor_char
    (52) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 94
    CTEINT          shift and go to state 101
    CTEF            shift and go to state 102
    CTEC            shift and go to state 103
    ID              shift and go to state 104

    expresion                      shift and go to state 144
    aux_call_module                shift and go to state 223
    exp                            shift and go to state 96
    exp_aux                        shift and go to state 97
    exp_aux2                       shift and go to state 98
    term                           shift and go to state 99
    factor                         shift and go to state 100

state 218

    (66) condicion -> IF LPAREN expresion RPAREN n_check_exp bloque ELSE n_else . bloque n_fill_end
    (18) bloque -> . LBRACKET estatuto_aux RBRACKET
    (19) bloque -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 173

    bloque                         shift and go to state 224

state 219

    (18) bloque -> LBRACKET estatuto_aux RBRACKET .

    ELSE            reduce using rule 18 (bloque -> LBRACKET estatuto_aux RBRACKET .)
    SEMICOLON       reduce using rule 18 (bloque -> LBRACKET estatuto_aux RBRACKET .)


state 220

    (64) for -> FOR ID EQUAL expresion TO expresion DO bloque .

    SEMICOLON       reduce using rule 64 (for -> FOR ID EQUAL expresion TO expresion DO bloque .)


state 221

    (65) while -> WHILE n_salto_while LPAREN expresion RPAREN n_cond_while bloque n_ret_while .

    SEMICOLON       reduce using rule 65 (while -> WHILE n_salto_while LPAREN expresion RPAREN n_cond_while bloque n_ret_while .)


state 222

    (9) vars_func -> ID n_seen_var_name COLON tipo n_set_var_type n_save_param_type COMA vars_func .

    RPAREN          reduce using rule 9 (vars_func -> ID n_seen_var_name COLON tipo n_set_var_type n_save_param_type COMA vars_func .)


state 223

    (62) aux_call_module -> expresion n_check_param n_param_counter COMA aux_call_module .

    RPAREN          reduce using rule 62 (aux_call_module -> expresion n_check_param n_param_counter COMA aux_call_module .)


state 224

    (66) condicion -> IF LPAREN expresion RPAREN n_check_exp bloque ELSE n_else bloque . n_fill_end
    (95) n_fill_end -> .

    SEMICOLON       reduce using rule 95 (n_fill_end -> .)

    n_fill_end                     shift and go to state 225

state 225

    (66) condicion -> IF LPAREN expresion RPAREN n_check_exp bloque ELSE n_else bloque n_fill_end .

    SEMICOLON       reduce using rule 66 (condicion -> IF LPAREN expresion RPAREN n_check_exp bloque ELSE n_else bloque n_fill_end .)

