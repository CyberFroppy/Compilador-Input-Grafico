Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    DOT
    CHAR
    THEN
    DO
    WRITE
    READ

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM ID SEMICOLON vars module main
Rule 2     programa -> PROGRAM ID SEMICOLON module main
Rule 3     programa -> PROGRAM ID SEMICOLON vars main
Rule 4     programa -> PROGRAM ID SEMICOLON main
Rule 5     main -> MAIN bloque_module
Rule 6     vars -> VAR vars_aux
Rule 7     vars_aux -> vars_aux2 vars_aux
Rule 8     vars_aux -> vars_aux2
Rule 9     vars_aux2 -> ID COMA vars_aux2
Rule 10    vars_aux2 -> ID COLON tipo SEMICOLON
Rule 11    tipo -> INT
Rule 12    tipo -> FLOAT
Rule 13    bloque_module -> LBRACKET estatuto_module_aux RBRACKET
Rule 14    bloque_module -> LBRACKET RBRACKET
Rule 15    estatuto_module_aux -> estatuto_module estatuto_module_aux
Rule 16    estatuto_module_aux -> estatuto_module
Rule 17    estatuto_module -> estatuto
Rule 18    estatuto_module -> vars
Rule 19    bloque -> LBRACKET estatuto_aux RBRACKET
Rule 20    bloque -> LBRACKET RBRACKET
Rule 21    estatuto_aux -> estatuto estatuto_aux
Rule 22    estatuto_aux -> estatuto
Rule 23    estatuto -> asignacion SEMICOLON
Rule 24    estatuto -> condicion SEMICOLON
Rule 25    estatuto -> escritura SEMICOLON
Rule 26    estatuto -> return SEMICOLON
Rule 27    estatuto -> for SEMICOLON
Rule 28    estatuto -> while SEMICOLON
Rule 29    asignacion -> ID EQUAL expresion
Rule 30    expresion -> exp AND expresion
Rule 31    expresion -> exp
Rule 32    exp -> exp_aux OR exp
Rule 33    exp -> exp_aux
Rule 34    exp_aux -> exp_aux2 GREATERT exp_aux2
Rule 35    exp_aux -> exp_aux2 LESST exp_aux2
Rule 36    exp_aux -> exp_aux2 NOTEQUAL exp_aux2
Rule 37    exp_aux -> exp_aux2 DBEQUALS exp_aux2
Rule 38    exp_aux -> exp_aux2
Rule 39    exp_aux2 -> term PLUS exp_aux2
Rule 40    exp_aux2 -> term MINUS exp_aux2
Rule 41    exp_aux2 -> term
Rule 42    term -> factor MULTIPLY term
Rule 43    term -> factor DIVIDE term
Rule 44    term -> factor
Rule 45    factor -> LPAREN expresion RPAREN
Rule 46    factor -> CTEINT
Rule 47    factor -> CTEF
Rule 48    module -> MODULE VOID ID LPAREN vars RPAREN estatuto_module module
Rule 49    module -> MODULE tipo ID LPAREN vars RPAREN estatuto_module module
Rule 50    module -> MODULE VOID ID LPAREN vars RPAREN estatuto_module
Rule 51    module -> MODULE tipo ID LPAREN vars RPAREN estatuto_module
Rule 52    return -> RETURN expresion
Rule 53    for -> FOR asignacion TO CTEINT LBRACKET estatuto RBRACKET
Rule 54    while -> WHILE LPAREN expresion RPAREN LBRACKET estatuto RBRACKET
Rule 55    condicion -> IF LPAREN expresion RPAREN bloque ELSE bloque
Rule 56    condicion -> IF LPAREN expresion RPAREN bloque
Rule 57    escritura -> PRINT LPAREN escritura_aux RPAREN
Rule 58    escritura_aux -> expresion escritura_aux2
Rule 59    escritura_aux -> CTESTRING escritura_aux2
Rule 60    escritura_aux -> expresion
Rule 61    escritura_aux -> CTESTRING
Rule 62    escritura_aux2 -> COMA escritura_aux

Terminals, with rules where they appear

AND                  : 30
CHAR                 : 
COLON                : 10
COMA                 : 9 62
COMMENT              : 
CTEF                 : 47
CTEINT               : 46 53
CTESTRING            : 59 61
DBEQUALS             : 37
DIVIDE               : 43
DO                   : 
DOT                  : 
ELSE                 : 55
EQUAL                : 29
FLOAT                : 12
FOR                  : 53
GREATERT             : 34
ID                   : 1 2 3 4 9 10 29 48 49 50 51
IF                   : 55 56
INT                  : 11
LBRACKET             : 13 14 19 20 53 54
LESST                : 35
LPAREN               : 45 48 49 50 51 54 55 56 57
MAIN                 : 5
MINUS                : 40
MODULE               : 48 49 50 51
MULTIPLY             : 42
NOTEQUAL             : 36
OR                   : 32
PLUS                 : 39
PRINT                : 57
PROGRAM              : 1 2 3 4
RBRACKET             : 13 14 19 20 53 54
READ                 : 
RETURN               : 52
RPAREN               : 45 48 49 50 51 54 55 56 57
SEMICOLON            : 1 2 3 4 10 23 24 25 26 27 28
THEN                 : 
TO                   : 53
VAR                  : 6
VOID                 : 48 50
WHILE                : 54
WRITE                : 
error                : 

Nonterminals, with rules where they appear

asignacion           : 23 53
bloque               : 55 55 56
bloque_module        : 5
condicion            : 24
escritura            : 25
escritura_aux        : 57 62
escritura_aux2       : 58 59
estatuto             : 17 21 22 53 54
estatuto_aux         : 19 21
estatuto_module      : 15 16 48 49 50 51
estatuto_module_aux  : 13 15
exp                  : 30 31 32
exp_aux              : 32 33
exp_aux2             : 34 34 35 35 36 36 37 37 38 39 40
expresion            : 29 30 45 52 54 55 56 58 60
factor               : 42 43 44
for                  : 27
main                 : 1 2 3 4
module               : 1 2 48 49
programa             : 0
return               : 26
term                 : 39 40 41 42 43
tipo                 : 10 49 51
vars                 : 1 3 18 48 49 50 51
vars_aux             : 6 7
vars_aux2            : 7 8 9
while                : 28

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM ID SEMICOLON vars module main
    (2) programa -> . PROGRAM ID SEMICOLON module main
    (3) programa -> . PROGRAM ID SEMICOLON vars main
    (4) programa -> . PROGRAM ID SEMICOLON main

    PROGRAM         shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAM . ID SEMICOLON vars module main
    (2) programa -> PROGRAM . ID SEMICOLON module main
    (3) programa -> PROGRAM . ID SEMICOLON vars main
    (4) programa -> PROGRAM . ID SEMICOLON main

    ID              shift and go to state 3


state 3

    (1) programa -> PROGRAM ID . SEMICOLON vars module main
    (2) programa -> PROGRAM ID . SEMICOLON module main
    (3) programa -> PROGRAM ID . SEMICOLON vars main
    (4) programa -> PROGRAM ID . SEMICOLON main

    SEMICOLON       shift and go to state 4


state 4

    (1) programa -> PROGRAM ID SEMICOLON . vars module main
    (2) programa -> PROGRAM ID SEMICOLON . module main
    (3) programa -> PROGRAM ID SEMICOLON . vars main
    (4) programa -> PROGRAM ID SEMICOLON . main
    (6) vars -> . VAR vars_aux
    (48) module -> . MODULE VOID ID LPAREN vars RPAREN estatuto_module module
    (49) module -> . MODULE tipo ID LPAREN vars RPAREN estatuto_module module
    (50) module -> . MODULE VOID ID LPAREN vars RPAREN estatuto_module
    (51) module -> . MODULE tipo ID LPAREN vars RPAREN estatuto_module
    (5) main -> . MAIN bloque_module

    VAR             shift and go to state 8
    MODULE          shift and go to state 9
    MAIN            shift and go to state 10

    vars                           shift and go to state 5
    module                         shift and go to state 6
    main                           shift and go to state 7

state 5

    (1) programa -> PROGRAM ID SEMICOLON vars . module main
    (3) programa -> PROGRAM ID SEMICOLON vars . main
    (48) module -> . MODULE VOID ID LPAREN vars RPAREN estatuto_module module
    (49) module -> . MODULE tipo ID LPAREN vars RPAREN estatuto_module module
    (50) module -> . MODULE VOID ID LPAREN vars RPAREN estatuto_module
    (51) module -> . MODULE tipo ID LPAREN vars RPAREN estatuto_module
    (5) main -> . MAIN bloque_module

    MODULE          shift and go to state 9
    MAIN            shift and go to state 10

    module                         shift and go to state 11
    main                           shift and go to state 12

state 6

    (2) programa -> PROGRAM ID SEMICOLON module . main
    (5) main -> . MAIN bloque_module

    MAIN            shift and go to state 10

    main                           shift and go to state 13

state 7

    (4) programa -> PROGRAM ID SEMICOLON main .

    $end            reduce using rule 4 (programa -> PROGRAM ID SEMICOLON main .)


state 8

    (6) vars -> VAR . vars_aux
    (7) vars_aux -> . vars_aux2 vars_aux
    (8) vars_aux -> . vars_aux2
    (9) vars_aux2 -> . ID COMA vars_aux2
    (10) vars_aux2 -> . ID COLON tipo SEMICOLON

    ID              shift and go to state 16

    vars_aux                       shift and go to state 14
    vars_aux2                      shift and go to state 15

state 9

    (48) module -> MODULE . VOID ID LPAREN vars RPAREN estatuto_module module
    (49) module -> MODULE . tipo ID LPAREN vars RPAREN estatuto_module module
    (50) module -> MODULE . VOID ID LPAREN vars RPAREN estatuto_module
    (51) module -> MODULE . tipo ID LPAREN vars RPAREN estatuto_module
    (11) tipo -> . INT
    (12) tipo -> . FLOAT

    VOID            shift and go to state 17
    INT             shift and go to state 19
    FLOAT           shift and go to state 20

    tipo                           shift and go to state 18

state 10

    (5) main -> MAIN . bloque_module
    (13) bloque_module -> . LBRACKET estatuto_module_aux RBRACKET
    (14) bloque_module -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 22

    bloque_module                  shift and go to state 21

state 11

    (1) programa -> PROGRAM ID SEMICOLON vars module . main
    (5) main -> . MAIN bloque_module

    MAIN            shift and go to state 10

    main                           shift and go to state 23

state 12

    (3) programa -> PROGRAM ID SEMICOLON vars main .

    $end            reduce using rule 3 (programa -> PROGRAM ID SEMICOLON vars main .)


state 13

    (2) programa -> PROGRAM ID SEMICOLON module main .

    $end            reduce using rule 2 (programa -> PROGRAM ID SEMICOLON module main .)


state 14

    (6) vars -> VAR vars_aux .

    MODULE          reduce using rule 6 (vars -> VAR vars_aux .)
    MAIN            reduce using rule 6 (vars -> VAR vars_aux .)
    VAR             reduce using rule 6 (vars -> VAR vars_aux .)
    ID              reduce using rule 6 (vars -> VAR vars_aux .)
    IF              reduce using rule 6 (vars -> VAR vars_aux .)
    PRINT           reduce using rule 6 (vars -> VAR vars_aux .)
    RETURN          reduce using rule 6 (vars -> VAR vars_aux .)
    FOR             reduce using rule 6 (vars -> VAR vars_aux .)
    WHILE           reduce using rule 6 (vars -> VAR vars_aux .)
    RBRACKET        reduce using rule 6 (vars -> VAR vars_aux .)
    RPAREN          reduce using rule 6 (vars -> VAR vars_aux .)


state 15

    (7) vars_aux -> vars_aux2 . vars_aux
    (8) vars_aux -> vars_aux2 .
    (7) vars_aux -> . vars_aux2 vars_aux
    (8) vars_aux -> . vars_aux2
    (9) vars_aux2 -> . ID COMA vars_aux2
    (10) vars_aux2 -> . ID COLON tipo SEMICOLON

  ! shift/reduce conflict for ID resolved as shift
    MODULE          reduce using rule 8 (vars_aux -> vars_aux2 .)
    MAIN            reduce using rule 8 (vars_aux -> vars_aux2 .)
    VAR             reduce using rule 8 (vars_aux -> vars_aux2 .)
    IF              reduce using rule 8 (vars_aux -> vars_aux2 .)
    PRINT           reduce using rule 8 (vars_aux -> vars_aux2 .)
    RETURN          reduce using rule 8 (vars_aux -> vars_aux2 .)
    FOR             reduce using rule 8 (vars_aux -> vars_aux2 .)
    WHILE           reduce using rule 8 (vars_aux -> vars_aux2 .)
    RBRACKET        reduce using rule 8 (vars_aux -> vars_aux2 .)
    RPAREN          reduce using rule 8 (vars_aux -> vars_aux2 .)
    ID              shift and go to state 16

  ! ID              [ reduce using rule 8 (vars_aux -> vars_aux2 .) ]

    vars_aux2                      shift and go to state 15
    vars_aux                       shift and go to state 24

state 16

    (9) vars_aux2 -> ID . COMA vars_aux2
    (10) vars_aux2 -> ID . COLON tipo SEMICOLON

    COMA            shift and go to state 25
    COLON           shift and go to state 26


state 17

    (48) module -> MODULE VOID . ID LPAREN vars RPAREN estatuto_module module
    (50) module -> MODULE VOID . ID LPAREN vars RPAREN estatuto_module

    ID              shift and go to state 27


state 18

    (49) module -> MODULE tipo . ID LPAREN vars RPAREN estatuto_module module
    (51) module -> MODULE tipo . ID LPAREN vars RPAREN estatuto_module

    ID              shift and go to state 28


state 19

    (11) tipo -> INT .

    ID              reduce using rule 11 (tipo -> INT .)
    SEMICOLON       reduce using rule 11 (tipo -> INT .)


state 20

    (12) tipo -> FLOAT .

    ID              reduce using rule 12 (tipo -> FLOAT .)
    SEMICOLON       reduce using rule 12 (tipo -> FLOAT .)


state 21

    (5) main -> MAIN bloque_module .

    $end            reduce using rule 5 (main -> MAIN bloque_module .)


state 22

    (13) bloque_module -> LBRACKET . estatuto_module_aux RBRACKET
    (14) bloque_module -> LBRACKET . RBRACKET
    (15) estatuto_module_aux -> . estatuto_module estatuto_module_aux
    (16) estatuto_module_aux -> . estatuto_module
    (17) estatuto_module -> . estatuto
    (18) estatuto_module -> . vars
    (23) estatuto -> . asignacion SEMICOLON
    (24) estatuto -> . condicion SEMICOLON
    (25) estatuto -> . escritura SEMICOLON
    (26) estatuto -> . return SEMICOLON
    (27) estatuto -> . for SEMICOLON
    (28) estatuto -> . while SEMICOLON
    (6) vars -> . VAR vars_aux
    (29) asignacion -> . ID EQUAL expresion
    (55) condicion -> . IF LPAREN expresion RPAREN bloque ELSE bloque
    (56) condicion -> . IF LPAREN expresion RPAREN bloque
    (57) escritura -> . PRINT LPAREN escritura_aux RPAREN
    (52) return -> . RETURN expresion
    (53) for -> . FOR asignacion TO CTEINT LBRACKET estatuto RBRACKET
    (54) while -> . WHILE LPAREN expresion RPAREN LBRACKET estatuto RBRACKET

    RBRACKET        shift and go to state 30
    VAR             shift and go to state 8
    ID              shift and go to state 40
    IF              shift and go to state 41
    PRINT           shift and go to state 42
    RETURN          shift and go to state 43
    FOR             shift and go to state 44
    WHILE           shift and go to state 45

    estatuto_module_aux            shift and go to state 29
    estatuto_module                shift and go to state 31
    estatuto                       shift and go to state 32
    vars                           shift and go to state 33
    asignacion                     shift and go to state 34
    condicion                      shift and go to state 35
    escritura                      shift and go to state 36
    return                         shift and go to state 37
    for                            shift and go to state 38
    while                          shift and go to state 39

state 23

    (1) programa -> PROGRAM ID SEMICOLON vars module main .

    $end            reduce using rule 1 (programa -> PROGRAM ID SEMICOLON vars module main .)


state 24

    (7) vars_aux -> vars_aux2 vars_aux .

    MODULE          reduce using rule 7 (vars_aux -> vars_aux2 vars_aux .)
    MAIN            reduce using rule 7 (vars_aux -> vars_aux2 vars_aux .)
    VAR             reduce using rule 7 (vars_aux -> vars_aux2 vars_aux .)
    ID              reduce using rule 7 (vars_aux -> vars_aux2 vars_aux .)
    IF              reduce using rule 7 (vars_aux -> vars_aux2 vars_aux .)
    PRINT           reduce using rule 7 (vars_aux -> vars_aux2 vars_aux .)
    RETURN          reduce using rule 7 (vars_aux -> vars_aux2 vars_aux .)
    FOR             reduce using rule 7 (vars_aux -> vars_aux2 vars_aux .)
    WHILE           reduce using rule 7 (vars_aux -> vars_aux2 vars_aux .)
    RBRACKET        reduce using rule 7 (vars_aux -> vars_aux2 vars_aux .)
    RPAREN          reduce using rule 7 (vars_aux -> vars_aux2 vars_aux .)


state 25

    (9) vars_aux2 -> ID COMA . vars_aux2
    (9) vars_aux2 -> . ID COMA vars_aux2
    (10) vars_aux2 -> . ID COLON tipo SEMICOLON

    ID              shift and go to state 16

    vars_aux2                      shift and go to state 46

state 26

    (10) vars_aux2 -> ID COLON . tipo SEMICOLON
    (11) tipo -> . INT
    (12) tipo -> . FLOAT

    INT             shift and go to state 19
    FLOAT           shift and go to state 20

    tipo                           shift and go to state 47

state 27

    (48) module -> MODULE VOID ID . LPAREN vars RPAREN estatuto_module module
    (50) module -> MODULE VOID ID . LPAREN vars RPAREN estatuto_module

    LPAREN          shift and go to state 48


state 28

    (49) module -> MODULE tipo ID . LPAREN vars RPAREN estatuto_module module
    (51) module -> MODULE tipo ID . LPAREN vars RPAREN estatuto_module

    LPAREN          shift and go to state 49


state 29

    (13) bloque_module -> LBRACKET estatuto_module_aux . RBRACKET

    RBRACKET        shift and go to state 50


state 30

    (14) bloque_module -> LBRACKET RBRACKET .

    $end            reduce using rule 14 (bloque_module -> LBRACKET RBRACKET .)


state 31

    (15) estatuto_module_aux -> estatuto_module . estatuto_module_aux
    (16) estatuto_module_aux -> estatuto_module .
    (15) estatuto_module_aux -> . estatuto_module estatuto_module_aux
    (16) estatuto_module_aux -> . estatuto_module
    (17) estatuto_module -> . estatuto
    (18) estatuto_module -> . vars
    (23) estatuto -> . asignacion SEMICOLON
    (24) estatuto -> . condicion SEMICOLON
    (25) estatuto -> . escritura SEMICOLON
    (26) estatuto -> . return SEMICOLON
    (27) estatuto -> . for SEMICOLON
    (28) estatuto -> . while SEMICOLON
    (6) vars -> . VAR vars_aux
    (29) asignacion -> . ID EQUAL expresion
    (55) condicion -> . IF LPAREN expresion RPAREN bloque ELSE bloque
    (56) condicion -> . IF LPAREN expresion RPAREN bloque
    (57) escritura -> . PRINT LPAREN escritura_aux RPAREN
    (52) return -> . RETURN expresion
    (53) for -> . FOR asignacion TO CTEINT LBRACKET estatuto RBRACKET
    (54) while -> . WHILE LPAREN expresion RPAREN LBRACKET estatuto RBRACKET

    RBRACKET        reduce using rule 16 (estatuto_module_aux -> estatuto_module .)
    VAR             shift and go to state 8
    ID              shift and go to state 40
    IF              shift and go to state 41
    PRINT           shift and go to state 42
    RETURN          shift and go to state 43
    FOR             shift and go to state 44
    WHILE           shift and go to state 45

    estatuto_module                shift and go to state 31
    estatuto_module_aux            shift and go to state 51
    estatuto                       shift and go to state 32
    vars                           shift and go to state 33
    asignacion                     shift and go to state 34
    condicion                      shift and go to state 35
    escritura                      shift and go to state 36
    return                         shift and go to state 37
    for                            shift and go to state 38
    while                          shift and go to state 39

state 32

    (17) estatuto_module -> estatuto .

    VAR             reduce using rule 17 (estatuto_module -> estatuto .)
    ID              reduce using rule 17 (estatuto_module -> estatuto .)
    IF              reduce using rule 17 (estatuto_module -> estatuto .)
    PRINT           reduce using rule 17 (estatuto_module -> estatuto .)
    RETURN          reduce using rule 17 (estatuto_module -> estatuto .)
    FOR             reduce using rule 17 (estatuto_module -> estatuto .)
    WHILE           reduce using rule 17 (estatuto_module -> estatuto .)
    RBRACKET        reduce using rule 17 (estatuto_module -> estatuto .)
    MODULE          reduce using rule 17 (estatuto_module -> estatuto .)
    MAIN            reduce using rule 17 (estatuto_module -> estatuto .)


state 33

    (18) estatuto_module -> vars .

    VAR             reduce using rule 18 (estatuto_module -> vars .)
    ID              reduce using rule 18 (estatuto_module -> vars .)
    IF              reduce using rule 18 (estatuto_module -> vars .)
    PRINT           reduce using rule 18 (estatuto_module -> vars .)
    RETURN          reduce using rule 18 (estatuto_module -> vars .)
    FOR             reduce using rule 18 (estatuto_module -> vars .)
    WHILE           reduce using rule 18 (estatuto_module -> vars .)
    RBRACKET        reduce using rule 18 (estatuto_module -> vars .)
    MODULE          reduce using rule 18 (estatuto_module -> vars .)
    MAIN            reduce using rule 18 (estatuto_module -> vars .)


state 34

    (23) estatuto -> asignacion . SEMICOLON

    SEMICOLON       shift and go to state 52


state 35

    (24) estatuto -> condicion . SEMICOLON

    SEMICOLON       shift and go to state 53


state 36

    (25) estatuto -> escritura . SEMICOLON

    SEMICOLON       shift and go to state 54


state 37

    (26) estatuto -> return . SEMICOLON

    SEMICOLON       shift and go to state 55


state 38

    (27) estatuto -> for . SEMICOLON

    SEMICOLON       shift and go to state 56


state 39

    (28) estatuto -> while . SEMICOLON

    SEMICOLON       shift and go to state 57


state 40

    (29) asignacion -> ID . EQUAL expresion

    EQUAL           shift and go to state 58


state 41

    (55) condicion -> IF . LPAREN expresion RPAREN bloque ELSE bloque
    (56) condicion -> IF . LPAREN expresion RPAREN bloque

    LPAREN          shift and go to state 59


state 42

    (57) escritura -> PRINT . LPAREN escritura_aux RPAREN

    LPAREN          shift and go to state 60


state 43

    (52) return -> RETURN . expresion
    (30) expresion -> . exp AND expresion
    (31) expresion -> . exp
    (32) exp -> . exp_aux OR exp
    (33) exp -> . exp_aux
    (34) exp_aux -> . exp_aux2 GREATERT exp_aux2
    (35) exp_aux -> . exp_aux2 LESST exp_aux2
    (36) exp_aux -> . exp_aux2 NOTEQUAL exp_aux2
    (37) exp_aux -> . exp_aux2 DBEQUALS exp_aux2
    (38) exp_aux -> . exp_aux2
    (39) exp_aux2 -> . term PLUS exp_aux2
    (40) exp_aux2 -> . term MINUS exp_aux2
    (41) exp_aux2 -> . term
    (42) term -> . factor MULTIPLY term
    (43) term -> . factor DIVIDE term
    (44) term -> . factor
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . CTEINT
    (47) factor -> . CTEF

    LPAREN          shift and go to state 67
    CTEINT          shift and go to state 68
    CTEF            shift and go to state 69

    expresion                      shift and go to state 61
    exp                            shift and go to state 62
    exp_aux                        shift and go to state 63
    exp_aux2                       shift and go to state 64
    term                           shift and go to state 65
    factor                         shift and go to state 66

state 44

    (53) for -> FOR . asignacion TO CTEINT LBRACKET estatuto RBRACKET
    (29) asignacion -> . ID EQUAL expresion

    ID              shift and go to state 40

    asignacion                     shift and go to state 70

state 45

    (54) while -> WHILE . LPAREN expresion RPAREN LBRACKET estatuto RBRACKET

    LPAREN          shift and go to state 71


state 46

    (9) vars_aux2 -> ID COMA vars_aux2 .

    ID              reduce using rule 9 (vars_aux2 -> ID COMA vars_aux2 .)
    MODULE          reduce using rule 9 (vars_aux2 -> ID COMA vars_aux2 .)
    MAIN            reduce using rule 9 (vars_aux2 -> ID COMA vars_aux2 .)
    VAR             reduce using rule 9 (vars_aux2 -> ID COMA vars_aux2 .)
    IF              reduce using rule 9 (vars_aux2 -> ID COMA vars_aux2 .)
    PRINT           reduce using rule 9 (vars_aux2 -> ID COMA vars_aux2 .)
    RETURN          reduce using rule 9 (vars_aux2 -> ID COMA vars_aux2 .)
    FOR             reduce using rule 9 (vars_aux2 -> ID COMA vars_aux2 .)
    WHILE           reduce using rule 9 (vars_aux2 -> ID COMA vars_aux2 .)
    RBRACKET        reduce using rule 9 (vars_aux2 -> ID COMA vars_aux2 .)
    RPAREN          reduce using rule 9 (vars_aux2 -> ID COMA vars_aux2 .)


state 47

    (10) vars_aux2 -> ID COLON tipo . SEMICOLON

    SEMICOLON       shift and go to state 72


state 48

    (48) module -> MODULE VOID ID LPAREN . vars RPAREN estatuto_module module
    (50) module -> MODULE VOID ID LPAREN . vars RPAREN estatuto_module
    (6) vars -> . VAR vars_aux

    VAR             shift and go to state 8

    vars                           shift and go to state 73

state 49

    (49) module -> MODULE tipo ID LPAREN . vars RPAREN estatuto_module module
    (51) module -> MODULE tipo ID LPAREN . vars RPAREN estatuto_module
    (6) vars -> . VAR vars_aux

    VAR             shift and go to state 8

    vars                           shift and go to state 74

state 50

    (13) bloque_module -> LBRACKET estatuto_module_aux RBRACKET .

    $end            reduce using rule 13 (bloque_module -> LBRACKET estatuto_module_aux RBRACKET .)


state 51

    (15) estatuto_module_aux -> estatuto_module estatuto_module_aux .

    RBRACKET        reduce using rule 15 (estatuto_module_aux -> estatuto_module estatuto_module_aux .)


state 52

    (23) estatuto -> asignacion SEMICOLON .

    VAR             reduce using rule 23 (estatuto -> asignacion SEMICOLON .)
    ID              reduce using rule 23 (estatuto -> asignacion SEMICOLON .)
    IF              reduce using rule 23 (estatuto -> asignacion SEMICOLON .)
    PRINT           reduce using rule 23 (estatuto -> asignacion SEMICOLON .)
    RETURN          reduce using rule 23 (estatuto -> asignacion SEMICOLON .)
    FOR             reduce using rule 23 (estatuto -> asignacion SEMICOLON .)
    WHILE           reduce using rule 23 (estatuto -> asignacion SEMICOLON .)
    RBRACKET        reduce using rule 23 (estatuto -> asignacion SEMICOLON .)
    MODULE          reduce using rule 23 (estatuto -> asignacion SEMICOLON .)
    MAIN            reduce using rule 23 (estatuto -> asignacion SEMICOLON .)


state 53

    (24) estatuto -> condicion SEMICOLON .

    VAR             reduce using rule 24 (estatuto -> condicion SEMICOLON .)
    ID              reduce using rule 24 (estatuto -> condicion SEMICOLON .)
    IF              reduce using rule 24 (estatuto -> condicion SEMICOLON .)
    PRINT           reduce using rule 24 (estatuto -> condicion SEMICOLON .)
    RETURN          reduce using rule 24 (estatuto -> condicion SEMICOLON .)
    FOR             reduce using rule 24 (estatuto -> condicion SEMICOLON .)
    WHILE           reduce using rule 24 (estatuto -> condicion SEMICOLON .)
    RBRACKET        reduce using rule 24 (estatuto -> condicion SEMICOLON .)
    MODULE          reduce using rule 24 (estatuto -> condicion SEMICOLON .)
    MAIN            reduce using rule 24 (estatuto -> condicion SEMICOLON .)


state 54

    (25) estatuto -> escritura SEMICOLON .

    VAR             reduce using rule 25 (estatuto -> escritura SEMICOLON .)
    ID              reduce using rule 25 (estatuto -> escritura SEMICOLON .)
    IF              reduce using rule 25 (estatuto -> escritura SEMICOLON .)
    PRINT           reduce using rule 25 (estatuto -> escritura SEMICOLON .)
    RETURN          reduce using rule 25 (estatuto -> escritura SEMICOLON .)
    FOR             reduce using rule 25 (estatuto -> escritura SEMICOLON .)
    WHILE           reduce using rule 25 (estatuto -> escritura SEMICOLON .)
    RBRACKET        reduce using rule 25 (estatuto -> escritura SEMICOLON .)
    MODULE          reduce using rule 25 (estatuto -> escritura SEMICOLON .)
    MAIN            reduce using rule 25 (estatuto -> escritura SEMICOLON .)


state 55

    (26) estatuto -> return SEMICOLON .

    VAR             reduce using rule 26 (estatuto -> return SEMICOLON .)
    ID              reduce using rule 26 (estatuto -> return SEMICOLON .)
    IF              reduce using rule 26 (estatuto -> return SEMICOLON .)
    PRINT           reduce using rule 26 (estatuto -> return SEMICOLON .)
    RETURN          reduce using rule 26 (estatuto -> return SEMICOLON .)
    FOR             reduce using rule 26 (estatuto -> return SEMICOLON .)
    WHILE           reduce using rule 26 (estatuto -> return SEMICOLON .)
    RBRACKET        reduce using rule 26 (estatuto -> return SEMICOLON .)
    MODULE          reduce using rule 26 (estatuto -> return SEMICOLON .)
    MAIN            reduce using rule 26 (estatuto -> return SEMICOLON .)


state 56

    (27) estatuto -> for SEMICOLON .

    VAR             reduce using rule 27 (estatuto -> for SEMICOLON .)
    ID              reduce using rule 27 (estatuto -> for SEMICOLON .)
    IF              reduce using rule 27 (estatuto -> for SEMICOLON .)
    PRINT           reduce using rule 27 (estatuto -> for SEMICOLON .)
    RETURN          reduce using rule 27 (estatuto -> for SEMICOLON .)
    FOR             reduce using rule 27 (estatuto -> for SEMICOLON .)
    WHILE           reduce using rule 27 (estatuto -> for SEMICOLON .)
    RBRACKET        reduce using rule 27 (estatuto -> for SEMICOLON .)
    MODULE          reduce using rule 27 (estatuto -> for SEMICOLON .)
    MAIN            reduce using rule 27 (estatuto -> for SEMICOLON .)


state 57

    (28) estatuto -> while SEMICOLON .

    VAR             reduce using rule 28 (estatuto -> while SEMICOLON .)
    ID              reduce using rule 28 (estatuto -> while SEMICOLON .)
    IF              reduce using rule 28 (estatuto -> while SEMICOLON .)
    PRINT           reduce using rule 28 (estatuto -> while SEMICOLON .)
    RETURN          reduce using rule 28 (estatuto -> while SEMICOLON .)
    FOR             reduce using rule 28 (estatuto -> while SEMICOLON .)
    WHILE           reduce using rule 28 (estatuto -> while SEMICOLON .)
    RBRACKET        reduce using rule 28 (estatuto -> while SEMICOLON .)
    MODULE          reduce using rule 28 (estatuto -> while SEMICOLON .)
    MAIN            reduce using rule 28 (estatuto -> while SEMICOLON .)


state 58

    (29) asignacion -> ID EQUAL . expresion
    (30) expresion -> . exp AND expresion
    (31) expresion -> . exp
    (32) exp -> . exp_aux OR exp
    (33) exp -> . exp_aux
    (34) exp_aux -> . exp_aux2 GREATERT exp_aux2
    (35) exp_aux -> . exp_aux2 LESST exp_aux2
    (36) exp_aux -> . exp_aux2 NOTEQUAL exp_aux2
    (37) exp_aux -> . exp_aux2 DBEQUALS exp_aux2
    (38) exp_aux -> . exp_aux2
    (39) exp_aux2 -> . term PLUS exp_aux2
    (40) exp_aux2 -> . term MINUS exp_aux2
    (41) exp_aux2 -> . term
    (42) term -> . factor MULTIPLY term
    (43) term -> . factor DIVIDE term
    (44) term -> . factor
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . CTEINT
    (47) factor -> . CTEF

    LPAREN          shift and go to state 67
    CTEINT          shift and go to state 68
    CTEF            shift and go to state 69

    expresion                      shift and go to state 75
    exp                            shift and go to state 62
    exp_aux                        shift and go to state 63
    exp_aux2                       shift and go to state 64
    term                           shift and go to state 65
    factor                         shift and go to state 66

state 59

    (55) condicion -> IF LPAREN . expresion RPAREN bloque ELSE bloque
    (56) condicion -> IF LPAREN . expresion RPAREN bloque
    (30) expresion -> . exp AND expresion
    (31) expresion -> . exp
    (32) exp -> . exp_aux OR exp
    (33) exp -> . exp_aux
    (34) exp_aux -> . exp_aux2 GREATERT exp_aux2
    (35) exp_aux -> . exp_aux2 LESST exp_aux2
    (36) exp_aux -> . exp_aux2 NOTEQUAL exp_aux2
    (37) exp_aux -> . exp_aux2 DBEQUALS exp_aux2
    (38) exp_aux -> . exp_aux2
    (39) exp_aux2 -> . term PLUS exp_aux2
    (40) exp_aux2 -> . term MINUS exp_aux2
    (41) exp_aux2 -> . term
    (42) term -> . factor MULTIPLY term
    (43) term -> . factor DIVIDE term
    (44) term -> . factor
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . CTEINT
    (47) factor -> . CTEF

    LPAREN          shift and go to state 67
    CTEINT          shift and go to state 68
    CTEF            shift and go to state 69

    expresion                      shift and go to state 76
    exp                            shift and go to state 62
    exp_aux                        shift and go to state 63
    exp_aux2                       shift and go to state 64
    term                           shift and go to state 65
    factor                         shift and go to state 66

state 60

    (57) escritura -> PRINT LPAREN . escritura_aux RPAREN
    (58) escritura_aux -> . expresion escritura_aux2
    (59) escritura_aux -> . CTESTRING escritura_aux2
    (60) escritura_aux -> . expresion
    (61) escritura_aux -> . CTESTRING
    (30) expresion -> . exp AND expresion
    (31) expresion -> . exp
    (32) exp -> . exp_aux OR exp
    (33) exp -> . exp_aux
    (34) exp_aux -> . exp_aux2 GREATERT exp_aux2
    (35) exp_aux -> . exp_aux2 LESST exp_aux2
    (36) exp_aux -> . exp_aux2 NOTEQUAL exp_aux2
    (37) exp_aux -> . exp_aux2 DBEQUALS exp_aux2
    (38) exp_aux -> . exp_aux2
    (39) exp_aux2 -> . term PLUS exp_aux2
    (40) exp_aux2 -> . term MINUS exp_aux2
    (41) exp_aux2 -> . term
    (42) term -> . factor MULTIPLY term
    (43) term -> . factor DIVIDE term
    (44) term -> . factor
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . CTEINT
    (47) factor -> . CTEF

    CTESTRING       shift and go to state 79
    LPAREN          shift and go to state 67
    CTEINT          shift and go to state 68
    CTEF            shift and go to state 69

    escritura_aux                  shift and go to state 77
    expresion                      shift and go to state 78
    exp                            shift and go to state 62
    exp_aux                        shift and go to state 63
    exp_aux2                       shift and go to state 64
    term                           shift and go to state 65
    factor                         shift and go to state 66

state 61

    (52) return -> RETURN expresion .

    SEMICOLON       reduce using rule 52 (return -> RETURN expresion .)


state 62

    (30) expresion -> exp . AND expresion
    (31) expresion -> exp .

    AND             shift and go to state 80
    SEMICOLON       reduce using rule 31 (expresion -> exp .)
    TO              reduce using rule 31 (expresion -> exp .)
    RPAREN          reduce using rule 31 (expresion -> exp .)
    COMA            reduce using rule 31 (expresion -> exp .)


state 63

    (32) exp -> exp_aux . OR exp
    (33) exp -> exp_aux .

    OR              shift and go to state 81
    AND             reduce using rule 33 (exp -> exp_aux .)
    SEMICOLON       reduce using rule 33 (exp -> exp_aux .)
    TO              reduce using rule 33 (exp -> exp_aux .)
    RPAREN          reduce using rule 33 (exp -> exp_aux .)
    COMA            reduce using rule 33 (exp -> exp_aux .)


state 64

    (34) exp_aux -> exp_aux2 . GREATERT exp_aux2
    (35) exp_aux -> exp_aux2 . LESST exp_aux2
    (36) exp_aux -> exp_aux2 . NOTEQUAL exp_aux2
    (37) exp_aux -> exp_aux2 . DBEQUALS exp_aux2
    (38) exp_aux -> exp_aux2 .

    GREATERT        shift and go to state 82
    LESST           shift and go to state 83
    NOTEQUAL        shift and go to state 84
    DBEQUALS        shift and go to state 85
    OR              reduce using rule 38 (exp_aux -> exp_aux2 .)
    AND             reduce using rule 38 (exp_aux -> exp_aux2 .)
    SEMICOLON       reduce using rule 38 (exp_aux -> exp_aux2 .)
    TO              reduce using rule 38 (exp_aux -> exp_aux2 .)
    RPAREN          reduce using rule 38 (exp_aux -> exp_aux2 .)
    COMA            reduce using rule 38 (exp_aux -> exp_aux2 .)


state 65

    (39) exp_aux2 -> term . PLUS exp_aux2
    (40) exp_aux2 -> term . MINUS exp_aux2
    (41) exp_aux2 -> term .

    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    GREATERT        reduce using rule 41 (exp_aux2 -> term .)
    LESST           reduce using rule 41 (exp_aux2 -> term .)
    NOTEQUAL        reduce using rule 41 (exp_aux2 -> term .)
    DBEQUALS        reduce using rule 41 (exp_aux2 -> term .)
    OR              reduce using rule 41 (exp_aux2 -> term .)
    AND             reduce using rule 41 (exp_aux2 -> term .)
    SEMICOLON       reduce using rule 41 (exp_aux2 -> term .)
    TO              reduce using rule 41 (exp_aux2 -> term .)
    RPAREN          reduce using rule 41 (exp_aux2 -> term .)
    COMA            reduce using rule 41 (exp_aux2 -> term .)


state 66

    (42) term -> factor . MULTIPLY term
    (43) term -> factor . DIVIDE term
    (44) term -> factor .

    MULTIPLY        shift and go to state 88
    DIVIDE          shift and go to state 89
    PLUS            reduce using rule 44 (term -> factor .)
    MINUS           reduce using rule 44 (term -> factor .)
    GREATERT        reduce using rule 44 (term -> factor .)
    LESST           reduce using rule 44 (term -> factor .)
    NOTEQUAL        reduce using rule 44 (term -> factor .)
    DBEQUALS        reduce using rule 44 (term -> factor .)
    OR              reduce using rule 44 (term -> factor .)
    AND             reduce using rule 44 (term -> factor .)
    SEMICOLON       reduce using rule 44 (term -> factor .)
    TO              reduce using rule 44 (term -> factor .)
    RPAREN          reduce using rule 44 (term -> factor .)
    COMA            reduce using rule 44 (term -> factor .)


state 67

    (45) factor -> LPAREN . expresion RPAREN
    (30) expresion -> . exp AND expresion
    (31) expresion -> . exp
    (32) exp -> . exp_aux OR exp
    (33) exp -> . exp_aux
    (34) exp_aux -> . exp_aux2 GREATERT exp_aux2
    (35) exp_aux -> . exp_aux2 LESST exp_aux2
    (36) exp_aux -> . exp_aux2 NOTEQUAL exp_aux2
    (37) exp_aux -> . exp_aux2 DBEQUALS exp_aux2
    (38) exp_aux -> . exp_aux2
    (39) exp_aux2 -> . term PLUS exp_aux2
    (40) exp_aux2 -> . term MINUS exp_aux2
    (41) exp_aux2 -> . term
    (42) term -> . factor MULTIPLY term
    (43) term -> . factor DIVIDE term
    (44) term -> . factor
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . CTEINT
    (47) factor -> . CTEF

    LPAREN          shift and go to state 67
    CTEINT          shift and go to state 68
    CTEF            shift and go to state 69

    expresion                      shift and go to state 90
    exp                            shift and go to state 62
    exp_aux                        shift and go to state 63
    exp_aux2                       shift and go to state 64
    term                           shift and go to state 65
    factor                         shift and go to state 66

state 68

    (46) factor -> CTEINT .

    MULTIPLY        reduce using rule 46 (factor -> CTEINT .)
    DIVIDE          reduce using rule 46 (factor -> CTEINT .)
    PLUS            reduce using rule 46 (factor -> CTEINT .)
    MINUS           reduce using rule 46 (factor -> CTEINT .)
    GREATERT        reduce using rule 46 (factor -> CTEINT .)
    LESST           reduce using rule 46 (factor -> CTEINT .)
    NOTEQUAL        reduce using rule 46 (factor -> CTEINT .)
    DBEQUALS        reduce using rule 46 (factor -> CTEINT .)
    OR              reduce using rule 46 (factor -> CTEINT .)
    AND             reduce using rule 46 (factor -> CTEINT .)
    SEMICOLON       reduce using rule 46 (factor -> CTEINT .)
    TO              reduce using rule 46 (factor -> CTEINT .)
    RPAREN          reduce using rule 46 (factor -> CTEINT .)
    COMA            reduce using rule 46 (factor -> CTEINT .)


state 69

    (47) factor -> CTEF .

    MULTIPLY        reduce using rule 47 (factor -> CTEF .)
    DIVIDE          reduce using rule 47 (factor -> CTEF .)
    PLUS            reduce using rule 47 (factor -> CTEF .)
    MINUS           reduce using rule 47 (factor -> CTEF .)
    GREATERT        reduce using rule 47 (factor -> CTEF .)
    LESST           reduce using rule 47 (factor -> CTEF .)
    NOTEQUAL        reduce using rule 47 (factor -> CTEF .)
    DBEQUALS        reduce using rule 47 (factor -> CTEF .)
    OR              reduce using rule 47 (factor -> CTEF .)
    AND             reduce using rule 47 (factor -> CTEF .)
    SEMICOLON       reduce using rule 47 (factor -> CTEF .)
    TO              reduce using rule 47 (factor -> CTEF .)
    RPAREN          reduce using rule 47 (factor -> CTEF .)
    COMA            reduce using rule 47 (factor -> CTEF .)


state 70

    (53) for -> FOR asignacion . TO CTEINT LBRACKET estatuto RBRACKET

    TO              shift and go to state 91


state 71

    (54) while -> WHILE LPAREN . expresion RPAREN LBRACKET estatuto RBRACKET
    (30) expresion -> . exp AND expresion
    (31) expresion -> . exp
    (32) exp -> . exp_aux OR exp
    (33) exp -> . exp_aux
    (34) exp_aux -> . exp_aux2 GREATERT exp_aux2
    (35) exp_aux -> . exp_aux2 LESST exp_aux2
    (36) exp_aux -> . exp_aux2 NOTEQUAL exp_aux2
    (37) exp_aux -> . exp_aux2 DBEQUALS exp_aux2
    (38) exp_aux -> . exp_aux2
    (39) exp_aux2 -> . term PLUS exp_aux2
    (40) exp_aux2 -> . term MINUS exp_aux2
    (41) exp_aux2 -> . term
    (42) term -> . factor MULTIPLY term
    (43) term -> . factor DIVIDE term
    (44) term -> . factor
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . CTEINT
    (47) factor -> . CTEF

    LPAREN          shift and go to state 67
    CTEINT          shift and go to state 68
    CTEF            shift and go to state 69

    expresion                      shift and go to state 92
    exp                            shift and go to state 62
    exp_aux                        shift and go to state 63
    exp_aux2                       shift and go to state 64
    term                           shift and go to state 65
    factor                         shift and go to state 66

state 72

    (10) vars_aux2 -> ID COLON tipo SEMICOLON .

    ID              reduce using rule 10 (vars_aux2 -> ID COLON tipo SEMICOLON .)
    MODULE          reduce using rule 10 (vars_aux2 -> ID COLON tipo SEMICOLON .)
    MAIN            reduce using rule 10 (vars_aux2 -> ID COLON tipo SEMICOLON .)
    VAR             reduce using rule 10 (vars_aux2 -> ID COLON tipo SEMICOLON .)
    IF              reduce using rule 10 (vars_aux2 -> ID COLON tipo SEMICOLON .)
    PRINT           reduce using rule 10 (vars_aux2 -> ID COLON tipo SEMICOLON .)
    RETURN          reduce using rule 10 (vars_aux2 -> ID COLON tipo SEMICOLON .)
    FOR             reduce using rule 10 (vars_aux2 -> ID COLON tipo SEMICOLON .)
    WHILE           reduce using rule 10 (vars_aux2 -> ID COLON tipo SEMICOLON .)
    RBRACKET        reduce using rule 10 (vars_aux2 -> ID COLON tipo SEMICOLON .)
    RPAREN          reduce using rule 10 (vars_aux2 -> ID COLON tipo SEMICOLON .)


state 73

    (48) module -> MODULE VOID ID LPAREN vars . RPAREN estatuto_module module
    (50) module -> MODULE VOID ID LPAREN vars . RPAREN estatuto_module

    RPAREN          shift and go to state 93


state 74

    (49) module -> MODULE tipo ID LPAREN vars . RPAREN estatuto_module module
    (51) module -> MODULE tipo ID LPAREN vars . RPAREN estatuto_module

    RPAREN          shift and go to state 94


state 75

    (29) asignacion -> ID EQUAL expresion .

    SEMICOLON       reduce using rule 29 (asignacion -> ID EQUAL expresion .)
    TO              reduce using rule 29 (asignacion -> ID EQUAL expresion .)


state 76

    (55) condicion -> IF LPAREN expresion . RPAREN bloque ELSE bloque
    (56) condicion -> IF LPAREN expresion . RPAREN bloque

    RPAREN          shift and go to state 95


state 77

    (57) escritura -> PRINT LPAREN escritura_aux . RPAREN

    RPAREN          shift and go to state 96


state 78

    (58) escritura_aux -> expresion . escritura_aux2
    (60) escritura_aux -> expresion .
    (62) escritura_aux2 -> . COMA escritura_aux

    RPAREN          reduce using rule 60 (escritura_aux -> expresion .)
    COMA            shift and go to state 98

    escritura_aux2                 shift and go to state 97

state 79

    (59) escritura_aux -> CTESTRING . escritura_aux2
    (61) escritura_aux -> CTESTRING .
    (62) escritura_aux2 -> . COMA escritura_aux

    RPAREN          reduce using rule 61 (escritura_aux -> CTESTRING .)
    COMA            shift and go to state 98

    escritura_aux2                 shift and go to state 99

state 80

    (30) expresion -> exp AND . expresion
    (30) expresion -> . exp AND expresion
    (31) expresion -> . exp
    (32) exp -> . exp_aux OR exp
    (33) exp -> . exp_aux
    (34) exp_aux -> . exp_aux2 GREATERT exp_aux2
    (35) exp_aux -> . exp_aux2 LESST exp_aux2
    (36) exp_aux -> . exp_aux2 NOTEQUAL exp_aux2
    (37) exp_aux -> . exp_aux2 DBEQUALS exp_aux2
    (38) exp_aux -> . exp_aux2
    (39) exp_aux2 -> . term PLUS exp_aux2
    (40) exp_aux2 -> . term MINUS exp_aux2
    (41) exp_aux2 -> . term
    (42) term -> . factor MULTIPLY term
    (43) term -> . factor DIVIDE term
    (44) term -> . factor
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . CTEINT
    (47) factor -> . CTEF

    LPAREN          shift and go to state 67
    CTEINT          shift and go to state 68
    CTEF            shift and go to state 69

    exp                            shift and go to state 62
    expresion                      shift and go to state 100
    exp_aux                        shift and go to state 63
    exp_aux2                       shift and go to state 64
    term                           shift and go to state 65
    factor                         shift and go to state 66

state 81

    (32) exp -> exp_aux OR . exp
    (32) exp -> . exp_aux OR exp
    (33) exp -> . exp_aux
    (34) exp_aux -> . exp_aux2 GREATERT exp_aux2
    (35) exp_aux -> . exp_aux2 LESST exp_aux2
    (36) exp_aux -> . exp_aux2 NOTEQUAL exp_aux2
    (37) exp_aux -> . exp_aux2 DBEQUALS exp_aux2
    (38) exp_aux -> . exp_aux2
    (39) exp_aux2 -> . term PLUS exp_aux2
    (40) exp_aux2 -> . term MINUS exp_aux2
    (41) exp_aux2 -> . term
    (42) term -> . factor MULTIPLY term
    (43) term -> . factor DIVIDE term
    (44) term -> . factor
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . CTEINT
    (47) factor -> . CTEF

    LPAREN          shift and go to state 67
    CTEINT          shift and go to state 68
    CTEF            shift and go to state 69

    exp_aux                        shift and go to state 63
    exp                            shift and go to state 101
    exp_aux2                       shift and go to state 64
    term                           shift and go to state 65
    factor                         shift and go to state 66

state 82

    (34) exp_aux -> exp_aux2 GREATERT . exp_aux2
    (39) exp_aux2 -> . term PLUS exp_aux2
    (40) exp_aux2 -> . term MINUS exp_aux2
    (41) exp_aux2 -> . term
    (42) term -> . factor MULTIPLY term
    (43) term -> . factor DIVIDE term
    (44) term -> . factor
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . CTEINT
    (47) factor -> . CTEF

    LPAREN          shift and go to state 67
    CTEINT          shift and go to state 68
    CTEF            shift and go to state 69

    exp_aux2                       shift and go to state 102
    term                           shift and go to state 65
    factor                         shift and go to state 66

state 83

    (35) exp_aux -> exp_aux2 LESST . exp_aux2
    (39) exp_aux2 -> . term PLUS exp_aux2
    (40) exp_aux2 -> . term MINUS exp_aux2
    (41) exp_aux2 -> . term
    (42) term -> . factor MULTIPLY term
    (43) term -> . factor DIVIDE term
    (44) term -> . factor
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . CTEINT
    (47) factor -> . CTEF

    LPAREN          shift and go to state 67
    CTEINT          shift and go to state 68
    CTEF            shift and go to state 69

    exp_aux2                       shift and go to state 103
    term                           shift and go to state 65
    factor                         shift and go to state 66

state 84

    (36) exp_aux -> exp_aux2 NOTEQUAL . exp_aux2
    (39) exp_aux2 -> . term PLUS exp_aux2
    (40) exp_aux2 -> . term MINUS exp_aux2
    (41) exp_aux2 -> . term
    (42) term -> . factor MULTIPLY term
    (43) term -> . factor DIVIDE term
    (44) term -> . factor
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . CTEINT
    (47) factor -> . CTEF

    LPAREN          shift and go to state 67
    CTEINT          shift and go to state 68
    CTEF            shift and go to state 69

    exp_aux2                       shift and go to state 104
    term                           shift and go to state 65
    factor                         shift and go to state 66

state 85

    (37) exp_aux -> exp_aux2 DBEQUALS . exp_aux2
    (39) exp_aux2 -> . term PLUS exp_aux2
    (40) exp_aux2 -> . term MINUS exp_aux2
    (41) exp_aux2 -> . term
    (42) term -> . factor MULTIPLY term
    (43) term -> . factor DIVIDE term
    (44) term -> . factor
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . CTEINT
    (47) factor -> . CTEF

    LPAREN          shift and go to state 67
    CTEINT          shift and go to state 68
    CTEF            shift and go to state 69

    exp_aux2                       shift and go to state 105
    term                           shift and go to state 65
    factor                         shift and go to state 66

state 86

    (39) exp_aux2 -> term PLUS . exp_aux2
    (39) exp_aux2 -> . term PLUS exp_aux2
    (40) exp_aux2 -> . term MINUS exp_aux2
    (41) exp_aux2 -> . term
    (42) term -> . factor MULTIPLY term
    (43) term -> . factor DIVIDE term
    (44) term -> . factor
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . CTEINT
    (47) factor -> . CTEF

    LPAREN          shift and go to state 67
    CTEINT          shift and go to state 68
    CTEF            shift and go to state 69

    term                           shift and go to state 65
    exp_aux2                       shift and go to state 106
    factor                         shift and go to state 66

state 87

    (40) exp_aux2 -> term MINUS . exp_aux2
    (39) exp_aux2 -> . term PLUS exp_aux2
    (40) exp_aux2 -> . term MINUS exp_aux2
    (41) exp_aux2 -> . term
    (42) term -> . factor MULTIPLY term
    (43) term -> . factor DIVIDE term
    (44) term -> . factor
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . CTEINT
    (47) factor -> . CTEF

    LPAREN          shift and go to state 67
    CTEINT          shift and go to state 68
    CTEF            shift and go to state 69

    term                           shift and go to state 65
    exp_aux2                       shift and go to state 107
    factor                         shift and go to state 66

state 88

    (42) term -> factor MULTIPLY . term
    (42) term -> . factor MULTIPLY term
    (43) term -> . factor DIVIDE term
    (44) term -> . factor
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . CTEINT
    (47) factor -> . CTEF

    LPAREN          shift and go to state 67
    CTEINT          shift and go to state 68
    CTEF            shift and go to state 69

    factor                         shift and go to state 66
    term                           shift and go to state 108

state 89

    (43) term -> factor DIVIDE . term
    (42) term -> . factor MULTIPLY term
    (43) term -> . factor DIVIDE term
    (44) term -> . factor
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . CTEINT
    (47) factor -> . CTEF

    LPAREN          shift and go to state 67
    CTEINT          shift and go to state 68
    CTEF            shift and go to state 69

    factor                         shift and go to state 66
    term                           shift and go to state 109

state 90

    (45) factor -> LPAREN expresion . RPAREN

    RPAREN          shift and go to state 110


state 91

    (53) for -> FOR asignacion TO . CTEINT LBRACKET estatuto RBRACKET

    CTEINT          shift and go to state 111


state 92

    (54) while -> WHILE LPAREN expresion . RPAREN LBRACKET estatuto RBRACKET

    RPAREN          shift and go to state 112


state 93

    (48) module -> MODULE VOID ID LPAREN vars RPAREN . estatuto_module module
    (50) module -> MODULE VOID ID LPAREN vars RPAREN . estatuto_module
    (17) estatuto_module -> . estatuto
    (18) estatuto_module -> . vars
    (23) estatuto -> . asignacion SEMICOLON
    (24) estatuto -> . condicion SEMICOLON
    (25) estatuto -> . escritura SEMICOLON
    (26) estatuto -> . return SEMICOLON
    (27) estatuto -> . for SEMICOLON
    (28) estatuto -> . while SEMICOLON
    (6) vars -> . VAR vars_aux
    (29) asignacion -> . ID EQUAL expresion
    (55) condicion -> . IF LPAREN expresion RPAREN bloque ELSE bloque
    (56) condicion -> . IF LPAREN expresion RPAREN bloque
    (57) escritura -> . PRINT LPAREN escritura_aux RPAREN
    (52) return -> . RETURN expresion
    (53) for -> . FOR asignacion TO CTEINT LBRACKET estatuto RBRACKET
    (54) while -> . WHILE LPAREN expresion RPAREN LBRACKET estatuto RBRACKET

    VAR             shift and go to state 8
    ID              shift and go to state 40
    IF              shift and go to state 41
    PRINT           shift and go to state 42
    RETURN          shift and go to state 43
    FOR             shift and go to state 44
    WHILE           shift and go to state 45

    vars                           shift and go to state 33
    estatuto_module                shift and go to state 113
    estatuto                       shift and go to state 32
    asignacion                     shift and go to state 34
    condicion                      shift and go to state 35
    escritura                      shift and go to state 36
    return                         shift and go to state 37
    for                            shift and go to state 38
    while                          shift and go to state 39

state 94

    (49) module -> MODULE tipo ID LPAREN vars RPAREN . estatuto_module module
    (51) module -> MODULE tipo ID LPAREN vars RPAREN . estatuto_module
    (17) estatuto_module -> . estatuto
    (18) estatuto_module -> . vars
    (23) estatuto -> . asignacion SEMICOLON
    (24) estatuto -> . condicion SEMICOLON
    (25) estatuto -> . escritura SEMICOLON
    (26) estatuto -> . return SEMICOLON
    (27) estatuto -> . for SEMICOLON
    (28) estatuto -> . while SEMICOLON
    (6) vars -> . VAR vars_aux
    (29) asignacion -> . ID EQUAL expresion
    (55) condicion -> . IF LPAREN expresion RPAREN bloque ELSE bloque
    (56) condicion -> . IF LPAREN expresion RPAREN bloque
    (57) escritura -> . PRINT LPAREN escritura_aux RPAREN
    (52) return -> . RETURN expresion
    (53) for -> . FOR asignacion TO CTEINT LBRACKET estatuto RBRACKET
    (54) while -> . WHILE LPAREN expresion RPAREN LBRACKET estatuto RBRACKET

    VAR             shift and go to state 8
    ID              shift and go to state 40
    IF              shift and go to state 41
    PRINT           shift and go to state 42
    RETURN          shift and go to state 43
    FOR             shift and go to state 44
    WHILE           shift and go to state 45

    vars                           shift and go to state 33
    estatuto_module                shift and go to state 114
    estatuto                       shift and go to state 32
    asignacion                     shift and go to state 34
    condicion                      shift and go to state 35
    escritura                      shift and go to state 36
    return                         shift and go to state 37
    for                            shift and go to state 38
    while                          shift and go to state 39

state 95

    (55) condicion -> IF LPAREN expresion RPAREN . bloque ELSE bloque
    (56) condicion -> IF LPAREN expresion RPAREN . bloque
    (19) bloque -> . LBRACKET estatuto_aux RBRACKET
    (20) bloque -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 116

    bloque                         shift and go to state 115

state 96

    (57) escritura -> PRINT LPAREN escritura_aux RPAREN .

    SEMICOLON       reduce using rule 57 (escritura -> PRINT LPAREN escritura_aux RPAREN .)


state 97

    (58) escritura_aux -> expresion escritura_aux2 .

    RPAREN          reduce using rule 58 (escritura_aux -> expresion escritura_aux2 .)


state 98

    (62) escritura_aux2 -> COMA . escritura_aux
    (58) escritura_aux -> . expresion escritura_aux2
    (59) escritura_aux -> . CTESTRING escritura_aux2
    (60) escritura_aux -> . expresion
    (61) escritura_aux -> . CTESTRING
    (30) expresion -> . exp AND expresion
    (31) expresion -> . exp
    (32) exp -> . exp_aux OR exp
    (33) exp -> . exp_aux
    (34) exp_aux -> . exp_aux2 GREATERT exp_aux2
    (35) exp_aux -> . exp_aux2 LESST exp_aux2
    (36) exp_aux -> . exp_aux2 NOTEQUAL exp_aux2
    (37) exp_aux -> . exp_aux2 DBEQUALS exp_aux2
    (38) exp_aux -> . exp_aux2
    (39) exp_aux2 -> . term PLUS exp_aux2
    (40) exp_aux2 -> . term MINUS exp_aux2
    (41) exp_aux2 -> . term
    (42) term -> . factor MULTIPLY term
    (43) term -> . factor DIVIDE term
    (44) term -> . factor
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . CTEINT
    (47) factor -> . CTEF

    CTESTRING       shift and go to state 79
    LPAREN          shift and go to state 67
    CTEINT          shift and go to state 68
    CTEF            shift and go to state 69

    escritura_aux                  shift and go to state 117
    expresion                      shift and go to state 78
    exp                            shift and go to state 62
    exp_aux                        shift and go to state 63
    exp_aux2                       shift and go to state 64
    term                           shift and go to state 65
    factor                         shift and go to state 66

state 99

    (59) escritura_aux -> CTESTRING escritura_aux2 .

    RPAREN          reduce using rule 59 (escritura_aux -> CTESTRING escritura_aux2 .)


state 100

    (30) expresion -> exp AND expresion .

    SEMICOLON       reduce using rule 30 (expresion -> exp AND expresion .)
    TO              reduce using rule 30 (expresion -> exp AND expresion .)
    RPAREN          reduce using rule 30 (expresion -> exp AND expresion .)
    COMA            reduce using rule 30 (expresion -> exp AND expresion .)


state 101

    (32) exp -> exp_aux OR exp .

    AND             reduce using rule 32 (exp -> exp_aux OR exp .)
    SEMICOLON       reduce using rule 32 (exp -> exp_aux OR exp .)
    TO              reduce using rule 32 (exp -> exp_aux OR exp .)
    RPAREN          reduce using rule 32 (exp -> exp_aux OR exp .)
    COMA            reduce using rule 32 (exp -> exp_aux OR exp .)


state 102

    (34) exp_aux -> exp_aux2 GREATERT exp_aux2 .

    OR              reduce using rule 34 (exp_aux -> exp_aux2 GREATERT exp_aux2 .)
    AND             reduce using rule 34 (exp_aux -> exp_aux2 GREATERT exp_aux2 .)
    SEMICOLON       reduce using rule 34 (exp_aux -> exp_aux2 GREATERT exp_aux2 .)
    TO              reduce using rule 34 (exp_aux -> exp_aux2 GREATERT exp_aux2 .)
    RPAREN          reduce using rule 34 (exp_aux -> exp_aux2 GREATERT exp_aux2 .)
    COMA            reduce using rule 34 (exp_aux -> exp_aux2 GREATERT exp_aux2 .)


state 103

    (35) exp_aux -> exp_aux2 LESST exp_aux2 .

    OR              reduce using rule 35 (exp_aux -> exp_aux2 LESST exp_aux2 .)
    AND             reduce using rule 35 (exp_aux -> exp_aux2 LESST exp_aux2 .)
    SEMICOLON       reduce using rule 35 (exp_aux -> exp_aux2 LESST exp_aux2 .)
    TO              reduce using rule 35 (exp_aux -> exp_aux2 LESST exp_aux2 .)
    RPAREN          reduce using rule 35 (exp_aux -> exp_aux2 LESST exp_aux2 .)
    COMA            reduce using rule 35 (exp_aux -> exp_aux2 LESST exp_aux2 .)


state 104

    (36) exp_aux -> exp_aux2 NOTEQUAL exp_aux2 .

    OR              reduce using rule 36 (exp_aux -> exp_aux2 NOTEQUAL exp_aux2 .)
    AND             reduce using rule 36 (exp_aux -> exp_aux2 NOTEQUAL exp_aux2 .)
    SEMICOLON       reduce using rule 36 (exp_aux -> exp_aux2 NOTEQUAL exp_aux2 .)
    TO              reduce using rule 36 (exp_aux -> exp_aux2 NOTEQUAL exp_aux2 .)
    RPAREN          reduce using rule 36 (exp_aux -> exp_aux2 NOTEQUAL exp_aux2 .)
    COMA            reduce using rule 36 (exp_aux -> exp_aux2 NOTEQUAL exp_aux2 .)


state 105

    (37) exp_aux -> exp_aux2 DBEQUALS exp_aux2 .

    OR              reduce using rule 37 (exp_aux -> exp_aux2 DBEQUALS exp_aux2 .)
    AND             reduce using rule 37 (exp_aux -> exp_aux2 DBEQUALS exp_aux2 .)
    SEMICOLON       reduce using rule 37 (exp_aux -> exp_aux2 DBEQUALS exp_aux2 .)
    TO              reduce using rule 37 (exp_aux -> exp_aux2 DBEQUALS exp_aux2 .)
    RPAREN          reduce using rule 37 (exp_aux -> exp_aux2 DBEQUALS exp_aux2 .)
    COMA            reduce using rule 37 (exp_aux -> exp_aux2 DBEQUALS exp_aux2 .)


state 106

    (39) exp_aux2 -> term PLUS exp_aux2 .

    GREATERT        reduce using rule 39 (exp_aux2 -> term PLUS exp_aux2 .)
    LESST           reduce using rule 39 (exp_aux2 -> term PLUS exp_aux2 .)
    NOTEQUAL        reduce using rule 39 (exp_aux2 -> term PLUS exp_aux2 .)
    DBEQUALS        reduce using rule 39 (exp_aux2 -> term PLUS exp_aux2 .)
    OR              reduce using rule 39 (exp_aux2 -> term PLUS exp_aux2 .)
    AND             reduce using rule 39 (exp_aux2 -> term PLUS exp_aux2 .)
    SEMICOLON       reduce using rule 39 (exp_aux2 -> term PLUS exp_aux2 .)
    TO              reduce using rule 39 (exp_aux2 -> term PLUS exp_aux2 .)
    RPAREN          reduce using rule 39 (exp_aux2 -> term PLUS exp_aux2 .)
    COMA            reduce using rule 39 (exp_aux2 -> term PLUS exp_aux2 .)


state 107

    (40) exp_aux2 -> term MINUS exp_aux2 .

    GREATERT        reduce using rule 40 (exp_aux2 -> term MINUS exp_aux2 .)
    LESST           reduce using rule 40 (exp_aux2 -> term MINUS exp_aux2 .)
    NOTEQUAL        reduce using rule 40 (exp_aux2 -> term MINUS exp_aux2 .)
    DBEQUALS        reduce using rule 40 (exp_aux2 -> term MINUS exp_aux2 .)
    OR              reduce using rule 40 (exp_aux2 -> term MINUS exp_aux2 .)
    AND             reduce using rule 40 (exp_aux2 -> term MINUS exp_aux2 .)
    SEMICOLON       reduce using rule 40 (exp_aux2 -> term MINUS exp_aux2 .)
    TO              reduce using rule 40 (exp_aux2 -> term MINUS exp_aux2 .)
    RPAREN          reduce using rule 40 (exp_aux2 -> term MINUS exp_aux2 .)
    COMA            reduce using rule 40 (exp_aux2 -> term MINUS exp_aux2 .)


state 108

    (42) term -> factor MULTIPLY term .

    PLUS            reduce using rule 42 (term -> factor MULTIPLY term .)
    MINUS           reduce using rule 42 (term -> factor MULTIPLY term .)
    GREATERT        reduce using rule 42 (term -> factor MULTIPLY term .)
    LESST           reduce using rule 42 (term -> factor MULTIPLY term .)
    NOTEQUAL        reduce using rule 42 (term -> factor MULTIPLY term .)
    DBEQUALS        reduce using rule 42 (term -> factor MULTIPLY term .)
    OR              reduce using rule 42 (term -> factor MULTIPLY term .)
    AND             reduce using rule 42 (term -> factor MULTIPLY term .)
    SEMICOLON       reduce using rule 42 (term -> factor MULTIPLY term .)
    TO              reduce using rule 42 (term -> factor MULTIPLY term .)
    RPAREN          reduce using rule 42 (term -> factor MULTIPLY term .)
    COMA            reduce using rule 42 (term -> factor MULTIPLY term .)


state 109

    (43) term -> factor DIVIDE term .

    PLUS            reduce using rule 43 (term -> factor DIVIDE term .)
    MINUS           reduce using rule 43 (term -> factor DIVIDE term .)
    GREATERT        reduce using rule 43 (term -> factor DIVIDE term .)
    LESST           reduce using rule 43 (term -> factor DIVIDE term .)
    NOTEQUAL        reduce using rule 43 (term -> factor DIVIDE term .)
    DBEQUALS        reduce using rule 43 (term -> factor DIVIDE term .)
    OR              reduce using rule 43 (term -> factor DIVIDE term .)
    AND             reduce using rule 43 (term -> factor DIVIDE term .)
    SEMICOLON       reduce using rule 43 (term -> factor DIVIDE term .)
    TO              reduce using rule 43 (term -> factor DIVIDE term .)
    RPAREN          reduce using rule 43 (term -> factor DIVIDE term .)
    COMA            reduce using rule 43 (term -> factor DIVIDE term .)


state 110

    (45) factor -> LPAREN expresion RPAREN .

    MULTIPLY        reduce using rule 45 (factor -> LPAREN expresion RPAREN .)
    DIVIDE          reduce using rule 45 (factor -> LPAREN expresion RPAREN .)
    PLUS            reduce using rule 45 (factor -> LPAREN expresion RPAREN .)
    MINUS           reduce using rule 45 (factor -> LPAREN expresion RPAREN .)
    GREATERT        reduce using rule 45 (factor -> LPAREN expresion RPAREN .)
    LESST           reduce using rule 45 (factor -> LPAREN expresion RPAREN .)
    NOTEQUAL        reduce using rule 45 (factor -> LPAREN expresion RPAREN .)
    DBEQUALS        reduce using rule 45 (factor -> LPAREN expresion RPAREN .)
    OR              reduce using rule 45 (factor -> LPAREN expresion RPAREN .)
    AND             reduce using rule 45 (factor -> LPAREN expresion RPAREN .)
    SEMICOLON       reduce using rule 45 (factor -> LPAREN expresion RPAREN .)
    TO              reduce using rule 45 (factor -> LPAREN expresion RPAREN .)
    RPAREN          reduce using rule 45 (factor -> LPAREN expresion RPAREN .)
    COMA            reduce using rule 45 (factor -> LPAREN expresion RPAREN .)


state 111

    (53) for -> FOR asignacion TO CTEINT . LBRACKET estatuto RBRACKET

    LBRACKET        shift and go to state 118


state 112

    (54) while -> WHILE LPAREN expresion RPAREN . LBRACKET estatuto RBRACKET

    LBRACKET        shift and go to state 119


state 113

    (48) module -> MODULE VOID ID LPAREN vars RPAREN estatuto_module . module
    (50) module -> MODULE VOID ID LPAREN vars RPAREN estatuto_module .
    (48) module -> . MODULE VOID ID LPAREN vars RPAREN estatuto_module module
    (49) module -> . MODULE tipo ID LPAREN vars RPAREN estatuto_module module
    (50) module -> . MODULE VOID ID LPAREN vars RPAREN estatuto_module
    (51) module -> . MODULE tipo ID LPAREN vars RPAREN estatuto_module

    MAIN            reduce using rule 50 (module -> MODULE VOID ID LPAREN vars RPAREN estatuto_module .)
    MODULE          shift and go to state 9

    module                         shift and go to state 120

state 114

    (49) module -> MODULE tipo ID LPAREN vars RPAREN estatuto_module . module
    (51) module -> MODULE tipo ID LPAREN vars RPAREN estatuto_module .
    (48) module -> . MODULE VOID ID LPAREN vars RPAREN estatuto_module module
    (49) module -> . MODULE tipo ID LPAREN vars RPAREN estatuto_module module
    (50) module -> . MODULE VOID ID LPAREN vars RPAREN estatuto_module
    (51) module -> . MODULE tipo ID LPAREN vars RPAREN estatuto_module

    MAIN            reduce using rule 51 (module -> MODULE tipo ID LPAREN vars RPAREN estatuto_module .)
    MODULE          shift and go to state 9

    module                         shift and go to state 121

state 115

    (55) condicion -> IF LPAREN expresion RPAREN bloque . ELSE bloque
    (56) condicion -> IF LPAREN expresion RPAREN bloque .

    ELSE            shift and go to state 122
    SEMICOLON       reduce using rule 56 (condicion -> IF LPAREN expresion RPAREN bloque .)


state 116

    (19) bloque -> LBRACKET . estatuto_aux RBRACKET
    (20) bloque -> LBRACKET . RBRACKET
    (21) estatuto_aux -> . estatuto estatuto_aux
    (22) estatuto_aux -> . estatuto
    (23) estatuto -> . asignacion SEMICOLON
    (24) estatuto -> . condicion SEMICOLON
    (25) estatuto -> . escritura SEMICOLON
    (26) estatuto -> . return SEMICOLON
    (27) estatuto -> . for SEMICOLON
    (28) estatuto -> . while SEMICOLON
    (29) asignacion -> . ID EQUAL expresion
    (55) condicion -> . IF LPAREN expresion RPAREN bloque ELSE bloque
    (56) condicion -> . IF LPAREN expresion RPAREN bloque
    (57) escritura -> . PRINT LPAREN escritura_aux RPAREN
    (52) return -> . RETURN expresion
    (53) for -> . FOR asignacion TO CTEINT LBRACKET estatuto RBRACKET
    (54) while -> . WHILE LPAREN expresion RPAREN LBRACKET estatuto RBRACKET

    RBRACKET        shift and go to state 124
    ID              shift and go to state 40
    IF              shift and go to state 41
    PRINT           shift and go to state 42
    RETURN          shift and go to state 43
    FOR             shift and go to state 44
    WHILE           shift and go to state 45

    estatuto_aux                   shift and go to state 123
    estatuto                       shift and go to state 125
    asignacion                     shift and go to state 34
    condicion                      shift and go to state 35
    escritura                      shift and go to state 36
    return                         shift and go to state 37
    for                            shift and go to state 38
    while                          shift and go to state 39

state 117

    (62) escritura_aux2 -> COMA escritura_aux .

    RPAREN          reduce using rule 62 (escritura_aux2 -> COMA escritura_aux .)


state 118

    (53) for -> FOR asignacion TO CTEINT LBRACKET . estatuto RBRACKET
    (23) estatuto -> . asignacion SEMICOLON
    (24) estatuto -> . condicion SEMICOLON
    (25) estatuto -> . escritura SEMICOLON
    (26) estatuto -> . return SEMICOLON
    (27) estatuto -> . for SEMICOLON
    (28) estatuto -> . while SEMICOLON
    (29) asignacion -> . ID EQUAL expresion
    (55) condicion -> . IF LPAREN expresion RPAREN bloque ELSE bloque
    (56) condicion -> . IF LPAREN expresion RPAREN bloque
    (57) escritura -> . PRINT LPAREN escritura_aux RPAREN
    (52) return -> . RETURN expresion
    (53) for -> . FOR asignacion TO CTEINT LBRACKET estatuto RBRACKET
    (54) while -> . WHILE LPAREN expresion RPAREN LBRACKET estatuto RBRACKET

    ID              shift and go to state 40
    IF              shift and go to state 41
    PRINT           shift and go to state 42
    RETURN          shift and go to state 43
    FOR             shift and go to state 44
    WHILE           shift and go to state 45

    asignacion                     shift and go to state 34
    estatuto                       shift and go to state 126
    condicion                      shift and go to state 35
    escritura                      shift and go to state 36
    return                         shift and go to state 37
    for                            shift and go to state 38
    while                          shift and go to state 39

state 119

    (54) while -> WHILE LPAREN expresion RPAREN LBRACKET . estatuto RBRACKET
    (23) estatuto -> . asignacion SEMICOLON
    (24) estatuto -> . condicion SEMICOLON
    (25) estatuto -> . escritura SEMICOLON
    (26) estatuto -> . return SEMICOLON
    (27) estatuto -> . for SEMICOLON
    (28) estatuto -> . while SEMICOLON
    (29) asignacion -> . ID EQUAL expresion
    (55) condicion -> . IF LPAREN expresion RPAREN bloque ELSE bloque
    (56) condicion -> . IF LPAREN expresion RPAREN bloque
    (57) escritura -> . PRINT LPAREN escritura_aux RPAREN
    (52) return -> . RETURN expresion
    (53) for -> . FOR asignacion TO CTEINT LBRACKET estatuto RBRACKET
    (54) while -> . WHILE LPAREN expresion RPAREN LBRACKET estatuto RBRACKET

    ID              shift and go to state 40
    IF              shift and go to state 41
    PRINT           shift and go to state 42
    RETURN          shift and go to state 43
    FOR             shift and go to state 44
    WHILE           shift and go to state 45

    estatuto                       shift and go to state 127
    asignacion                     shift and go to state 34
    condicion                      shift and go to state 35
    escritura                      shift and go to state 36
    return                         shift and go to state 37
    for                            shift and go to state 38
    while                          shift and go to state 39

state 120

    (48) module -> MODULE VOID ID LPAREN vars RPAREN estatuto_module module .

    MAIN            reduce using rule 48 (module -> MODULE VOID ID LPAREN vars RPAREN estatuto_module module .)


state 121

    (49) module -> MODULE tipo ID LPAREN vars RPAREN estatuto_module module .

    MAIN            reduce using rule 49 (module -> MODULE tipo ID LPAREN vars RPAREN estatuto_module module .)


state 122

    (55) condicion -> IF LPAREN expresion RPAREN bloque ELSE . bloque
    (19) bloque -> . LBRACKET estatuto_aux RBRACKET
    (20) bloque -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 116

    bloque                         shift and go to state 128

state 123

    (19) bloque -> LBRACKET estatuto_aux . RBRACKET

    RBRACKET        shift and go to state 129


state 124

    (20) bloque -> LBRACKET RBRACKET .

    ELSE            reduce using rule 20 (bloque -> LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 20 (bloque -> LBRACKET RBRACKET .)


state 125

    (21) estatuto_aux -> estatuto . estatuto_aux
    (22) estatuto_aux -> estatuto .
    (21) estatuto_aux -> . estatuto estatuto_aux
    (22) estatuto_aux -> . estatuto
    (23) estatuto -> . asignacion SEMICOLON
    (24) estatuto -> . condicion SEMICOLON
    (25) estatuto -> . escritura SEMICOLON
    (26) estatuto -> . return SEMICOLON
    (27) estatuto -> . for SEMICOLON
    (28) estatuto -> . while SEMICOLON
    (29) asignacion -> . ID EQUAL expresion
    (55) condicion -> . IF LPAREN expresion RPAREN bloque ELSE bloque
    (56) condicion -> . IF LPAREN expresion RPAREN bloque
    (57) escritura -> . PRINT LPAREN escritura_aux RPAREN
    (52) return -> . RETURN expresion
    (53) for -> . FOR asignacion TO CTEINT LBRACKET estatuto RBRACKET
    (54) while -> . WHILE LPAREN expresion RPAREN LBRACKET estatuto RBRACKET

    RBRACKET        reduce using rule 22 (estatuto_aux -> estatuto .)
    ID              shift and go to state 40
    IF              shift and go to state 41
    PRINT           shift and go to state 42
    RETURN          shift and go to state 43
    FOR             shift and go to state 44
    WHILE           shift and go to state 45

    estatuto                       shift and go to state 125
    estatuto_aux                   shift and go to state 130
    asignacion                     shift and go to state 34
    condicion                      shift and go to state 35
    escritura                      shift and go to state 36
    return                         shift and go to state 37
    for                            shift and go to state 38
    while                          shift and go to state 39

state 126

    (53) for -> FOR asignacion TO CTEINT LBRACKET estatuto . RBRACKET

    RBRACKET        shift and go to state 131


state 127

    (54) while -> WHILE LPAREN expresion RPAREN LBRACKET estatuto . RBRACKET

    RBRACKET        shift and go to state 132


state 128

    (55) condicion -> IF LPAREN expresion RPAREN bloque ELSE bloque .

    SEMICOLON       reduce using rule 55 (condicion -> IF LPAREN expresion RPAREN bloque ELSE bloque .)


state 129

    (19) bloque -> LBRACKET estatuto_aux RBRACKET .

    ELSE            reduce using rule 19 (bloque -> LBRACKET estatuto_aux RBRACKET .)
    SEMICOLON       reduce using rule 19 (bloque -> LBRACKET estatuto_aux RBRACKET .)


state 130

    (21) estatuto_aux -> estatuto estatuto_aux .

    RBRACKET        reduce using rule 21 (estatuto_aux -> estatuto estatuto_aux .)


state 131

    (53) for -> FOR asignacion TO CTEINT LBRACKET estatuto RBRACKET .

    SEMICOLON       reduce using rule 53 (for -> FOR asignacion TO CTEINT LBRACKET estatuto RBRACKET .)


state 132

    (54) while -> WHILE LPAREN expresion RPAREN LBRACKET estatuto RBRACKET .

    SEMICOLON       reduce using rule 54 (while -> WHILE LPAREN expresion RPAREN LBRACKET estatuto RBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 15 resolved as shift
