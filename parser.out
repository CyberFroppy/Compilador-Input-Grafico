Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    THEN
    DO
    WRITE
    READ

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM ID SEMICOLON vars module main
Rule 2     programa -> PROGRAM ID SEMICOLON module main
Rule 3     programa -> PROGRAM ID SEMICOLON vars main
Rule 4     programa -> PROGRAM ID SEMICOLON main
Rule 5     main -> MAIN bloque_module
Rule 6     vars -> VAR vars_aux
Rule 7     vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux
Rule 8     vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type DOT
Rule 9     vars_func -> ID n_seen_var_name COLON tipo n_set_var_type COMA vars_func
Rule 10    vars_func -> ID n_seen_var_name COLON tipo n_set_var_type
Rule 11    tipo -> INT n_seen_type
Rule 12    tipo -> FLOAT n_seen_type
Rule 13    tipo -> CHAR n_seen_type
Rule 14    bloque_module -> LBRACKET vars estatuto_aux RBRACKET
Rule 15    bloque_module -> LBRACKET vars RBRACKET
Rule 16    bloque_module -> LBRACKET estatuto_aux RBRACKET
Rule 17    bloque_module -> LBRACKET RBRACKET
Rule 18    bloque -> LBRACKET estatuto_aux RBRACKET
Rule 19    bloque -> LBRACKET RBRACKET
Rule 20    estatuto_aux -> estatuto estatuto_aux
Rule 21    estatuto_aux -> estatuto
Rule 22    estatuto -> asignacion SEMICOLON
Rule 23    estatuto -> condicion SEMICOLON
Rule 24    estatuto -> escritura SEMICOLON
Rule 25    estatuto -> return SEMICOLON
Rule 26    estatuto -> for SEMICOLON
Rule 27    estatuto -> while SEMICOLON
Rule 28    estatuto -> call_module SEMICOLON
Rule 29    asignacion -> ID EQUAL expresion
Rule 30    expresion -> exp AND expresion
Rule 31    expresion -> exp
Rule 32    exp -> exp_aux OR exp
Rule 33    exp -> exp_aux
Rule 34    exp_aux -> exp_aux2 GREATERT exp_aux2
Rule 35    exp_aux -> exp_aux2 LESST exp_aux2
Rule 36    exp_aux -> exp_aux2 NOTEQUAL exp_aux2
Rule 37    exp_aux -> exp_aux2 DBEQUALS exp_aux2
Rule 38    exp_aux -> exp_aux2
Rule 39    exp_aux2 -> term PLUS n_add_operator exp_aux2
Rule 40    exp_aux2 -> term MINUS n_add_operator exp_aux2
Rule 41    exp_aux2 -> term
Rule 42    term -> factor MULTIPLY n_add_operator term
Rule 43    term -> factor DIVIDE n_add_operator term
Rule 44    term -> factor
Rule 45    factor -> LPAREN expresion RPAREN
Rule 46    factor -> CTEINT n_seen_factor_int
Rule 47    factor -> CTEF n_seen_factor_float
Rule 48    factor -> CTEC n_seen_factor_char
Rule 49    factor -> ID n_seen_factor_id
Rule 50    module -> MODULE VOID n_seen_type ID n_seen_func_name params bloque_module module
Rule 51    module -> MODULE tipo ID n_seen_func_name params bloque_module module
Rule 52    module -> MODULE VOID n_seen_type ID n_seen_func_name params bloque_module
Rule 53    module -> MODULE tipo ID n_seen_func_name params bloque_module
Rule 54    params -> LPAREN vars_func RPAREN
Rule 55    params -> LPAREN RPAREN
Rule 56    call_module -> ID LPAREN expresion RPAREN
Rule 57    call_module -> ID LPAREN RPAREN
Rule 58    return -> RETURN expresion
Rule 59    for -> FOR asignacion TO CTEINT LBRACKET estatuto RBRACKET
Rule 60    while -> WHILE LPAREN expresion RPAREN LBRACKET estatuto RBRACKET
Rule 61    condicion -> IF LPAREN expresion RPAREN bloque ELSE bloque
Rule 62    condicion -> IF LPAREN expresion RPAREN bloque
Rule 63    escritura -> PRINT LPAREN escritura_aux RPAREN
Rule 64    escritura_aux -> expresion COMA escritura_aux
Rule 65    escritura_aux -> CTESTRING COMA escritura_aux
Rule 66    escritura_aux -> expresion
Rule 67    escritura_aux -> CTESTRING
Rule 68    n_seen_type -> <empty>
Rule 69    n_seen_var_name -> <empty>
Rule 70    n_seen_func_name -> <empty>
Rule 71    n_set_var_type -> <empty>
Rule 72    n_seen_factor_id -> <empty>
Rule 73    n_seen_factor_int -> <empty>
Rule 74    n_seen_factor_float -> <empty>
Rule 75    n_seen_factor_char -> <empty>
Rule 76    n_add_operator -> <empty>

Terminals, with rules where they appear

AND                  : 30
CHAR                 : 13
COLON                : 7 8 9 10
COMA                 : 9 64 65
COMMENT              : 
CTEC                 : 48
CTEF                 : 47
CTEINT               : 46 59
CTESTRING            : 65 67
DBEQUALS             : 37
DIVIDE               : 43
DO                   : 
DOT                  : 8
ELSE                 : 61
EQUAL                : 29
FLOAT                : 12
FOR                  : 59
GREATERT             : 34
ID                   : 1 2 3 4 7 8 9 10 29 49 50 51 52 53 56 57
IF                   : 61 62
INT                  : 11
LBRACKET             : 14 15 16 17 18 19 59 60
LESST                : 35
LPAREN               : 45 54 55 56 57 60 61 62 63
MAIN                 : 5
MINUS                : 40
MODULE               : 50 51 52 53
MULTIPLY             : 42
NOTEQUAL             : 36
OR                   : 32
PLUS                 : 39
PRINT                : 63
PROGRAM              : 1 2 3 4
RBRACKET             : 14 15 16 17 18 19 59 60
READ                 : 
RETURN               : 58
RPAREN               : 45 54 55 56 57 60 61 62 63
SEMICOLON            : 1 2 3 4 7 22 23 24 25 26 27 28
THEN                 : 
TO                   : 59
VAR                  : 6
VOID                 : 50 52
WHILE                : 60
WRITE                : 
error                : 

Nonterminals, with rules where they appear

asignacion           : 22 59
bloque               : 61 61 62
bloque_module        : 5 50 51 52 53
call_module          : 28
condicion            : 23
escritura            : 24
escritura_aux        : 63 64 65
estatuto             : 20 21 59 60
estatuto_aux         : 14 16 18 20
exp                  : 30 31 32
exp_aux              : 32 33
exp_aux2             : 34 34 35 35 36 36 37 37 38 39 40
expresion            : 29 30 45 56 58 60 61 62 64 66
factor               : 42 43 44
for                  : 26
main                 : 1 2 3 4
module               : 1 2 50 51
n_add_operator       : 39 40 42 43
n_seen_factor_char   : 48
n_seen_factor_float  : 47
n_seen_factor_id     : 49
n_seen_factor_int    : 46
n_seen_func_name     : 50 51 52 53
n_seen_type          : 11 12 13 50 52
n_seen_var_name      : 7 8 9 10
n_set_var_type       : 7 8 9 10
params               : 50 51 52 53
programa             : 0
return               : 25
term                 : 39 40 41 42 43
tipo                 : 7 8 9 10 51 53
vars                 : 1 3 14 15
vars_aux             : 6 7
vars_func            : 9 54
while                : 27

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM ID SEMICOLON vars module main
    (2) programa -> . PROGRAM ID SEMICOLON module main
    (3) programa -> . PROGRAM ID SEMICOLON vars main
    (4) programa -> . PROGRAM ID SEMICOLON main

    PROGRAM         shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAM . ID SEMICOLON vars module main
    (2) programa -> PROGRAM . ID SEMICOLON module main
    (3) programa -> PROGRAM . ID SEMICOLON vars main
    (4) programa -> PROGRAM . ID SEMICOLON main

    ID              shift and go to state 3


state 3

    (1) programa -> PROGRAM ID . SEMICOLON vars module main
    (2) programa -> PROGRAM ID . SEMICOLON module main
    (3) programa -> PROGRAM ID . SEMICOLON vars main
    (4) programa -> PROGRAM ID . SEMICOLON main

    SEMICOLON       shift and go to state 4


state 4

    (1) programa -> PROGRAM ID SEMICOLON . vars module main
    (2) programa -> PROGRAM ID SEMICOLON . module main
    (3) programa -> PROGRAM ID SEMICOLON . vars main
    (4) programa -> PROGRAM ID SEMICOLON . main
    (6) vars -> . VAR vars_aux
    (50) module -> . MODULE VOID n_seen_type ID n_seen_func_name params bloque_module module
    (51) module -> . MODULE tipo ID n_seen_func_name params bloque_module module
    (52) module -> . MODULE VOID n_seen_type ID n_seen_func_name params bloque_module
    (53) module -> . MODULE tipo ID n_seen_func_name params bloque_module
    (5) main -> . MAIN bloque_module

    VAR             shift and go to state 8
    MODULE          shift and go to state 9
    MAIN            shift and go to state 10

    vars                           shift and go to state 5
    module                         shift and go to state 6
    main                           shift and go to state 7

state 5

    (1) programa -> PROGRAM ID SEMICOLON vars . module main
    (3) programa -> PROGRAM ID SEMICOLON vars . main
    (50) module -> . MODULE VOID n_seen_type ID n_seen_func_name params bloque_module module
    (51) module -> . MODULE tipo ID n_seen_func_name params bloque_module module
    (52) module -> . MODULE VOID n_seen_type ID n_seen_func_name params bloque_module
    (53) module -> . MODULE tipo ID n_seen_func_name params bloque_module
    (5) main -> . MAIN bloque_module

    MODULE          shift and go to state 9
    MAIN            shift and go to state 10

    module                         shift and go to state 11
    main                           shift and go to state 12

state 6

    (2) programa -> PROGRAM ID SEMICOLON module . main
    (5) main -> . MAIN bloque_module

    MAIN            shift and go to state 10

    main                           shift and go to state 13

state 7

    (4) programa -> PROGRAM ID SEMICOLON main .

    $end            reduce using rule 4 (programa -> PROGRAM ID SEMICOLON main .)


state 8

    (6) vars -> VAR . vars_aux
    (7) vars_aux -> . ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux
    (8) vars_aux -> . ID n_seen_var_name COLON tipo n_set_var_type DOT

    ID              shift and go to state 15

    vars_aux                       shift and go to state 14

state 9

    (50) module -> MODULE . VOID n_seen_type ID n_seen_func_name params bloque_module module
    (51) module -> MODULE . tipo ID n_seen_func_name params bloque_module module
    (52) module -> MODULE . VOID n_seen_type ID n_seen_func_name params bloque_module
    (53) module -> MODULE . tipo ID n_seen_func_name params bloque_module
    (11) tipo -> . INT n_seen_type
    (12) tipo -> . FLOAT n_seen_type
    (13) tipo -> . CHAR n_seen_type

    VOID            shift and go to state 16
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20

    tipo                           shift and go to state 17

state 10

    (5) main -> MAIN . bloque_module
    (14) bloque_module -> . LBRACKET vars estatuto_aux RBRACKET
    (15) bloque_module -> . LBRACKET vars RBRACKET
    (16) bloque_module -> . LBRACKET estatuto_aux RBRACKET
    (17) bloque_module -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 22

    bloque_module                  shift and go to state 21

state 11

    (1) programa -> PROGRAM ID SEMICOLON vars module . main
    (5) main -> . MAIN bloque_module

    MAIN            shift and go to state 10

    main                           shift and go to state 23

state 12

    (3) programa -> PROGRAM ID SEMICOLON vars main .

    $end            reduce using rule 3 (programa -> PROGRAM ID SEMICOLON vars main .)


state 13

    (2) programa -> PROGRAM ID SEMICOLON module main .

    $end            reduce using rule 2 (programa -> PROGRAM ID SEMICOLON module main .)


state 14

    (6) vars -> VAR vars_aux .

    MODULE          reduce using rule 6 (vars -> VAR vars_aux .)
    MAIN            reduce using rule 6 (vars -> VAR vars_aux .)
    RBRACKET        reduce using rule 6 (vars -> VAR vars_aux .)
    ID              reduce using rule 6 (vars -> VAR vars_aux .)
    IF              reduce using rule 6 (vars -> VAR vars_aux .)
    PRINT           reduce using rule 6 (vars -> VAR vars_aux .)
    RETURN          reduce using rule 6 (vars -> VAR vars_aux .)
    FOR             reduce using rule 6 (vars -> VAR vars_aux .)
    WHILE           reduce using rule 6 (vars -> VAR vars_aux .)


state 15

    (7) vars_aux -> ID . n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux
    (8) vars_aux -> ID . n_seen_var_name COLON tipo n_set_var_type DOT
    (69) n_seen_var_name -> .

    COLON           reduce using rule 69 (n_seen_var_name -> .)

    n_seen_var_name                shift and go to state 24

state 16

    (50) module -> MODULE VOID . n_seen_type ID n_seen_func_name params bloque_module module
    (52) module -> MODULE VOID . n_seen_type ID n_seen_func_name params bloque_module
    (68) n_seen_type -> .

    ID              reduce using rule 68 (n_seen_type -> .)

    n_seen_type                    shift and go to state 25

state 17

    (51) module -> MODULE tipo . ID n_seen_func_name params bloque_module module
    (53) module -> MODULE tipo . ID n_seen_func_name params bloque_module

    ID              shift and go to state 26


state 18

    (11) tipo -> INT . n_seen_type
    (68) n_seen_type -> .

    ID              reduce using rule 68 (n_seen_type -> .)
    SEMICOLON       reduce using rule 68 (n_seen_type -> .)
    DOT             reduce using rule 68 (n_seen_type -> .)
    COMA            reduce using rule 68 (n_seen_type -> .)
    RPAREN          reduce using rule 68 (n_seen_type -> .)

    n_seen_type                    shift and go to state 27

state 19

    (12) tipo -> FLOAT . n_seen_type
    (68) n_seen_type -> .

    ID              reduce using rule 68 (n_seen_type -> .)
    SEMICOLON       reduce using rule 68 (n_seen_type -> .)
    DOT             reduce using rule 68 (n_seen_type -> .)
    COMA            reduce using rule 68 (n_seen_type -> .)
    RPAREN          reduce using rule 68 (n_seen_type -> .)

    n_seen_type                    shift and go to state 28

state 20

    (13) tipo -> CHAR . n_seen_type
    (68) n_seen_type -> .

    ID              reduce using rule 68 (n_seen_type -> .)
    SEMICOLON       reduce using rule 68 (n_seen_type -> .)
    DOT             reduce using rule 68 (n_seen_type -> .)
    COMA            reduce using rule 68 (n_seen_type -> .)
    RPAREN          reduce using rule 68 (n_seen_type -> .)

    n_seen_type                    shift and go to state 29

state 21

    (5) main -> MAIN bloque_module .

    $end            reduce using rule 5 (main -> MAIN bloque_module .)


state 22

    (14) bloque_module -> LBRACKET . vars estatuto_aux RBRACKET
    (15) bloque_module -> LBRACKET . vars RBRACKET
    (16) bloque_module -> LBRACKET . estatuto_aux RBRACKET
    (17) bloque_module -> LBRACKET . RBRACKET
    (6) vars -> . VAR vars_aux
    (20) estatuto_aux -> . estatuto estatuto_aux
    (21) estatuto_aux -> . estatuto
    (22) estatuto -> . asignacion SEMICOLON
    (23) estatuto -> . condicion SEMICOLON
    (24) estatuto -> . escritura SEMICOLON
    (25) estatuto -> . return SEMICOLON
    (26) estatuto -> . for SEMICOLON
    (27) estatuto -> . while SEMICOLON
    (28) estatuto -> . call_module SEMICOLON
    (29) asignacion -> . ID EQUAL expresion
    (61) condicion -> . IF LPAREN expresion RPAREN bloque ELSE bloque
    (62) condicion -> . IF LPAREN expresion RPAREN bloque
    (63) escritura -> . PRINT LPAREN escritura_aux RPAREN
    (58) return -> . RETURN expresion
    (59) for -> . FOR asignacion TO CTEINT LBRACKET estatuto RBRACKET
    (60) while -> . WHILE LPAREN expresion RPAREN LBRACKET estatuto RBRACKET
    (56) call_module -> . ID LPAREN expresion RPAREN
    (57) call_module -> . ID LPAREN RPAREN

    RBRACKET        shift and go to state 32
    VAR             shift and go to state 8
    ID              shift and go to state 41
    IF              shift and go to state 42
    PRINT           shift and go to state 43
    RETURN          shift and go to state 44
    FOR             shift and go to state 45
    WHILE           shift and go to state 46

    vars                           shift and go to state 30
    estatuto_aux                   shift and go to state 31
    estatuto                       shift and go to state 33
    asignacion                     shift and go to state 34
    condicion                      shift and go to state 35
    escritura                      shift and go to state 36
    return                         shift and go to state 37
    for                            shift and go to state 38
    while                          shift and go to state 39
    call_module                    shift and go to state 40

state 23

    (1) programa -> PROGRAM ID SEMICOLON vars module main .

    $end            reduce using rule 1 (programa -> PROGRAM ID SEMICOLON vars module main .)


state 24

    (7) vars_aux -> ID n_seen_var_name . COLON tipo n_set_var_type SEMICOLON vars_aux
    (8) vars_aux -> ID n_seen_var_name . COLON tipo n_set_var_type DOT

    COLON           shift and go to state 47


state 25

    (50) module -> MODULE VOID n_seen_type . ID n_seen_func_name params bloque_module module
    (52) module -> MODULE VOID n_seen_type . ID n_seen_func_name params bloque_module

    ID              shift and go to state 48


state 26

    (51) module -> MODULE tipo ID . n_seen_func_name params bloque_module module
    (53) module -> MODULE tipo ID . n_seen_func_name params bloque_module
    (70) n_seen_func_name -> .

    LPAREN          reduce using rule 70 (n_seen_func_name -> .)

    n_seen_func_name               shift and go to state 49

state 27

    (11) tipo -> INT n_seen_type .

    ID              reduce using rule 11 (tipo -> INT n_seen_type .)
    SEMICOLON       reduce using rule 11 (tipo -> INT n_seen_type .)
    DOT             reduce using rule 11 (tipo -> INT n_seen_type .)
    COMA            reduce using rule 11 (tipo -> INT n_seen_type .)
    RPAREN          reduce using rule 11 (tipo -> INT n_seen_type .)


state 28

    (12) tipo -> FLOAT n_seen_type .

    ID              reduce using rule 12 (tipo -> FLOAT n_seen_type .)
    SEMICOLON       reduce using rule 12 (tipo -> FLOAT n_seen_type .)
    DOT             reduce using rule 12 (tipo -> FLOAT n_seen_type .)
    COMA            reduce using rule 12 (tipo -> FLOAT n_seen_type .)
    RPAREN          reduce using rule 12 (tipo -> FLOAT n_seen_type .)


state 29

    (13) tipo -> CHAR n_seen_type .

    ID              reduce using rule 13 (tipo -> CHAR n_seen_type .)
    SEMICOLON       reduce using rule 13 (tipo -> CHAR n_seen_type .)
    DOT             reduce using rule 13 (tipo -> CHAR n_seen_type .)
    COMA            reduce using rule 13 (tipo -> CHAR n_seen_type .)
    RPAREN          reduce using rule 13 (tipo -> CHAR n_seen_type .)


state 30

    (14) bloque_module -> LBRACKET vars . estatuto_aux RBRACKET
    (15) bloque_module -> LBRACKET vars . RBRACKET
    (20) estatuto_aux -> . estatuto estatuto_aux
    (21) estatuto_aux -> . estatuto
    (22) estatuto -> . asignacion SEMICOLON
    (23) estatuto -> . condicion SEMICOLON
    (24) estatuto -> . escritura SEMICOLON
    (25) estatuto -> . return SEMICOLON
    (26) estatuto -> . for SEMICOLON
    (27) estatuto -> . while SEMICOLON
    (28) estatuto -> . call_module SEMICOLON
    (29) asignacion -> . ID EQUAL expresion
    (61) condicion -> . IF LPAREN expresion RPAREN bloque ELSE bloque
    (62) condicion -> . IF LPAREN expresion RPAREN bloque
    (63) escritura -> . PRINT LPAREN escritura_aux RPAREN
    (58) return -> . RETURN expresion
    (59) for -> . FOR asignacion TO CTEINT LBRACKET estatuto RBRACKET
    (60) while -> . WHILE LPAREN expresion RPAREN LBRACKET estatuto RBRACKET
    (56) call_module -> . ID LPAREN expresion RPAREN
    (57) call_module -> . ID LPAREN RPAREN

    RBRACKET        shift and go to state 51
    ID              shift and go to state 41
    IF              shift and go to state 42
    PRINT           shift and go to state 43
    RETURN          shift and go to state 44
    FOR             shift and go to state 45
    WHILE           shift and go to state 46

    estatuto_aux                   shift and go to state 50
    estatuto                       shift and go to state 33
    asignacion                     shift and go to state 34
    condicion                      shift and go to state 35
    escritura                      shift and go to state 36
    return                         shift and go to state 37
    for                            shift and go to state 38
    while                          shift and go to state 39
    call_module                    shift and go to state 40

state 31

    (16) bloque_module -> LBRACKET estatuto_aux . RBRACKET

    RBRACKET        shift and go to state 52


state 32

    (17) bloque_module -> LBRACKET RBRACKET .

    $end            reduce using rule 17 (bloque_module -> LBRACKET RBRACKET .)
    MODULE          reduce using rule 17 (bloque_module -> LBRACKET RBRACKET .)
    MAIN            reduce using rule 17 (bloque_module -> LBRACKET RBRACKET .)


state 33

    (20) estatuto_aux -> estatuto . estatuto_aux
    (21) estatuto_aux -> estatuto .
    (20) estatuto_aux -> . estatuto estatuto_aux
    (21) estatuto_aux -> . estatuto
    (22) estatuto -> . asignacion SEMICOLON
    (23) estatuto -> . condicion SEMICOLON
    (24) estatuto -> . escritura SEMICOLON
    (25) estatuto -> . return SEMICOLON
    (26) estatuto -> . for SEMICOLON
    (27) estatuto -> . while SEMICOLON
    (28) estatuto -> . call_module SEMICOLON
    (29) asignacion -> . ID EQUAL expresion
    (61) condicion -> . IF LPAREN expresion RPAREN bloque ELSE bloque
    (62) condicion -> . IF LPAREN expresion RPAREN bloque
    (63) escritura -> . PRINT LPAREN escritura_aux RPAREN
    (58) return -> . RETURN expresion
    (59) for -> . FOR asignacion TO CTEINT LBRACKET estatuto RBRACKET
    (60) while -> . WHILE LPAREN expresion RPAREN LBRACKET estatuto RBRACKET
    (56) call_module -> . ID LPAREN expresion RPAREN
    (57) call_module -> . ID LPAREN RPAREN

    RBRACKET        reduce using rule 21 (estatuto_aux -> estatuto .)
    ID              shift and go to state 41
    IF              shift and go to state 42
    PRINT           shift and go to state 43
    RETURN          shift and go to state 44
    FOR             shift and go to state 45
    WHILE           shift and go to state 46

    estatuto                       shift and go to state 33
    estatuto_aux                   shift and go to state 53
    asignacion                     shift and go to state 34
    condicion                      shift and go to state 35
    escritura                      shift and go to state 36
    return                         shift and go to state 37
    for                            shift and go to state 38
    while                          shift and go to state 39
    call_module                    shift and go to state 40

state 34

    (22) estatuto -> asignacion . SEMICOLON

    SEMICOLON       shift and go to state 54


state 35

    (23) estatuto -> condicion . SEMICOLON

    SEMICOLON       shift and go to state 55


state 36

    (24) estatuto -> escritura . SEMICOLON

    SEMICOLON       shift and go to state 56


state 37

    (25) estatuto -> return . SEMICOLON

    SEMICOLON       shift and go to state 57


state 38

    (26) estatuto -> for . SEMICOLON

    SEMICOLON       shift and go to state 58


state 39

    (27) estatuto -> while . SEMICOLON

    SEMICOLON       shift and go to state 59


state 40

    (28) estatuto -> call_module . SEMICOLON

    SEMICOLON       shift and go to state 60


state 41

    (29) asignacion -> ID . EQUAL expresion
    (56) call_module -> ID . LPAREN expresion RPAREN
    (57) call_module -> ID . LPAREN RPAREN

    EQUAL           shift and go to state 61
    LPAREN          shift and go to state 62


state 42

    (61) condicion -> IF . LPAREN expresion RPAREN bloque ELSE bloque
    (62) condicion -> IF . LPAREN expresion RPAREN bloque

    LPAREN          shift and go to state 63


state 43

    (63) escritura -> PRINT . LPAREN escritura_aux RPAREN

    LPAREN          shift and go to state 64


state 44

    (58) return -> RETURN . expresion
    (30) expresion -> . exp AND expresion
    (31) expresion -> . exp
    (32) exp -> . exp_aux OR exp
    (33) exp -> . exp_aux
    (34) exp_aux -> . exp_aux2 GREATERT exp_aux2
    (35) exp_aux -> . exp_aux2 LESST exp_aux2
    (36) exp_aux -> . exp_aux2 NOTEQUAL exp_aux2
    (37) exp_aux -> . exp_aux2 DBEQUALS exp_aux2
    (38) exp_aux -> . exp_aux2
    (39) exp_aux2 -> . term PLUS n_add_operator exp_aux2
    (40) exp_aux2 -> . term MINUS n_add_operator exp_aux2
    (41) exp_aux2 -> . term
    (42) term -> . factor MULTIPLY n_add_operator term
    (43) term -> . factor DIVIDE n_add_operator term
    (44) term -> . factor
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . CTEINT n_seen_factor_int
    (47) factor -> . CTEF n_seen_factor_float
    (48) factor -> . CTEC n_seen_factor_char
    (49) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 71
    CTEINT          shift and go to state 72
    CTEF            shift and go to state 73
    CTEC            shift and go to state 74
    ID              shift and go to state 75

    expresion                      shift and go to state 65
    exp                            shift and go to state 66
    exp_aux                        shift and go to state 67
    exp_aux2                       shift and go to state 68
    term                           shift and go to state 69
    factor                         shift and go to state 70

state 45

    (59) for -> FOR . asignacion TO CTEINT LBRACKET estatuto RBRACKET
    (29) asignacion -> . ID EQUAL expresion

    ID              shift and go to state 77

    asignacion                     shift and go to state 76

state 46

    (60) while -> WHILE . LPAREN expresion RPAREN LBRACKET estatuto RBRACKET

    LPAREN          shift and go to state 78


state 47

    (7) vars_aux -> ID n_seen_var_name COLON . tipo n_set_var_type SEMICOLON vars_aux
    (8) vars_aux -> ID n_seen_var_name COLON . tipo n_set_var_type DOT
    (11) tipo -> . INT n_seen_type
    (12) tipo -> . FLOAT n_seen_type
    (13) tipo -> . CHAR n_seen_type

    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20

    tipo                           shift and go to state 79

state 48

    (50) module -> MODULE VOID n_seen_type ID . n_seen_func_name params bloque_module module
    (52) module -> MODULE VOID n_seen_type ID . n_seen_func_name params bloque_module
    (70) n_seen_func_name -> .

    LPAREN          reduce using rule 70 (n_seen_func_name -> .)

    n_seen_func_name               shift and go to state 80

state 49

    (51) module -> MODULE tipo ID n_seen_func_name . params bloque_module module
    (53) module -> MODULE tipo ID n_seen_func_name . params bloque_module
    (54) params -> . LPAREN vars_func RPAREN
    (55) params -> . LPAREN RPAREN

    LPAREN          shift and go to state 82

    params                         shift and go to state 81

state 50

    (14) bloque_module -> LBRACKET vars estatuto_aux . RBRACKET

    RBRACKET        shift and go to state 83


state 51

    (15) bloque_module -> LBRACKET vars RBRACKET .

    $end            reduce using rule 15 (bloque_module -> LBRACKET vars RBRACKET .)
    MODULE          reduce using rule 15 (bloque_module -> LBRACKET vars RBRACKET .)
    MAIN            reduce using rule 15 (bloque_module -> LBRACKET vars RBRACKET .)


state 52

    (16) bloque_module -> LBRACKET estatuto_aux RBRACKET .

    $end            reduce using rule 16 (bloque_module -> LBRACKET estatuto_aux RBRACKET .)
    MODULE          reduce using rule 16 (bloque_module -> LBRACKET estatuto_aux RBRACKET .)
    MAIN            reduce using rule 16 (bloque_module -> LBRACKET estatuto_aux RBRACKET .)


state 53

    (20) estatuto_aux -> estatuto estatuto_aux .

    RBRACKET        reduce using rule 20 (estatuto_aux -> estatuto estatuto_aux .)


state 54

    (22) estatuto -> asignacion SEMICOLON .

    ID              reduce using rule 22 (estatuto -> asignacion SEMICOLON .)
    IF              reduce using rule 22 (estatuto -> asignacion SEMICOLON .)
    PRINT           reduce using rule 22 (estatuto -> asignacion SEMICOLON .)
    RETURN          reduce using rule 22 (estatuto -> asignacion SEMICOLON .)
    FOR             reduce using rule 22 (estatuto -> asignacion SEMICOLON .)
    WHILE           reduce using rule 22 (estatuto -> asignacion SEMICOLON .)
    RBRACKET        reduce using rule 22 (estatuto -> asignacion SEMICOLON .)


state 55

    (23) estatuto -> condicion SEMICOLON .

    ID              reduce using rule 23 (estatuto -> condicion SEMICOLON .)
    IF              reduce using rule 23 (estatuto -> condicion SEMICOLON .)
    PRINT           reduce using rule 23 (estatuto -> condicion SEMICOLON .)
    RETURN          reduce using rule 23 (estatuto -> condicion SEMICOLON .)
    FOR             reduce using rule 23 (estatuto -> condicion SEMICOLON .)
    WHILE           reduce using rule 23 (estatuto -> condicion SEMICOLON .)
    RBRACKET        reduce using rule 23 (estatuto -> condicion SEMICOLON .)


state 56

    (24) estatuto -> escritura SEMICOLON .

    ID              reduce using rule 24 (estatuto -> escritura SEMICOLON .)
    IF              reduce using rule 24 (estatuto -> escritura SEMICOLON .)
    PRINT           reduce using rule 24 (estatuto -> escritura SEMICOLON .)
    RETURN          reduce using rule 24 (estatuto -> escritura SEMICOLON .)
    FOR             reduce using rule 24 (estatuto -> escritura SEMICOLON .)
    WHILE           reduce using rule 24 (estatuto -> escritura SEMICOLON .)
    RBRACKET        reduce using rule 24 (estatuto -> escritura SEMICOLON .)


state 57

    (25) estatuto -> return SEMICOLON .

    ID              reduce using rule 25 (estatuto -> return SEMICOLON .)
    IF              reduce using rule 25 (estatuto -> return SEMICOLON .)
    PRINT           reduce using rule 25 (estatuto -> return SEMICOLON .)
    RETURN          reduce using rule 25 (estatuto -> return SEMICOLON .)
    FOR             reduce using rule 25 (estatuto -> return SEMICOLON .)
    WHILE           reduce using rule 25 (estatuto -> return SEMICOLON .)
    RBRACKET        reduce using rule 25 (estatuto -> return SEMICOLON .)


state 58

    (26) estatuto -> for SEMICOLON .

    ID              reduce using rule 26 (estatuto -> for SEMICOLON .)
    IF              reduce using rule 26 (estatuto -> for SEMICOLON .)
    PRINT           reduce using rule 26 (estatuto -> for SEMICOLON .)
    RETURN          reduce using rule 26 (estatuto -> for SEMICOLON .)
    FOR             reduce using rule 26 (estatuto -> for SEMICOLON .)
    WHILE           reduce using rule 26 (estatuto -> for SEMICOLON .)
    RBRACKET        reduce using rule 26 (estatuto -> for SEMICOLON .)


state 59

    (27) estatuto -> while SEMICOLON .

    ID              reduce using rule 27 (estatuto -> while SEMICOLON .)
    IF              reduce using rule 27 (estatuto -> while SEMICOLON .)
    PRINT           reduce using rule 27 (estatuto -> while SEMICOLON .)
    RETURN          reduce using rule 27 (estatuto -> while SEMICOLON .)
    FOR             reduce using rule 27 (estatuto -> while SEMICOLON .)
    WHILE           reduce using rule 27 (estatuto -> while SEMICOLON .)
    RBRACKET        reduce using rule 27 (estatuto -> while SEMICOLON .)


state 60

    (28) estatuto -> call_module SEMICOLON .

    ID              reduce using rule 28 (estatuto -> call_module SEMICOLON .)
    IF              reduce using rule 28 (estatuto -> call_module SEMICOLON .)
    PRINT           reduce using rule 28 (estatuto -> call_module SEMICOLON .)
    RETURN          reduce using rule 28 (estatuto -> call_module SEMICOLON .)
    FOR             reduce using rule 28 (estatuto -> call_module SEMICOLON .)
    WHILE           reduce using rule 28 (estatuto -> call_module SEMICOLON .)
    RBRACKET        reduce using rule 28 (estatuto -> call_module SEMICOLON .)


state 61

    (29) asignacion -> ID EQUAL . expresion
    (30) expresion -> . exp AND expresion
    (31) expresion -> . exp
    (32) exp -> . exp_aux OR exp
    (33) exp -> . exp_aux
    (34) exp_aux -> . exp_aux2 GREATERT exp_aux2
    (35) exp_aux -> . exp_aux2 LESST exp_aux2
    (36) exp_aux -> . exp_aux2 NOTEQUAL exp_aux2
    (37) exp_aux -> . exp_aux2 DBEQUALS exp_aux2
    (38) exp_aux -> . exp_aux2
    (39) exp_aux2 -> . term PLUS n_add_operator exp_aux2
    (40) exp_aux2 -> . term MINUS n_add_operator exp_aux2
    (41) exp_aux2 -> . term
    (42) term -> . factor MULTIPLY n_add_operator term
    (43) term -> . factor DIVIDE n_add_operator term
    (44) term -> . factor
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . CTEINT n_seen_factor_int
    (47) factor -> . CTEF n_seen_factor_float
    (48) factor -> . CTEC n_seen_factor_char
    (49) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 71
    CTEINT          shift and go to state 72
    CTEF            shift and go to state 73
    CTEC            shift and go to state 74
    ID              shift and go to state 75

    expresion                      shift and go to state 84
    exp                            shift and go to state 66
    exp_aux                        shift and go to state 67
    exp_aux2                       shift and go to state 68
    term                           shift and go to state 69
    factor                         shift and go to state 70

state 62

    (56) call_module -> ID LPAREN . expresion RPAREN
    (57) call_module -> ID LPAREN . RPAREN
    (30) expresion -> . exp AND expresion
    (31) expresion -> . exp
    (32) exp -> . exp_aux OR exp
    (33) exp -> . exp_aux
    (34) exp_aux -> . exp_aux2 GREATERT exp_aux2
    (35) exp_aux -> . exp_aux2 LESST exp_aux2
    (36) exp_aux -> . exp_aux2 NOTEQUAL exp_aux2
    (37) exp_aux -> . exp_aux2 DBEQUALS exp_aux2
    (38) exp_aux -> . exp_aux2
    (39) exp_aux2 -> . term PLUS n_add_operator exp_aux2
    (40) exp_aux2 -> . term MINUS n_add_operator exp_aux2
    (41) exp_aux2 -> . term
    (42) term -> . factor MULTIPLY n_add_operator term
    (43) term -> . factor DIVIDE n_add_operator term
    (44) term -> . factor
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . CTEINT n_seen_factor_int
    (47) factor -> . CTEF n_seen_factor_float
    (48) factor -> . CTEC n_seen_factor_char
    (49) factor -> . ID n_seen_factor_id

    RPAREN          shift and go to state 86
    LPAREN          shift and go to state 71
    CTEINT          shift and go to state 72
    CTEF            shift and go to state 73
    CTEC            shift and go to state 74
    ID              shift and go to state 75

    expresion                      shift and go to state 85
    exp                            shift and go to state 66
    exp_aux                        shift and go to state 67
    exp_aux2                       shift and go to state 68
    term                           shift and go to state 69
    factor                         shift and go to state 70

state 63

    (61) condicion -> IF LPAREN . expresion RPAREN bloque ELSE bloque
    (62) condicion -> IF LPAREN . expresion RPAREN bloque
    (30) expresion -> . exp AND expresion
    (31) expresion -> . exp
    (32) exp -> . exp_aux OR exp
    (33) exp -> . exp_aux
    (34) exp_aux -> . exp_aux2 GREATERT exp_aux2
    (35) exp_aux -> . exp_aux2 LESST exp_aux2
    (36) exp_aux -> . exp_aux2 NOTEQUAL exp_aux2
    (37) exp_aux -> . exp_aux2 DBEQUALS exp_aux2
    (38) exp_aux -> . exp_aux2
    (39) exp_aux2 -> . term PLUS n_add_operator exp_aux2
    (40) exp_aux2 -> . term MINUS n_add_operator exp_aux2
    (41) exp_aux2 -> . term
    (42) term -> . factor MULTIPLY n_add_operator term
    (43) term -> . factor DIVIDE n_add_operator term
    (44) term -> . factor
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . CTEINT n_seen_factor_int
    (47) factor -> . CTEF n_seen_factor_float
    (48) factor -> . CTEC n_seen_factor_char
    (49) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 71
    CTEINT          shift and go to state 72
    CTEF            shift and go to state 73
    CTEC            shift and go to state 74
    ID              shift and go to state 75

    expresion                      shift and go to state 87
    exp                            shift and go to state 66
    exp_aux                        shift and go to state 67
    exp_aux2                       shift and go to state 68
    term                           shift and go to state 69
    factor                         shift and go to state 70

state 64

    (63) escritura -> PRINT LPAREN . escritura_aux RPAREN
    (64) escritura_aux -> . expresion COMA escritura_aux
    (65) escritura_aux -> . CTESTRING COMA escritura_aux
    (66) escritura_aux -> . expresion
    (67) escritura_aux -> . CTESTRING
    (30) expresion -> . exp AND expresion
    (31) expresion -> . exp
    (32) exp -> . exp_aux OR exp
    (33) exp -> . exp_aux
    (34) exp_aux -> . exp_aux2 GREATERT exp_aux2
    (35) exp_aux -> . exp_aux2 LESST exp_aux2
    (36) exp_aux -> . exp_aux2 NOTEQUAL exp_aux2
    (37) exp_aux -> . exp_aux2 DBEQUALS exp_aux2
    (38) exp_aux -> . exp_aux2
    (39) exp_aux2 -> . term PLUS n_add_operator exp_aux2
    (40) exp_aux2 -> . term MINUS n_add_operator exp_aux2
    (41) exp_aux2 -> . term
    (42) term -> . factor MULTIPLY n_add_operator term
    (43) term -> . factor DIVIDE n_add_operator term
    (44) term -> . factor
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . CTEINT n_seen_factor_int
    (47) factor -> . CTEF n_seen_factor_float
    (48) factor -> . CTEC n_seen_factor_char
    (49) factor -> . ID n_seen_factor_id

    CTESTRING       shift and go to state 90
    LPAREN          shift and go to state 71
    CTEINT          shift and go to state 72
    CTEF            shift and go to state 73
    CTEC            shift and go to state 74
    ID              shift and go to state 75

    escritura_aux                  shift and go to state 88
    expresion                      shift and go to state 89
    exp                            shift and go to state 66
    exp_aux                        shift and go to state 67
    exp_aux2                       shift and go to state 68
    term                           shift and go to state 69
    factor                         shift and go to state 70

state 65

    (58) return -> RETURN expresion .

    SEMICOLON       reduce using rule 58 (return -> RETURN expresion .)


state 66

    (30) expresion -> exp . AND expresion
    (31) expresion -> exp .

    AND             shift and go to state 91
    SEMICOLON       reduce using rule 31 (expresion -> exp .)
    TO              reduce using rule 31 (expresion -> exp .)
    RPAREN          reduce using rule 31 (expresion -> exp .)
    COMA            reduce using rule 31 (expresion -> exp .)


state 67

    (32) exp -> exp_aux . OR exp
    (33) exp -> exp_aux .

    OR              shift and go to state 92
    AND             reduce using rule 33 (exp -> exp_aux .)
    SEMICOLON       reduce using rule 33 (exp -> exp_aux .)
    TO              reduce using rule 33 (exp -> exp_aux .)
    RPAREN          reduce using rule 33 (exp -> exp_aux .)
    COMA            reduce using rule 33 (exp -> exp_aux .)


state 68

    (34) exp_aux -> exp_aux2 . GREATERT exp_aux2
    (35) exp_aux -> exp_aux2 . LESST exp_aux2
    (36) exp_aux -> exp_aux2 . NOTEQUAL exp_aux2
    (37) exp_aux -> exp_aux2 . DBEQUALS exp_aux2
    (38) exp_aux -> exp_aux2 .

    GREATERT        shift and go to state 93
    LESST           shift and go to state 94
    NOTEQUAL        shift and go to state 95
    DBEQUALS        shift and go to state 96
    OR              reduce using rule 38 (exp_aux -> exp_aux2 .)
    AND             reduce using rule 38 (exp_aux -> exp_aux2 .)
    SEMICOLON       reduce using rule 38 (exp_aux -> exp_aux2 .)
    TO              reduce using rule 38 (exp_aux -> exp_aux2 .)
    RPAREN          reduce using rule 38 (exp_aux -> exp_aux2 .)
    COMA            reduce using rule 38 (exp_aux -> exp_aux2 .)


state 69

    (39) exp_aux2 -> term . PLUS n_add_operator exp_aux2
    (40) exp_aux2 -> term . MINUS n_add_operator exp_aux2
    (41) exp_aux2 -> term .

    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    GREATERT        reduce using rule 41 (exp_aux2 -> term .)
    LESST           reduce using rule 41 (exp_aux2 -> term .)
    NOTEQUAL        reduce using rule 41 (exp_aux2 -> term .)
    DBEQUALS        reduce using rule 41 (exp_aux2 -> term .)
    OR              reduce using rule 41 (exp_aux2 -> term .)
    AND             reduce using rule 41 (exp_aux2 -> term .)
    SEMICOLON       reduce using rule 41 (exp_aux2 -> term .)
    TO              reduce using rule 41 (exp_aux2 -> term .)
    RPAREN          reduce using rule 41 (exp_aux2 -> term .)
    COMA            reduce using rule 41 (exp_aux2 -> term .)


state 70

    (42) term -> factor . MULTIPLY n_add_operator term
    (43) term -> factor . DIVIDE n_add_operator term
    (44) term -> factor .

    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 100
    PLUS            reduce using rule 44 (term -> factor .)
    MINUS           reduce using rule 44 (term -> factor .)
    GREATERT        reduce using rule 44 (term -> factor .)
    LESST           reduce using rule 44 (term -> factor .)
    NOTEQUAL        reduce using rule 44 (term -> factor .)
    DBEQUALS        reduce using rule 44 (term -> factor .)
    OR              reduce using rule 44 (term -> factor .)
    AND             reduce using rule 44 (term -> factor .)
    SEMICOLON       reduce using rule 44 (term -> factor .)
    TO              reduce using rule 44 (term -> factor .)
    RPAREN          reduce using rule 44 (term -> factor .)
    COMA            reduce using rule 44 (term -> factor .)


state 71

    (45) factor -> LPAREN . expresion RPAREN
    (30) expresion -> . exp AND expresion
    (31) expresion -> . exp
    (32) exp -> . exp_aux OR exp
    (33) exp -> . exp_aux
    (34) exp_aux -> . exp_aux2 GREATERT exp_aux2
    (35) exp_aux -> . exp_aux2 LESST exp_aux2
    (36) exp_aux -> . exp_aux2 NOTEQUAL exp_aux2
    (37) exp_aux -> . exp_aux2 DBEQUALS exp_aux2
    (38) exp_aux -> . exp_aux2
    (39) exp_aux2 -> . term PLUS n_add_operator exp_aux2
    (40) exp_aux2 -> . term MINUS n_add_operator exp_aux2
    (41) exp_aux2 -> . term
    (42) term -> . factor MULTIPLY n_add_operator term
    (43) term -> . factor DIVIDE n_add_operator term
    (44) term -> . factor
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . CTEINT n_seen_factor_int
    (47) factor -> . CTEF n_seen_factor_float
    (48) factor -> . CTEC n_seen_factor_char
    (49) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 71
    CTEINT          shift and go to state 72
    CTEF            shift and go to state 73
    CTEC            shift and go to state 74
    ID              shift and go to state 75

    expresion                      shift and go to state 101
    exp                            shift and go to state 66
    exp_aux                        shift and go to state 67
    exp_aux2                       shift and go to state 68
    term                           shift and go to state 69
    factor                         shift and go to state 70

state 72

    (46) factor -> CTEINT . n_seen_factor_int
    (73) n_seen_factor_int -> .

    MULTIPLY        reduce using rule 73 (n_seen_factor_int -> .)
    DIVIDE          reduce using rule 73 (n_seen_factor_int -> .)
    PLUS            reduce using rule 73 (n_seen_factor_int -> .)
    MINUS           reduce using rule 73 (n_seen_factor_int -> .)
    GREATERT        reduce using rule 73 (n_seen_factor_int -> .)
    LESST           reduce using rule 73 (n_seen_factor_int -> .)
    NOTEQUAL        reduce using rule 73 (n_seen_factor_int -> .)
    DBEQUALS        reduce using rule 73 (n_seen_factor_int -> .)
    OR              reduce using rule 73 (n_seen_factor_int -> .)
    AND             reduce using rule 73 (n_seen_factor_int -> .)
    SEMICOLON       reduce using rule 73 (n_seen_factor_int -> .)
    TO              reduce using rule 73 (n_seen_factor_int -> .)
    RPAREN          reduce using rule 73 (n_seen_factor_int -> .)
    COMA            reduce using rule 73 (n_seen_factor_int -> .)

    n_seen_factor_int              shift and go to state 102

state 73

    (47) factor -> CTEF . n_seen_factor_float
    (74) n_seen_factor_float -> .

    MULTIPLY        reduce using rule 74 (n_seen_factor_float -> .)
    DIVIDE          reduce using rule 74 (n_seen_factor_float -> .)
    PLUS            reduce using rule 74 (n_seen_factor_float -> .)
    MINUS           reduce using rule 74 (n_seen_factor_float -> .)
    GREATERT        reduce using rule 74 (n_seen_factor_float -> .)
    LESST           reduce using rule 74 (n_seen_factor_float -> .)
    NOTEQUAL        reduce using rule 74 (n_seen_factor_float -> .)
    DBEQUALS        reduce using rule 74 (n_seen_factor_float -> .)
    OR              reduce using rule 74 (n_seen_factor_float -> .)
    AND             reduce using rule 74 (n_seen_factor_float -> .)
    SEMICOLON       reduce using rule 74 (n_seen_factor_float -> .)
    TO              reduce using rule 74 (n_seen_factor_float -> .)
    RPAREN          reduce using rule 74 (n_seen_factor_float -> .)
    COMA            reduce using rule 74 (n_seen_factor_float -> .)

    n_seen_factor_float            shift and go to state 103

state 74

    (48) factor -> CTEC . n_seen_factor_char
    (75) n_seen_factor_char -> .

    MULTIPLY        reduce using rule 75 (n_seen_factor_char -> .)
    DIVIDE          reduce using rule 75 (n_seen_factor_char -> .)
    PLUS            reduce using rule 75 (n_seen_factor_char -> .)
    MINUS           reduce using rule 75 (n_seen_factor_char -> .)
    GREATERT        reduce using rule 75 (n_seen_factor_char -> .)
    LESST           reduce using rule 75 (n_seen_factor_char -> .)
    NOTEQUAL        reduce using rule 75 (n_seen_factor_char -> .)
    DBEQUALS        reduce using rule 75 (n_seen_factor_char -> .)
    OR              reduce using rule 75 (n_seen_factor_char -> .)
    AND             reduce using rule 75 (n_seen_factor_char -> .)
    SEMICOLON       reduce using rule 75 (n_seen_factor_char -> .)
    TO              reduce using rule 75 (n_seen_factor_char -> .)
    RPAREN          reduce using rule 75 (n_seen_factor_char -> .)
    COMA            reduce using rule 75 (n_seen_factor_char -> .)

    n_seen_factor_char             shift and go to state 104

state 75

    (49) factor -> ID . n_seen_factor_id
    (72) n_seen_factor_id -> .

    MULTIPLY        reduce using rule 72 (n_seen_factor_id -> .)
    DIVIDE          reduce using rule 72 (n_seen_factor_id -> .)
    PLUS            reduce using rule 72 (n_seen_factor_id -> .)
    MINUS           reduce using rule 72 (n_seen_factor_id -> .)
    GREATERT        reduce using rule 72 (n_seen_factor_id -> .)
    LESST           reduce using rule 72 (n_seen_factor_id -> .)
    NOTEQUAL        reduce using rule 72 (n_seen_factor_id -> .)
    DBEQUALS        reduce using rule 72 (n_seen_factor_id -> .)
    OR              reduce using rule 72 (n_seen_factor_id -> .)
    AND             reduce using rule 72 (n_seen_factor_id -> .)
    SEMICOLON       reduce using rule 72 (n_seen_factor_id -> .)
    TO              reduce using rule 72 (n_seen_factor_id -> .)
    RPAREN          reduce using rule 72 (n_seen_factor_id -> .)
    COMA            reduce using rule 72 (n_seen_factor_id -> .)

    n_seen_factor_id               shift and go to state 105

state 76

    (59) for -> FOR asignacion . TO CTEINT LBRACKET estatuto RBRACKET

    TO              shift and go to state 106


state 77

    (29) asignacion -> ID . EQUAL expresion

    EQUAL           shift and go to state 61


state 78

    (60) while -> WHILE LPAREN . expresion RPAREN LBRACKET estatuto RBRACKET
    (30) expresion -> . exp AND expresion
    (31) expresion -> . exp
    (32) exp -> . exp_aux OR exp
    (33) exp -> . exp_aux
    (34) exp_aux -> . exp_aux2 GREATERT exp_aux2
    (35) exp_aux -> . exp_aux2 LESST exp_aux2
    (36) exp_aux -> . exp_aux2 NOTEQUAL exp_aux2
    (37) exp_aux -> . exp_aux2 DBEQUALS exp_aux2
    (38) exp_aux -> . exp_aux2
    (39) exp_aux2 -> . term PLUS n_add_operator exp_aux2
    (40) exp_aux2 -> . term MINUS n_add_operator exp_aux2
    (41) exp_aux2 -> . term
    (42) term -> . factor MULTIPLY n_add_operator term
    (43) term -> . factor DIVIDE n_add_operator term
    (44) term -> . factor
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . CTEINT n_seen_factor_int
    (47) factor -> . CTEF n_seen_factor_float
    (48) factor -> . CTEC n_seen_factor_char
    (49) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 71
    CTEINT          shift and go to state 72
    CTEF            shift and go to state 73
    CTEC            shift and go to state 74
    ID              shift and go to state 75

    expresion                      shift and go to state 107
    exp                            shift and go to state 66
    exp_aux                        shift and go to state 67
    exp_aux2                       shift and go to state 68
    term                           shift and go to state 69
    factor                         shift and go to state 70

state 79

    (7) vars_aux -> ID n_seen_var_name COLON tipo . n_set_var_type SEMICOLON vars_aux
    (8) vars_aux -> ID n_seen_var_name COLON tipo . n_set_var_type DOT
    (71) n_set_var_type -> .

    SEMICOLON       reduce using rule 71 (n_set_var_type -> .)
    DOT             reduce using rule 71 (n_set_var_type -> .)

    n_set_var_type                 shift and go to state 108

state 80

    (50) module -> MODULE VOID n_seen_type ID n_seen_func_name . params bloque_module module
    (52) module -> MODULE VOID n_seen_type ID n_seen_func_name . params bloque_module
    (54) params -> . LPAREN vars_func RPAREN
    (55) params -> . LPAREN RPAREN

    LPAREN          shift and go to state 82

    params                         shift and go to state 109

state 81

    (51) module -> MODULE tipo ID n_seen_func_name params . bloque_module module
    (53) module -> MODULE tipo ID n_seen_func_name params . bloque_module
    (14) bloque_module -> . LBRACKET vars estatuto_aux RBRACKET
    (15) bloque_module -> . LBRACKET vars RBRACKET
    (16) bloque_module -> . LBRACKET estatuto_aux RBRACKET
    (17) bloque_module -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 22

    bloque_module                  shift and go to state 110

state 82

    (54) params -> LPAREN . vars_func RPAREN
    (55) params -> LPAREN . RPAREN
    (9) vars_func -> . ID n_seen_var_name COLON tipo n_set_var_type COMA vars_func
    (10) vars_func -> . ID n_seen_var_name COLON tipo n_set_var_type

    RPAREN          shift and go to state 112
    ID              shift and go to state 113

    vars_func                      shift and go to state 111

state 83

    (14) bloque_module -> LBRACKET vars estatuto_aux RBRACKET .

    $end            reduce using rule 14 (bloque_module -> LBRACKET vars estatuto_aux RBRACKET .)
    MODULE          reduce using rule 14 (bloque_module -> LBRACKET vars estatuto_aux RBRACKET .)
    MAIN            reduce using rule 14 (bloque_module -> LBRACKET vars estatuto_aux RBRACKET .)


state 84

    (29) asignacion -> ID EQUAL expresion .

    SEMICOLON       reduce using rule 29 (asignacion -> ID EQUAL expresion .)
    TO              reduce using rule 29 (asignacion -> ID EQUAL expresion .)


state 85

    (56) call_module -> ID LPAREN expresion . RPAREN

    RPAREN          shift and go to state 114


state 86

    (57) call_module -> ID LPAREN RPAREN .

    SEMICOLON       reduce using rule 57 (call_module -> ID LPAREN RPAREN .)


state 87

    (61) condicion -> IF LPAREN expresion . RPAREN bloque ELSE bloque
    (62) condicion -> IF LPAREN expresion . RPAREN bloque

    RPAREN          shift and go to state 115


state 88

    (63) escritura -> PRINT LPAREN escritura_aux . RPAREN

    RPAREN          shift and go to state 116


state 89

    (64) escritura_aux -> expresion . COMA escritura_aux
    (66) escritura_aux -> expresion .

    COMA            shift and go to state 117
    RPAREN          reduce using rule 66 (escritura_aux -> expresion .)


state 90

    (65) escritura_aux -> CTESTRING . COMA escritura_aux
    (67) escritura_aux -> CTESTRING .

    COMA            shift and go to state 118
    RPAREN          reduce using rule 67 (escritura_aux -> CTESTRING .)


state 91

    (30) expresion -> exp AND . expresion
    (30) expresion -> . exp AND expresion
    (31) expresion -> . exp
    (32) exp -> . exp_aux OR exp
    (33) exp -> . exp_aux
    (34) exp_aux -> . exp_aux2 GREATERT exp_aux2
    (35) exp_aux -> . exp_aux2 LESST exp_aux2
    (36) exp_aux -> . exp_aux2 NOTEQUAL exp_aux2
    (37) exp_aux -> . exp_aux2 DBEQUALS exp_aux2
    (38) exp_aux -> . exp_aux2
    (39) exp_aux2 -> . term PLUS n_add_operator exp_aux2
    (40) exp_aux2 -> . term MINUS n_add_operator exp_aux2
    (41) exp_aux2 -> . term
    (42) term -> . factor MULTIPLY n_add_operator term
    (43) term -> . factor DIVIDE n_add_operator term
    (44) term -> . factor
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . CTEINT n_seen_factor_int
    (47) factor -> . CTEF n_seen_factor_float
    (48) factor -> . CTEC n_seen_factor_char
    (49) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 71
    CTEINT          shift and go to state 72
    CTEF            shift and go to state 73
    CTEC            shift and go to state 74
    ID              shift and go to state 75

    exp                            shift and go to state 66
    expresion                      shift and go to state 119
    exp_aux                        shift and go to state 67
    exp_aux2                       shift and go to state 68
    term                           shift and go to state 69
    factor                         shift and go to state 70

state 92

    (32) exp -> exp_aux OR . exp
    (32) exp -> . exp_aux OR exp
    (33) exp -> . exp_aux
    (34) exp_aux -> . exp_aux2 GREATERT exp_aux2
    (35) exp_aux -> . exp_aux2 LESST exp_aux2
    (36) exp_aux -> . exp_aux2 NOTEQUAL exp_aux2
    (37) exp_aux -> . exp_aux2 DBEQUALS exp_aux2
    (38) exp_aux -> . exp_aux2
    (39) exp_aux2 -> . term PLUS n_add_operator exp_aux2
    (40) exp_aux2 -> . term MINUS n_add_operator exp_aux2
    (41) exp_aux2 -> . term
    (42) term -> . factor MULTIPLY n_add_operator term
    (43) term -> . factor DIVIDE n_add_operator term
    (44) term -> . factor
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . CTEINT n_seen_factor_int
    (47) factor -> . CTEF n_seen_factor_float
    (48) factor -> . CTEC n_seen_factor_char
    (49) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 71
    CTEINT          shift and go to state 72
    CTEF            shift and go to state 73
    CTEC            shift and go to state 74
    ID              shift and go to state 75

    exp_aux                        shift and go to state 67
    exp                            shift and go to state 120
    exp_aux2                       shift and go to state 68
    term                           shift and go to state 69
    factor                         shift and go to state 70

state 93

    (34) exp_aux -> exp_aux2 GREATERT . exp_aux2
    (39) exp_aux2 -> . term PLUS n_add_operator exp_aux2
    (40) exp_aux2 -> . term MINUS n_add_operator exp_aux2
    (41) exp_aux2 -> . term
    (42) term -> . factor MULTIPLY n_add_operator term
    (43) term -> . factor DIVIDE n_add_operator term
    (44) term -> . factor
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . CTEINT n_seen_factor_int
    (47) factor -> . CTEF n_seen_factor_float
    (48) factor -> . CTEC n_seen_factor_char
    (49) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 71
    CTEINT          shift and go to state 72
    CTEF            shift and go to state 73
    CTEC            shift and go to state 74
    ID              shift and go to state 75

    exp_aux2                       shift and go to state 121
    term                           shift and go to state 69
    factor                         shift and go to state 70

state 94

    (35) exp_aux -> exp_aux2 LESST . exp_aux2
    (39) exp_aux2 -> . term PLUS n_add_operator exp_aux2
    (40) exp_aux2 -> . term MINUS n_add_operator exp_aux2
    (41) exp_aux2 -> . term
    (42) term -> . factor MULTIPLY n_add_operator term
    (43) term -> . factor DIVIDE n_add_operator term
    (44) term -> . factor
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . CTEINT n_seen_factor_int
    (47) factor -> . CTEF n_seen_factor_float
    (48) factor -> . CTEC n_seen_factor_char
    (49) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 71
    CTEINT          shift and go to state 72
    CTEF            shift and go to state 73
    CTEC            shift and go to state 74
    ID              shift and go to state 75

    exp_aux2                       shift and go to state 122
    term                           shift and go to state 69
    factor                         shift and go to state 70

state 95

    (36) exp_aux -> exp_aux2 NOTEQUAL . exp_aux2
    (39) exp_aux2 -> . term PLUS n_add_operator exp_aux2
    (40) exp_aux2 -> . term MINUS n_add_operator exp_aux2
    (41) exp_aux2 -> . term
    (42) term -> . factor MULTIPLY n_add_operator term
    (43) term -> . factor DIVIDE n_add_operator term
    (44) term -> . factor
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . CTEINT n_seen_factor_int
    (47) factor -> . CTEF n_seen_factor_float
    (48) factor -> . CTEC n_seen_factor_char
    (49) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 71
    CTEINT          shift and go to state 72
    CTEF            shift and go to state 73
    CTEC            shift and go to state 74
    ID              shift and go to state 75

    exp_aux2                       shift and go to state 123
    term                           shift and go to state 69
    factor                         shift and go to state 70

state 96

    (37) exp_aux -> exp_aux2 DBEQUALS . exp_aux2
    (39) exp_aux2 -> . term PLUS n_add_operator exp_aux2
    (40) exp_aux2 -> . term MINUS n_add_operator exp_aux2
    (41) exp_aux2 -> . term
    (42) term -> . factor MULTIPLY n_add_operator term
    (43) term -> . factor DIVIDE n_add_operator term
    (44) term -> . factor
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . CTEINT n_seen_factor_int
    (47) factor -> . CTEF n_seen_factor_float
    (48) factor -> . CTEC n_seen_factor_char
    (49) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 71
    CTEINT          shift and go to state 72
    CTEF            shift and go to state 73
    CTEC            shift and go to state 74
    ID              shift and go to state 75

    exp_aux2                       shift and go to state 124
    term                           shift and go to state 69
    factor                         shift and go to state 70

state 97

    (39) exp_aux2 -> term PLUS . n_add_operator exp_aux2
    (76) n_add_operator -> .

    LPAREN          reduce using rule 76 (n_add_operator -> .)
    CTEINT          reduce using rule 76 (n_add_operator -> .)
    CTEF            reduce using rule 76 (n_add_operator -> .)
    CTEC            reduce using rule 76 (n_add_operator -> .)
    ID              reduce using rule 76 (n_add_operator -> .)

    n_add_operator                 shift and go to state 125

state 98

    (40) exp_aux2 -> term MINUS . n_add_operator exp_aux2
    (76) n_add_operator -> .

    LPAREN          reduce using rule 76 (n_add_operator -> .)
    CTEINT          reduce using rule 76 (n_add_operator -> .)
    CTEF            reduce using rule 76 (n_add_operator -> .)
    CTEC            reduce using rule 76 (n_add_operator -> .)
    ID              reduce using rule 76 (n_add_operator -> .)

    n_add_operator                 shift and go to state 126

state 99

    (42) term -> factor MULTIPLY . n_add_operator term
    (76) n_add_operator -> .

    LPAREN          reduce using rule 76 (n_add_operator -> .)
    CTEINT          reduce using rule 76 (n_add_operator -> .)
    CTEF            reduce using rule 76 (n_add_operator -> .)
    CTEC            reduce using rule 76 (n_add_operator -> .)
    ID              reduce using rule 76 (n_add_operator -> .)

    n_add_operator                 shift and go to state 127

state 100

    (43) term -> factor DIVIDE . n_add_operator term
    (76) n_add_operator -> .

    LPAREN          reduce using rule 76 (n_add_operator -> .)
    CTEINT          reduce using rule 76 (n_add_operator -> .)
    CTEF            reduce using rule 76 (n_add_operator -> .)
    CTEC            reduce using rule 76 (n_add_operator -> .)
    ID              reduce using rule 76 (n_add_operator -> .)

    n_add_operator                 shift and go to state 128

state 101

    (45) factor -> LPAREN expresion . RPAREN

    RPAREN          shift and go to state 129


state 102

    (46) factor -> CTEINT n_seen_factor_int .

    MULTIPLY        reduce using rule 46 (factor -> CTEINT n_seen_factor_int .)
    DIVIDE          reduce using rule 46 (factor -> CTEINT n_seen_factor_int .)
    PLUS            reduce using rule 46 (factor -> CTEINT n_seen_factor_int .)
    MINUS           reduce using rule 46 (factor -> CTEINT n_seen_factor_int .)
    GREATERT        reduce using rule 46 (factor -> CTEINT n_seen_factor_int .)
    LESST           reduce using rule 46 (factor -> CTEINT n_seen_factor_int .)
    NOTEQUAL        reduce using rule 46 (factor -> CTEINT n_seen_factor_int .)
    DBEQUALS        reduce using rule 46 (factor -> CTEINT n_seen_factor_int .)
    OR              reduce using rule 46 (factor -> CTEINT n_seen_factor_int .)
    AND             reduce using rule 46 (factor -> CTEINT n_seen_factor_int .)
    SEMICOLON       reduce using rule 46 (factor -> CTEINT n_seen_factor_int .)
    TO              reduce using rule 46 (factor -> CTEINT n_seen_factor_int .)
    RPAREN          reduce using rule 46 (factor -> CTEINT n_seen_factor_int .)
    COMA            reduce using rule 46 (factor -> CTEINT n_seen_factor_int .)


state 103

    (47) factor -> CTEF n_seen_factor_float .

    MULTIPLY        reduce using rule 47 (factor -> CTEF n_seen_factor_float .)
    DIVIDE          reduce using rule 47 (factor -> CTEF n_seen_factor_float .)
    PLUS            reduce using rule 47 (factor -> CTEF n_seen_factor_float .)
    MINUS           reduce using rule 47 (factor -> CTEF n_seen_factor_float .)
    GREATERT        reduce using rule 47 (factor -> CTEF n_seen_factor_float .)
    LESST           reduce using rule 47 (factor -> CTEF n_seen_factor_float .)
    NOTEQUAL        reduce using rule 47 (factor -> CTEF n_seen_factor_float .)
    DBEQUALS        reduce using rule 47 (factor -> CTEF n_seen_factor_float .)
    OR              reduce using rule 47 (factor -> CTEF n_seen_factor_float .)
    AND             reduce using rule 47 (factor -> CTEF n_seen_factor_float .)
    SEMICOLON       reduce using rule 47 (factor -> CTEF n_seen_factor_float .)
    TO              reduce using rule 47 (factor -> CTEF n_seen_factor_float .)
    RPAREN          reduce using rule 47 (factor -> CTEF n_seen_factor_float .)
    COMA            reduce using rule 47 (factor -> CTEF n_seen_factor_float .)


state 104

    (48) factor -> CTEC n_seen_factor_char .

    MULTIPLY        reduce using rule 48 (factor -> CTEC n_seen_factor_char .)
    DIVIDE          reduce using rule 48 (factor -> CTEC n_seen_factor_char .)
    PLUS            reduce using rule 48 (factor -> CTEC n_seen_factor_char .)
    MINUS           reduce using rule 48 (factor -> CTEC n_seen_factor_char .)
    GREATERT        reduce using rule 48 (factor -> CTEC n_seen_factor_char .)
    LESST           reduce using rule 48 (factor -> CTEC n_seen_factor_char .)
    NOTEQUAL        reduce using rule 48 (factor -> CTEC n_seen_factor_char .)
    DBEQUALS        reduce using rule 48 (factor -> CTEC n_seen_factor_char .)
    OR              reduce using rule 48 (factor -> CTEC n_seen_factor_char .)
    AND             reduce using rule 48 (factor -> CTEC n_seen_factor_char .)
    SEMICOLON       reduce using rule 48 (factor -> CTEC n_seen_factor_char .)
    TO              reduce using rule 48 (factor -> CTEC n_seen_factor_char .)
    RPAREN          reduce using rule 48 (factor -> CTEC n_seen_factor_char .)
    COMA            reduce using rule 48 (factor -> CTEC n_seen_factor_char .)


state 105

    (49) factor -> ID n_seen_factor_id .

    MULTIPLY        reduce using rule 49 (factor -> ID n_seen_factor_id .)
    DIVIDE          reduce using rule 49 (factor -> ID n_seen_factor_id .)
    PLUS            reduce using rule 49 (factor -> ID n_seen_factor_id .)
    MINUS           reduce using rule 49 (factor -> ID n_seen_factor_id .)
    GREATERT        reduce using rule 49 (factor -> ID n_seen_factor_id .)
    LESST           reduce using rule 49 (factor -> ID n_seen_factor_id .)
    NOTEQUAL        reduce using rule 49 (factor -> ID n_seen_factor_id .)
    DBEQUALS        reduce using rule 49 (factor -> ID n_seen_factor_id .)
    OR              reduce using rule 49 (factor -> ID n_seen_factor_id .)
    AND             reduce using rule 49 (factor -> ID n_seen_factor_id .)
    SEMICOLON       reduce using rule 49 (factor -> ID n_seen_factor_id .)
    TO              reduce using rule 49 (factor -> ID n_seen_factor_id .)
    RPAREN          reduce using rule 49 (factor -> ID n_seen_factor_id .)
    COMA            reduce using rule 49 (factor -> ID n_seen_factor_id .)


state 106

    (59) for -> FOR asignacion TO . CTEINT LBRACKET estatuto RBRACKET

    CTEINT          shift and go to state 130


state 107

    (60) while -> WHILE LPAREN expresion . RPAREN LBRACKET estatuto RBRACKET

    RPAREN          shift and go to state 131


state 108

    (7) vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type . SEMICOLON vars_aux
    (8) vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type . DOT

    SEMICOLON       shift and go to state 132
    DOT             shift and go to state 133


state 109

    (50) module -> MODULE VOID n_seen_type ID n_seen_func_name params . bloque_module module
    (52) module -> MODULE VOID n_seen_type ID n_seen_func_name params . bloque_module
    (14) bloque_module -> . LBRACKET vars estatuto_aux RBRACKET
    (15) bloque_module -> . LBRACKET vars RBRACKET
    (16) bloque_module -> . LBRACKET estatuto_aux RBRACKET
    (17) bloque_module -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 22

    bloque_module                  shift and go to state 134

state 110

    (51) module -> MODULE tipo ID n_seen_func_name params bloque_module . module
    (53) module -> MODULE tipo ID n_seen_func_name params bloque_module .
    (50) module -> . MODULE VOID n_seen_type ID n_seen_func_name params bloque_module module
    (51) module -> . MODULE tipo ID n_seen_func_name params bloque_module module
    (52) module -> . MODULE VOID n_seen_type ID n_seen_func_name params bloque_module
    (53) module -> . MODULE tipo ID n_seen_func_name params bloque_module

    MAIN            reduce using rule 53 (module -> MODULE tipo ID n_seen_func_name params bloque_module .)
    MODULE          shift and go to state 9

    module                         shift and go to state 135

state 111

    (54) params -> LPAREN vars_func . RPAREN

    RPAREN          shift and go to state 136


state 112

    (55) params -> LPAREN RPAREN .

    LBRACKET        reduce using rule 55 (params -> LPAREN RPAREN .)


state 113

    (9) vars_func -> ID . n_seen_var_name COLON tipo n_set_var_type COMA vars_func
    (10) vars_func -> ID . n_seen_var_name COLON tipo n_set_var_type
    (69) n_seen_var_name -> .

    COLON           reduce using rule 69 (n_seen_var_name -> .)

    n_seen_var_name                shift and go to state 137

state 114

    (56) call_module -> ID LPAREN expresion RPAREN .

    SEMICOLON       reduce using rule 56 (call_module -> ID LPAREN expresion RPAREN .)


state 115

    (61) condicion -> IF LPAREN expresion RPAREN . bloque ELSE bloque
    (62) condicion -> IF LPAREN expresion RPAREN . bloque
    (18) bloque -> . LBRACKET estatuto_aux RBRACKET
    (19) bloque -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 139

    bloque                         shift and go to state 138

state 116

    (63) escritura -> PRINT LPAREN escritura_aux RPAREN .

    SEMICOLON       reduce using rule 63 (escritura -> PRINT LPAREN escritura_aux RPAREN .)


state 117

    (64) escritura_aux -> expresion COMA . escritura_aux
    (64) escritura_aux -> . expresion COMA escritura_aux
    (65) escritura_aux -> . CTESTRING COMA escritura_aux
    (66) escritura_aux -> . expresion
    (67) escritura_aux -> . CTESTRING
    (30) expresion -> . exp AND expresion
    (31) expresion -> . exp
    (32) exp -> . exp_aux OR exp
    (33) exp -> . exp_aux
    (34) exp_aux -> . exp_aux2 GREATERT exp_aux2
    (35) exp_aux -> . exp_aux2 LESST exp_aux2
    (36) exp_aux -> . exp_aux2 NOTEQUAL exp_aux2
    (37) exp_aux -> . exp_aux2 DBEQUALS exp_aux2
    (38) exp_aux -> . exp_aux2
    (39) exp_aux2 -> . term PLUS n_add_operator exp_aux2
    (40) exp_aux2 -> . term MINUS n_add_operator exp_aux2
    (41) exp_aux2 -> . term
    (42) term -> . factor MULTIPLY n_add_operator term
    (43) term -> . factor DIVIDE n_add_operator term
    (44) term -> . factor
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . CTEINT n_seen_factor_int
    (47) factor -> . CTEF n_seen_factor_float
    (48) factor -> . CTEC n_seen_factor_char
    (49) factor -> . ID n_seen_factor_id

    CTESTRING       shift and go to state 90
    LPAREN          shift and go to state 71
    CTEINT          shift and go to state 72
    CTEF            shift and go to state 73
    CTEC            shift and go to state 74
    ID              shift and go to state 75

    expresion                      shift and go to state 89
    escritura_aux                  shift and go to state 140
    exp                            shift and go to state 66
    exp_aux                        shift and go to state 67
    exp_aux2                       shift and go to state 68
    term                           shift and go to state 69
    factor                         shift and go to state 70

state 118

    (65) escritura_aux -> CTESTRING COMA . escritura_aux
    (64) escritura_aux -> . expresion COMA escritura_aux
    (65) escritura_aux -> . CTESTRING COMA escritura_aux
    (66) escritura_aux -> . expresion
    (67) escritura_aux -> . CTESTRING
    (30) expresion -> . exp AND expresion
    (31) expresion -> . exp
    (32) exp -> . exp_aux OR exp
    (33) exp -> . exp_aux
    (34) exp_aux -> . exp_aux2 GREATERT exp_aux2
    (35) exp_aux -> . exp_aux2 LESST exp_aux2
    (36) exp_aux -> . exp_aux2 NOTEQUAL exp_aux2
    (37) exp_aux -> . exp_aux2 DBEQUALS exp_aux2
    (38) exp_aux -> . exp_aux2
    (39) exp_aux2 -> . term PLUS n_add_operator exp_aux2
    (40) exp_aux2 -> . term MINUS n_add_operator exp_aux2
    (41) exp_aux2 -> . term
    (42) term -> . factor MULTIPLY n_add_operator term
    (43) term -> . factor DIVIDE n_add_operator term
    (44) term -> . factor
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . CTEINT n_seen_factor_int
    (47) factor -> . CTEF n_seen_factor_float
    (48) factor -> . CTEC n_seen_factor_char
    (49) factor -> . ID n_seen_factor_id

    CTESTRING       shift and go to state 90
    LPAREN          shift and go to state 71
    CTEINT          shift and go to state 72
    CTEF            shift and go to state 73
    CTEC            shift and go to state 74
    ID              shift and go to state 75

    escritura_aux                  shift and go to state 141
    expresion                      shift and go to state 89
    exp                            shift and go to state 66
    exp_aux                        shift and go to state 67
    exp_aux2                       shift and go to state 68
    term                           shift and go to state 69
    factor                         shift and go to state 70

state 119

    (30) expresion -> exp AND expresion .

    SEMICOLON       reduce using rule 30 (expresion -> exp AND expresion .)
    TO              reduce using rule 30 (expresion -> exp AND expresion .)
    RPAREN          reduce using rule 30 (expresion -> exp AND expresion .)
    COMA            reduce using rule 30 (expresion -> exp AND expresion .)


state 120

    (32) exp -> exp_aux OR exp .

    AND             reduce using rule 32 (exp -> exp_aux OR exp .)
    SEMICOLON       reduce using rule 32 (exp -> exp_aux OR exp .)
    TO              reduce using rule 32 (exp -> exp_aux OR exp .)
    RPAREN          reduce using rule 32 (exp -> exp_aux OR exp .)
    COMA            reduce using rule 32 (exp -> exp_aux OR exp .)


state 121

    (34) exp_aux -> exp_aux2 GREATERT exp_aux2 .

    OR              reduce using rule 34 (exp_aux -> exp_aux2 GREATERT exp_aux2 .)
    AND             reduce using rule 34 (exp_aux -> exp_aux2 GREATERT exp_aux2 .)
    SEMICOLON       reduce using rule 34 (exp_aux -> exp_aux2 GREATERT exp_aux2 .)
    TO              reduce using rule 34 (exp_aux -> exp_aux2 GREATERT exp_aux2 .)
    RPAREN          reduce using rule 34 (exp_aux -> exp_aux2 GREATERT exp_aux2 .)
    COMA            reduce using rule 34 (exp_aux -> exp_aux2 GREATERT exp_aux2 .)


state 122

    (35) exp_aux -> exp_aux2 LESST exp_aux2 .

    OR              reduce using rule 35 (exp_aux -> exp_aux2 LESST exp_aux2 .)
    AND             reduce using rule 35 (exp_aux -> exp_aux2 LESST exp_aux2 .)
    SEMICOLON       reduce using rule 35 (exp_aux -> exp_aux2 LESST exp_aux2 .)
    TO              reduce using rule 35 (exp_aux -> exp_aux2 LESST exp_aux2 .)
    RPAREN          reduce using rule 35 (exp_aux -> exp_aux2 LESST exp_aux2 .)
    COMA            reduce using rule 35 (exp_aux -> exp_aux2 LESST exp_aux2 .)


state 123

    (36) exp_aux -> exp_aux2 NOTEQUAL exp_aux2 .

    OR              reduce using rule 36 (exp_aux -> exp_aux2 NOTEQUAL exp_aux2 .)
    AND             reduce using rule 36 (exp_aux -> exp_aux2 NOTEQUAL exp_aux2 .)
    SEMICOLON       reduce using rule 36 (exp_aux -> exp_aux2 NOTEQUAL exp_aux2 .)
    TO              reduce using rule 36 (exp_aux -> exp_aux2 NOTEQUAL exp_aux2 .)
    RPAREN          reduce using rule 36 (exp_aux -> exp_aux2 NOTEQUAL exp_aux2 .)
    COMA            reduce using rule 36 (exp_aux -> exp_aux2 NOTEQUAL exp_aux2 .)


state 124

    (37) exp_aux -> exp_aux2 DBEQUALS exp_aux2 .

    OR              reduce using rule 37 (exp_aux -> exp_aux2 DBEQUALS exp_aux2 .)
    AND             reduce using rule 37 (exp_aux -> exp_aux2 DBEQUALS exp_aux2 .)
    SEMICOLON       reduce using rule 37 (exp_aux -> exp_aux2 DBEQUALS exp_aux2 .)
    TO              reduce using rule 37 (exp_aux -> exp_aux2 DBEQUALS exp_aux2 .)
    RPAREN          reduce using rule 37 (exp_aux -> exp_aux2 DBEQUALS exp_aux2 .)
    COMA            reduce using rule 37 (exp_aux -> exp_aux2 DBEQUALS exp_aux2 .)


state 125

    (39) exp_aux2 -> term PLUS n_add_operator . exp_aux2
    (39) exp_aux2 -> . term PLUS n_add_operator exp_aux2
    (40) exp_aux2 -> . term MINUS n_add_operator exp_aux2
    (41) exp_aux2 -> . term
    (42) term -> . factor MULTIPLY n_add_operator term
    (43) term -> . factor DIVIDE n_add_operator term
    (44) term -> . factor
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . CTEINT n_seen_factor_int
    (47) factor -> . CTEF n_seen_factor_float
    (48) factor -> . CTEC n_seen_factor_char
    (49) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 71
    CTEINT          shift and go to state 72
    CTEF            shift and go to state 73
    CTEC            shift and go to state 74
    ID              shift and go to state 75

    term                           shift and go to state 69
    exp_aux2                       shift and go to state 142
    factor                         shift and go to state 70

state 126

    (40) exp_aux2 -> term MINUS n_add_operator . exp_aux2
    (39) exp_aux2 -> . term PLUS n_add_operator exp_aux2
    (40) exp_aux2 -> . term MINUS n_add_operator exp_aux2
    (41) exp_aux2 -> . term
    (42) term -> . factor MULTIPLY n_add_operator term
    (43) term -> . factor DIVIDE n_add_operator term
    (44) term -> . factor
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . CTEINT n_seen_factor_int
    (47) factor -> . CTEF n_seen_factor_float
    (48) factor -> . CTEC n_seen_factor_char
    (49) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 71
    CTEINT          shift and go to state 72
    CTEF            shift and go to state 73
    CTEC            shift and go to state 74
    ID              shift and go to state 75

    term                           shift and go to state 69
    exp_aux2                       shift and go to state 143
    factor                         shift and go to state 70

state 127

    (42) term -> factor MULTIPLY n_add_operator . term
    (42) term -> . factor MULTIPLY n_add_operator term
    (43) term -> . factor DIVIDE n_add_operator term
    (44) term -> . factor
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . CTEINT n_seen_factor_int
    (47) factor -> . CTEF n_seen_factor_float
    (48) factor -> . CTEC n_seen_factor_char
    (49) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 71
    CTEINT          shift and go to state 72
    CTEF            shift and go to state 73
    CTEC            shift and go to state 74
    ID              shift and go to state 75

    factor                         shift and go to state 70
    term                           shift and go to state 144

state 128

    (43) term -> factor DIVIDE n_add_operator . term
    (42) term -> . factor MULTIPLY n_add_operator term
    (43) term -> . factor DIVIDE n_add_operator term
    (44) term -> . factor
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . CTEINT n_seen_factor_int
    (47) factor -> . CTEF n_seen_factor_float
    (48) factor -> . CTEC n_seen_factor_char
    (49) factor -> . ID n_seen_factor_id

    LPAREN          shift and go to state 71
    CTEINT          shift and go to state 72
    CTEF            shift and go to state 73
    CTEC            shift and go to state 74
    ID              shift and go to state 75

    factor                         shift and go to state 70
    term                           shift and go to state 145

state 129

    (45) factor -> LPAREN expresion RPAREN .

    MULTIPLY        reduce using rule 45 (factor -> LPAREN expresion RPAREN .)
    DIVIDE          reduce using rule 45 (factor -> LPAREN expresion RPAREN .)
    PLUS            reduce using rule 45 (factor -> LPAREN expresion RPAREN .)
    MINUS           reduce using rule 45 (factor -> LPAREN expresion RPAREN .)
    GREATERT        reduce using rule 45 (factor -> LPAREN expresion RPAREN .)
    LESST           reduce using rule 45 (factor -> LPAREN expresion RPAREN .)
    NOTEQUAL        reduce using rule 45 (factor -> LPAREN expresion RPAREN .)
    DBEQUALS        reduce using rule 45 (factor -> LPAREN expresion RPAREN .)
    OR              reduce using rule 45 (factor -> LPAREN expresion RPAREN .)
    AND             reduce using rule 45 (factor -> LPAREN expresion RPAREN .)
    SEMICOLON       reduce using rule 45 (factor -> LPAREN expresion RPAREN .)
    TO              reduce using rule 45 (factor -> LPAREN expresion RPAREN .)
    RPAREN          reduce using rule 45 (factor -> LPAREN expresion RPAREN .)
    COMA            reduce using rule 45 (factor -> LPAREN expresion RPAREN .)


state 130

    (59) for -> FOR asignacion TO CTEINT . LBRACKET estatuto RBRACKET

    LBRACKET        shift and go to state 146


state 131

    (60) while -> WHILE LPAREN expresion RPAREN . LBRACKET estatuto RBRACKET

    LBRACKET        shift and go to state 147


state 132

    (7) vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON . vars_aux
    (7) vars_aux -> . ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux
    (8) vars_aux -> . ID n_seen_var_name COLON tipo n_set_var_type DOT

    ID              shift and go to state 15

    vars_aux                       shift and go to state 148

state 133

    (8) vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type DOT .

    MODULE          reduce using rule 8 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type DOT .)
    MAIN            reduce using rule 8 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type DOT .)
    RBRACKET        reduce using rule 8 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type DOT .)
    ID              reduce using rule 8 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type DOT .)
    IF              reduce using rule 8 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type DOT .)
    PRINT           reduce using rule 8 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type DOT .)
    RETURN          reduce using rule 8 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type DOT .)
    FOR             reduce using rule 8 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type DOT .)
    WHILE           reduce using rule 8 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type DOT .)


state 134

    (50) module -> MODULE VOID n_seen_type ID n_seen_func_name params bloque_module . module
    (52) module -> MODULE VOID n_seen_type ID n_seen_func_name params bloque_module .
    (50) module -> . MODULE VOID n_seen_type ID n_seen_func_name params bloque_module module
    (51) module -> . MODULE tipo ID n_seen_func_name params bloque_module module
    (52) module -> . MODULE VOID n_seen_type ID n_seen_func_name params bloque_module
    (53) module -> . MODULE tipo ID n_seen_func_name params bloque_module

    MAIN            reduce using rule 52 (module -> MODULE VOID n_seen_type ID n_seen_func_name params bloque_module .)
    MODULE          shift and go to state 9

    module                         shift and go to state 149

state 135

    (51) module -> MODULE tipo ID n_seen_func_name params bloque_module module .

    MAIN            reduce using rule 51 (module -> MODULE tipo ID n_seen_func_name params bloque_module module .)


state 136

    (54) params -> LPAREN vars_func RPAREN .

    LBRACKET        reduce using rule 54 (params -> LPAREN vars_func RPAREN .)


state 137

    (9) vars_func -> ID n_seen_var_name . COLON tipo n_set_var_type COMA vars_func
    (10) vars_func -> ID n_seen_var_name . COLON tipo n_set_var_type

    COLON           shift and go to state 150


state 138

    (61) condicion -> IF LPAREN expresion RPAREN bloque . ELSE bloque
    (62) condicion -> IF LPAREN expresion RPAREN bloque .

    ELSE            shift and go to state 151
    SEMICOLON       reduce using rule 62 (condicion -> IF LPAREN expresion RPAREN bloque .)


state 139

    (18) bloque -> LBRACKET . estatuto_aux RBRACKET
    (19) bloque -> LBRACKET . RBRACKET
    (20) estatuto_aux -> . estatuto estatuto_aux
    (21) estatuto_aux -> . estatuto
    (22) estatuto -> . asignacion SEMICOLON
    (23) estatuto -> . condicion SEMICOLON
    (24) estatuto -> . escritura SEMICOLON
    (25) estatuto -> . return SEMICOLON
    (26) estatuto -> . for SEMICOLON
    (27) estatuto -> . while SEMICOLON
    (28) estatuto -> . call_module SEMICOLON
    (29) asignacion -> . ID EQUAL expresion
    (61) condicion -> . IF LPAREN expresion RPAREN bloque ELSE bloque
    (62) condicion -> . IF LPAREN expresion RPAREN bloque
    (63) escritura -> . PRINT LPAREN escritura_aux RPAREN
    (58) return -> . RETURN expresion
    (59) for -> . FOR asignacion TO CTEINT LBRACKET estatuto RBRACKET
    (60) while -> . WHILE LPAREN expresion RPAREN LBRACKET estatuto RBRACKET
    (56) call_module -> . ID LPAREN expresion RPAREN
    (57) call_module -> . ID LPAREN RPAREN

    RBRACKET        shift and go to state 153
    ID              shift and go to state 41
    IF              shift and go to state 42
    PRINT           shift and go to state 43
    RETURN          shift and go to state 44
    FOR             shift and go to state 45
    WHILE           shift and go to state 46

    estatuto_aux                   shift and go to state 152
    estatuto                       shift and go to state 33
    asignacion                     shift and go to state 34
    condicion                      shift and go to state 35
    escritura                      shift and go to state 36
    return                         shift and go to state 37
    for                            shift and go to state 38
    while                          shift and go to state 39
    call_module                    shift and go to state 40

state 140

    (64) escritura_aux -> expresion COMA escritura_aux .

    RPAREN          reduce using rule 64 (escritura_aux -> expresion COMA escritura_aux .)


state 141

    (65) escritura_aux -> CTESTRING COMA escritura_aux .

    RPAREN          reduce using rule 65 (escritura_aux -> CTESTRING COMA escritura_aux .)


state 142

    (39) exp_aux2 -> term PLUS n_add_operator exp_aux2 .

    GREATERT        reduce using rule 39 (exp_aux2 -> term PLUS n_add_operator exp_aux2 .)
    LESST           reduce using rule 39 (exp_aux2 -> term PLUS n_add_operator exp_aux2 .)
    NOTEQUAL        reduce using rule 39 (exp_aux2 -> term PLUS n_add_operator exp_aux2 .)
    DBEQUALS        reduce using rule 39 (exp_aux2 -> term PLUS n_add_operator exp_aux2 .)
    OR              reduce using rule 39 (exp_aux2 -> term PLUS n_add_operator exp_aux2 .)
    AND             reduce using rule 39 (exp_aux2 -> term PLUS n_add_operator exp_aux2 .)
    SEMICOLON       reduce using rule 39 (exp_aux2 -> term PLUS n_add_operator exp_aux2 .)
    TO              reduce using rule 39 (exp_aux2 -> term PLUS n_add_operator exp_aux2 .)
    RPAREN          reduce using rule 39 (exp_aux2 -> term PLUS n_add_operator exp_aux2 .)
    COMA            reduce using rule 39 (exp_aux2 -> term PLUS n_add_operator exp_aux2 .)


state 143

    (40) exp_aux2 -> term MINUS n_add_operator exp_aux2 .

    GREATERT        reduce using rule 40 (exp_aux2 -> term MINUS n_add_operator exp_aux2 .)
    LESST           reduce using rule 40 (exp_aux2 -> term MINUS n_add_operator exp_aux2 .)
    NOTEQUAL        reduce using rule 40 (exp_aux2 -> term MINUS n_add_operator exp_aux2 .)
    DBEQUALS        reduce using rule 40 (exp_aux2 -> term MINUS n_add_operator exp_aux2 .)
    OR              reduce using rule 40 (exp_aux2 -> term MINUS n_add_operator exp_aux2 .)
    AND             reduce using rule 40 (exp_aux2 -> term MINUS n_add_operator exp_aux2 .)
    SEMICOLON       reduce using rule 40 (exp_aux2 -> term MINUS n_add_operator exp_aux2 .)
    TO              reduce using rule 40 (exp_aux2 -> term MINUS n_add_operator exp_aux2 .)
    RPAREN          reduce using rule 40 (exp_aux2 -> term MINUS n_add_operator exp_aux2 .)
    COMA            reduce using rule 40 (exp_aux2 -> term MINUS n_add_operator exp_aux2 .)


state 144

    (42) term -> factor MULTIPLY n_add_operator term .

    PLUS            reduce using rule 42 (term -> factor MULTIPLY n_add_operator term .)
    MINUS           reduce using rule 42 (term -> factor MULTIPLY n_add_operator term .)
    GREATERT        reduce using rule 42 (term -> factor MULTIPLY n_add_operator term .)
    LESST           reduce using rule 42 (term -> factor MULTIPLY n_add_operator term .)
    NOTEQUAL        reduce using rule 42 (term -> factor MULTIPLY n_add_operator term .)
    DBEQUALS        reduce using rule 42 (term -> factor MULTIPLY n_add_operator term .)
    OR              reduce using rule 42 (term -> factor MULTIPLY n_add_operator term .)
    AND             reduce using rule 42 (term -> factor MULTIPLY n_add_operator term .)
    SEMICOLON       reduce using rule 42 (term -> factor MULTIPLY n_add_operator term .)
    TO              reduce using rule 42 (term -> factor MULTIPLY n_add_operator term .)
    RPAREN          reduce using rule 42 (term -> factor MULTIPLY n_add_operator term .)
    COMA            reduce using rule 42 (term -> factor MULTIPLY n_add_operator term .)


state 145

    (43) term -> factor DIVIDE n_add_operator term .

    PLUS            reduce using rule 43 (term -> factor DIVIDE n_add_operator term .)
    MINUS           reduce using rule 43 (term -> factor DIVIDE n_add_operator term .)
    GREATERT        reduce using rule 43 (term -> factor DIVIDE n_add_operator term .)
    LESST           reduce using rule 43 (term -> factor DIVIDE n_add_operator term .)
    NOTEQUAL        reduce using rule 43 (term -> factor DIVIDE n_add_operator term .)
    DBEQUALS        reduce using rule 43 (term -> factor DIVIDE n_add_operator term .)
    OR              reduce using rule 43 (term -> factor DIVIDE n_add_operator term .)
    AND             reduce using rule 43 (term -> factor DIVIDE n_add_operator term .)
    SEMICOLON       reduce using rule 43 (term -> factor DIVIDE n_add_operator term .)
    TO              reduce using rule 43 (term -> factor DIVIDE n_add_operator term .)
    RPAREN          reduce using rule 43 (term -> factor DIVIDE n_add_operator term .)
    COMA            reduce using rule 43 (term -> factor DIVIDE n_add_operator term .)


state 146

    (59) for -> FOR asignacion TO CTEINT LBRACKET . estatuto RBRACKET
    (22) estatuto -> . asignacion SEMICOLON
    (23) estatuto -> . condicion SEMICOLON
    (24) estatuto -> . escritura SEMICOLON
    (25) estatuto -> . return SEMICOLON
    (26) estatuto -> . for SEMICOLON
    (27) estatuto -> . while SEMICOLON
    (28) estatuto -> . call_module SEMICOLON
    (29) asignacion -> . ID EQUAL expresion
    (61) condicion -> . IF LPAREN expresion RPAREN bloque ELSE bloque
    (62) condicion -> . IF LPAREN expresion RPAREN bloque
    (63) escritura -> . PRINT LPAREN escritura_aux RPAREN
    (58) return -> . RETURN expresion
    (59) for -> . FOR asignacion TO CTEINT LBRACKET estatuto RBRACKET
    (60) while -> . WHILE LPAREN expresion RPAREN LBRACKET estatuto RBRACKET
    (56) call_module -> . ID LPAREN expresion RPAREN
    (57) call_module -> . ID LPAREN RPAREN

    ID              shift and go to state 41
    IF              shift and go to state 42
    PRINT           shift and go to state 43
    RETURN          shift and go to state 44
    FOR             shift and go to state 45
    WHILE           shift and go to state 46

    asignacion                     shift and go to state 34
    estatuto                       shift and go to state 154
    condicion                      shift and go to state 35
    escritura                      shift and go to state 36
    return                         shift and go to state 37
    for                            shift and go to state 38
    while                          shift and go to state 39
    call_module                    shift and go to state 40

state 147

    (60) while -> WHILE LPAREN expresion RPAREN LBRACKET . estatuto RBRACKET
    (22) estatuto -> . asignacion SEMICOLON
    (23) estatuto -> . condicion SEMICOLON
    (24) estatuto -> . escritura SEMICOLON
    (25) estatuto -> . return SEMICOLON
    (26) estatuto -> . for SEMICOLON
    (27) estatuto -> . while SEMICOLON
    (28) estatuto -> . call_module SEMICOLON
    (29) asignacion -> . ID EQUAL expresion
    (61) condicion -> . IF LPAREN expresion RPAREN bloque ELSE bloque
    (62) condicion -> . IF LPAREN expresion RPAREN bloque
    (63) escritura -> . PRINT LPAREN escritura_aux RPAREN
    (58) return -> . RETURN expresion
    (59) for -> . FOR asignacion TO CTEINT LBRACKET estatuto RBRACKET
    (60) while -> . WHILE LPAREN expresion RPAREN LBRACKET estatuto RBRACKET
    (56) call_module -> . ID LPAREN expresion RPAREN
    (57) call_module -> . ID LPAREN RPAREN

    ID              shift and go to state 41
    IF              shift and go to state 42
    PRINT           shift and go to state 43
    RETURN          shift and go to state 44
    FOR             shift and go to state 45
    WHILE           shift and go to state 46

    estatuto                       shift and go to state 155
    asignacion                     shift and go to state 34
    condicion                      shift and go to state 35
    escritura                      shift and go to state 36
    return                         shift and go to state 37
    for                            shift and go to state 38
    while                          shift and go to state 39
    call_module                    shift and go to state 40

state 148

    (7) vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux .

    MODULE          reduce using rule 7 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux .)
    MAIN            reduce using rule 7 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux .)
    RBRACKET        reduce using rule 7 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux .)
    ID              reduce using rule 7 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux .)
    IF              reduce using rule 7 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux .)
    PRINT           reduce using rule 7 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux .)
    RETURN          reduce using rule 7 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux .)
    FOR             reduce using rule 7 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux .)
    WHILE           reduce using rule 7 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux .)


state 149

    (50) module -> MODULE VOID n_seen_type ID n_seen_func_name params bloque_module module .

    MAIN            reduce using rule 50 (module -> MODULE VOID n_seen_type ID n_seen_func_name params bloque_module module .)


state 150

    (9) vars_func -> ID n_seen_var_name COLON . tipo n_set_var_type COMA vars_func
    (10) vars_func -> ID n_seen_var_name COLON . tipo n_set_var_type
    (11) tipo -> . INT n_seen_type
    (12) tipo -> . FLOAT n_seen_type
    (13) tipo -> . CHAR n_seen_type

    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20

    tipo                           shift and go to state 156

state 151

    (61) condicion -> IF LPAREN expresion RPAREN bloque ELSE . bloque
    (18) bloque -> . LBRACKET estatuto_aux RBRACKET
    (19) bloque -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 139

    bloque                         shift and go to state 157

state 152

    (18) bloque -> LBRACKET estatuto_aux . RBRACKET

    RBRACKET        shift and go to state 158


state 153

    (19) bloque -> LBRACKET RBRACKET .

    ELSE            reduce using rule 19 (bloque -> LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 19 (bloque -> LBRACKET RBRACKET .)


state 154

    (59) for -> FOR asignacion TO CTEINT LBRACKET estatuto . RBRACKET

    RBRACKET        shift and go to state 159


state 155

    (60) while -> WHILE LPAREN expresion RPAREN LBRACKET estatuto . RBRACKET

    RBRACKET        shift and go to state 160


state 156

    (9) vars_func -> ID n_seen_var_name COLON tipo . n_set_var_type COMA vars_func
    (10) vars_func -> ID n_seen_var_name COLON tipo . n_set_var_type
    (71) n_set_var_type -> .

    COMA            reduce using rule 71 (n_set_var_type -> .)
    RPAREN          reduce using rule 71 (n_set_var_type -> .)

    n_set_var_type                 shift and go to state 161

state 157

    (61) condicion -> IF LPAREN expresion RPAREN bloque ELSE bloque .

    SEMICOLON       reduce using rule 61 (condicion -> IF LPAREN expresion RPAREN bloque ELSE bloque .)


state 158

    (18) bloque -> LBRACKET estatuto_aux RBRACKET .

    ELSE            reduce using rule 18 (bloque -> LBRACKET estatuto_aux RBRACKET .)
    SEMICOLON       reduce using rule 18 (bloque -> LBRACKET estatuto_aux RBRACKET .)


state 159

    (59) for -> FOR asignacion TO CTEINT LBRACKET estatuto RBRACKET .

    SEMICOLON       reduce using rule 59 (for -> FOR asignacion TO CTEINT LBRACKET estatuto RBRACKET .)


state 160

    (60) while -> WHILE LPAREN expresion RPAREN LBRACKET estatuto RBRACKET .

    SEMICOLON       reduce using rule 60 (while -> WHILE LPAREN expresion RPAREN LBRACKET estatuto RBRACKET .)


state 161

    (9) vars_func -> ID n_seen_var_name COLON tipo n_set_var_type . COMA vars_func
    (10) vars_func -> ID n_seen_var_name COLON tipo n_set_var_type .

    COMA            shift and go to state 162
    RPAREN          reduce using rule 10 (vars_func -> ID n_seen_var_name COLON tipo n_set_var_type .)


state 162

    (9) vars_func -> ID n_seen_var_name COLON tipo n_set_var_type COMA . vars_func
    (9) vars_func -> . ID n_seen_var_name COLON tipo n_set_var_type COMA vars_func
    (10) vars_func -> . ID n_seen_var_name COLON tipo n_set_var_type

    ID              shift and go to state 113

    vars_func                      shift and go to state 163

state 163

    (9) vars_func -> ID n_seen_var_name COLON tipo n_set_var_type COMA vars_func .

    RPAREN          reduce using rule 9 (vars_func -> ID n_seen_var_name COLON tipo n_set_var_type COMA vars_func .)

