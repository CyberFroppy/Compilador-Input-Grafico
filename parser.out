Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    CTECHAR
    CHAR
    THEN
    DO
    WRITE
    READ

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM ID SEMICOLON vars module main
Rule 2     programa -> PROGRAM ID SEMICOLON module main
Rule 3     programa -> PROGRAM ID SEMICOLON vars main
Rule 4     programa -> PROGRAM ID SEMICOLON main
Rule 5     main -> MAIN bloque_module
Rule 6     vars -> VAR vars_aux
Rule 7     vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux
Rule 8     vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type DOT
Rule 9     vars_func -> ID n_seen_var_name COLON tipo n_set_var_type COMA vars_func
Rule 10    vars_func -> ID n_seen_var_name COLON tipo n_set_var_type
Rule 11    tipo -> INT n_seen_type
Rule 12    tipo -> FLOAT n_seen_type
Rule 13    bloque_module -> LBRACKET vars estatuto_aux RBRACKET
Rule 14    bloque_module -> LBRACKET vars RBRACKET
Rule 15    bloque_module -> LBRACKET estatuto_aux RBRACKET
Rule 16    bloque_module -> LBRACKET RBRACKET
Rule 17    bloque -> LBRACKET estatuto_aux RBRACKET
Rule 18    bloque -> LBRACKET RBRACKET
Rule 19    estatuto_aux -> estatuto estatuto_aux
Rule 20    estatuto_aux -> estatuto
Rule 21    estatuto -> asignacion SEMICOLON
Rule 22    estatuto -> condicion SEMICOLON
Rule 23    estatuto -> escritura SEMICOLON
Rule 24    estatuto -> return SEMICOLON
Rule 25    estatuto -> for SEMICOLON
Rule 26    estatuto -> while SEMICOLON
Rule 27    estatuto -> call_module SEMICOLON
Rule 28    asignacion -> ID EQUAL expresion
Rule 29    expresion -> exp AND expresion
Rule 30    expresion -> exp
Rule 31    exp -> exp_aux OR exp
Rule 32    exp -> exp_aux
Rule 33    exp_aux -> exp_aux2 GREATERT exp_aux2
Rule 34    exp_aux -> exp_aux2 LESST exp_aux2
Rule 35    exp_aux -> exp_aux2 NOTEQUAL exp_aux2
Rule 36    exp_aux -> exp_aux2 DBEQUALS exp_aux2
Rule 37    exp_aux -> exp_aux2
Rule 38    exp_aux2 -> term PLUS exp_aux2
Rule 39    exp_aux2 -> term MINUS exp_aux2
Rule 40    exp_aux2 -> term
Rule 41    term -> factor MULTIPLY term
Rule 42    term -> factor DIVIDE term
Rule 43    term -> factor
Rule 44    factor -> LPAREN expresion RPAREN
Rule 45    factor -> CTEINT n_seen_factor_int
Rule 46    factor -> CTEF
Rule 47    factor -> ID n_seen_factor_id
Rule 48    module -> MODULE VOID n_seen_type ID n_seen_func_name params bloque_module module
Rule 49    module -> MODULE tipo ID n_seen_func_name params bloque_module module
Rule 50    module -> MODULE VOID n_seen_type ID n_seen_func_name params bloque_module
Rule 51    module -> MODULE tipo ID n_seen_func_name params bloque_module
Rule 52    params -> LPAREN vars_func RPAREN
Rule 53    params -> LPAREN RPAREN
Rule 54    call_module -> ID LPAREN expresion RPAREN
Rule 55    call_module -> ID LPAREN RPAREN
Rule 56    return -> RETURN expresion
Rule 57    for -> FOR asignacion TO CTEINT LBRACKET estatuto RBRACKET
Rule 58    while -> WHILE LPAREN expresion RPAREN LBRACKET estatuto RBRACKET
Rule 59    condicion -> IF LPAREN expresion RPAREN bloque ELSE bloque
Rule 60    condicion -> IF LPAREN expresion RPAREN bloque
Rule 61    escritura -> PRINT LPAREN escritura_aux RPAREN
Rule 62    escritura_aux -> expresion COMA escritura_aux
Rule 63    escritura_aux -> CTESTRING COMA escritura_aux
Rule 64    escritura_aux -> expresion
Rule 65    escritura_aux -> CTESTRING
Rule 66    n_seen_type -> <empty>
Rule 67    n_seen_var_name -> <empty>
Rule 68    n_seen_func_name -> <empty>
Rule 69    n_set_var_type -> <empty>
Rule 70    n_seen_factor_id -> <empty>
Rule 71    n_seen_factor_int -> <empty>

Terminals, with rules where they appear

AND                  : 29
CHAR                 : 
COLON                : 7 8 9 10
COMA                 : 9 62 63
COMMENT              : 
CTECHAR              : 
CTEF                 : 46
CTEINT               : 45 57
DBEQUALS             : 36
DIVIDE               : 42
DO                   : 
DOT                  : 8
ELSE                 : 59
EQUAL                : 28
FLOAT                : 12
FOR                  : 57
GREATERT             : 33
ID                   : 1 2 3 4 7 8 9 10 28 47 48 49 50 51 54 55
IF                   : 59 60
INT                  : 11
LBRACKET             : 13 14 15 16 17 18 57 58
LESST                : 34
LPAREN               : 44 52 53 54 55 58 59 60 61
MAIN                 : 5
MINUS                : 39
MODULE               : 48 49 50 51
MULTIPLY             : 41
NOTEQUAL             : 35
OR                   : 31
PLUS                 : 38
PRINT                : 61
PROGRAM              : 1 2 3 4
RBRACKET             : 13 14 15 16 17 18 57 58
READ                 : 
RETURN               : 56
RPAREN               : 44 52 53 54 55 58 59 60 61
SEMICOLON            : 1 2 3 4 7 21 22 23 24 25 26 27
THEN                 : 
TO                   : 57
VAR                  : 6
VOID                 : 48 50
WHILE                : 58
WRITE                : 
error                : 

Nonterminals, with rules where they appear

CTESTRING            : 63 65
asignacion           : 21 57
bloque               : 59 59 60
bloque_module        : 5 48 49 50 51
call_module          : 27
condicion            : 22
escritura            : 23
escritura_aux        : 61 62 63
estatuto             : 19 20 57 58
estatuto_aux         : 13 15 17 19
exp                  : 29 30 31
exp_aux              : 31 32
exp_aux2             : 33 33 34 34 35 35 36 36 37 38 39
expresion            : 28 29 44 54 56 58 59 60 62 64
factor               : 41 42 43
for                  : 25
main                 : 1 2 3 4
module               : 1 2 48 49
n_seen_factor_id     : 47
n_seen_factor_int    : 45
n_seen_func_name     : 48 49 50 51
n_seen_type          : 11 12 48 50
n_seen_var_name      : 7 8 9 10
n_set_var_type       : 7 8 9 10
params               : 48 49 50 51
programa             : 0
return               : 24
term                 : 38 39 40 41 42
tipo                 : 7 8 9 10 49 51
vars                 : 1 3 13 14
vars_aux             : 6 7
vars_func            : 9 52
while                : 26

