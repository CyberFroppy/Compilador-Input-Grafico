Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    DOT
    CHAR
    THEN
    DO
    WRITE
    READ

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM ID SEMICOLON vars module main
Rule 2     programa -> PROGRAM ID SEMICOLON module main
Rule 3     programa -> PROGRAM ID SEMICOLON vars main
Rule 4     programa -> PROGRAM ID SEMICOLON main
Rule 5     main -> MAIN bloque_module
Rule 6     vars -> VAR vars_aux
Rule 7     vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux
Rule 8     vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON
Rule 9     vars_func -> ID n_seen_var_name COLON tipo n_set_var_type COMA vars_aux
Rule 10    vars_func -> ID n_seen_var_name COLON tipo n_set_var_type
Rule 11    tipo -> INT n_seen_type
Rule 12    tipo -> FLOAT n_seen_type
Rule 13    bloque_module -> LBRACKET estatuto_module_aux RBRACKET
Rule 14    bloque_module -> LBRACKET RBRACKET
Rule 15    estatuto_module_aux -> estatuto_module estatuto_module_aux
Rule 16    estatuto_module_aux -> estatuto_module
Rule 17    estatuto_module -> estatuto
Rule 18    estatuto_module -> vars
Rule 19    bloque -> LBRACKET estatuto_aux RBRACKET
Rule 20    bloque -> LBRACKET RBRACKET
Rule 21    estatuto_aux -> estatuto estatuto_aux
Rule 22    estatuto_aux -> estatuto
Rule 23    estatuto -> asignacion SEMICOLON
Rule 24    estatuto -> condicion SEMICOLON
Rule 25    estatuto -> escritura SEMICOLON
Rule 26    estatuto -> return SEMICOLON
Rule 27    estatuto -> for SEMICOLON
Rule 28    estatuto -> while SEMICOLON
Rule 29    estatuto -> call_module SEMICOLON
Rule 30    asignacion -> ID EQUAL expresion
Rule 31    expresion -> exp AND expresion
Rule 32    expresion -> exp
Rule 33    exp -> exp_aux OR exp
Rule 34    exp -> exp_aux
Rule 35    exp_aux -> exp_aux2 GREATERT exp_aux2
Rule 36    exp_aux -> exp_aux2 LESST exp_aux2
Rule 37    exp_aux -> exp_aux2 NOTEQUAL exp_aux2
Rule 38    exp_aux -> exp_aux2 DBEQUALS exp_aux2
Rule 39    exp_aux -> exp_aux2
Rule 40    exp_aux2 -> term PLUS exp_aux2
Rule 41    exp_aux2 -> term MINUS exp_aux2
Rule 42    exp_aux2 -> term
Rule 43    term -> factor MULTIPLY term
Rule 44    term -> factor DIVIDE term
Rule 45    term -> factor
Rule 46    factor -> LPAREN expresion RPAREN
Rule 47    factor -> CTEINT
Rule 48    factor -> CTEF
Rule 49    factor -> ID
Rule 50    module -> MODULE VOID n_seen_type ID n_seen_func_name params bloque_module module
Rule 51    module -> MODULE tipo ID n_seen_func_name params bloque_module module
Rule 52    module -> MODULE VOID n_seen_type ID n_seen_func_name params bloque_module
Rule 53    module -> MODULE tipo ID n_seen_func_name params bloque_module
Rule 54    params -> LPAREN vars_func RPAREN
Rule 55    params -> LPAREN RPAREN
Rule 56    call_module -> ID LPAREN expresion RPAREN
Rule 57    call_module -> ID LPAREN RPAREN
Rule 58    return -> RETURN expresion
Rule 59    for -> FOR asignacion TO CTEINT LBRACKET estatuto RBRACKET
Rule 60    while -> WHILE LPAREN expresion RPAREN LBRACKET estatuto RBRACKET
Rule 61    condicion -> IF LPAREN expresion RPAREN bloque ELSE bloque
Rule 62    condicion -> IF LPAREN expresion RPAREN bloque
Rule 63    escritura -> PRINT LPAREN escritura_aux RPAREN
Rule 64    escritura_aux -> expresion COMA escritura_aux
Rule 65    escritura_aux -> CTESTRING COMA escritura_aux
Rule 66    escritura_aux -> expresion
Rule 67    escritura_aux -> CTESTRING
Rule 68    n_seen_type -> <empty>
Rule 69    n_seen_var_name -> <empty>
Rule 70    n_seen_func_name -> <empty>
Rule 71    n_set_var_type -> <empty>

Terminals, with rules where they appear

AND                  : 31
CHAR                 : 
COLON                : 7 8 9 10
COMA                 : 9 64 65
COMMENT              : 
CTEF                 : 48
CTEINT               : 47 59
CTESTRING            : 65 67
DBEQUALS             : 38
DIVIDE               : 44
DO                   : 
DOT                  : 
ELSE                 : 61
EQUAL                : 30
FLOAT                : 12
FOR                  : 59
GREATERT             : 35
ID                   : 1 2 3 4 7 8 9 10 30 49 50 51 52 53 56 57
IF                   : 61 62
INT                  : 11
LBRACKET             : 13 14 19 20 59 60
LESST                : 36
LPAREN               : 46 54 55 56 57 60 61 62 63
MAIN                 : 5
MINUS                : 41
MODULE               : 50 51 52 53
MULTIPLY             : 43
NOTEQUAL             : 37
OR                   : 33
PLUS                 : 40
PRINT                : 63
PROGRAM              : 1 2 3 4
RBRACKET             : 13 14 19 20 59 60
READ                 : 
RETURN               : 58
RPAREN               : 46 54 55 56 57 60 61 62 63
SEMICOLON            : 1 2 3 4 7 8 23 24 25 26 27 28 29
THEN                 : 
TO                   : 59
VAR                  : 6
VOID                 : 50 52
WHILE                : 60
WRITE                : 
error                : 

Nonterminals, with rules where they appear

asignacion           : 23 59
bloque               : 61 61 62
bloque_module        : 5 50 51 52 53
call_module          : 29
condicion            : 24
escritura            : 25
escritura_aux        : 63 64 65
estatuto             : 17 21 22 59 60
estatuto_aux         : 19 21
estatuto_module      : 15 16
estatuto_module_aux  : 13 15
exp                  : 31 32 33
exp_aux              : 33 34
exp_aux2             : 35 35 36 36 37 37 38 38 39 40 41
expresion            : 30 31 46 56 58 60 61 62 64 66
factor               : 43 44 45
for                  : 27
main                 : 1 2 3 4
module               : 1 2 50 51
n_seen_func_name     : 50 51 52 53
n_seen_type          : 11 12 50 52
n_seen_var_name      : 7 8 9 10
n_set_var_type       : 7 8 9 10
params               : 50 51 52 53
programa             : 0
return               : 26
term                 : 40 41 42 43 44
tipo                 : 7 8 9 10 51 53
vars                 : 1 3 18
vars_aux             : 6 7 9
vars_func            : 54
while                : 28

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM ID SEMICOLON vars module main
    (2) programa -> . PROGRAM ID SEMICOLON module main
    (3) programa -> . PROGRAM ID SEMICOLON vars main
    (4) programa -> . PROGRAM ID SEMICOLON main

    PROGRAM         shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAM . ID SEMICOLON vars module main
    (2) programa -> PROGRAM . ID SEMICOLON module main
    (3) programa -> PROGRAM . ID SEMICOLON vars main
    (4) programa -> PROGRAM . ID SEMICOLON main

    ID              shift and go to state 3


state 3

    (1) programa -> PROGRAM ID . SEMICOLON vars module main
    (2) programa -> PROGRAM ID . SEMICOLON module main
    (3) programa -> PROGRAM ID . SEMICOLON vars main
    (4) programa -> PROGRAM ID . SEMICOLON main

    SEMICOLON       shift and go to state 4


state 4

    (1) programa -> PROGRAM ID SEMICOLON . vars module main
    (2) programa -> PROGRAM ID SEMICOLON . module main
    (3) programa -> PROGRAM ID SEMICOLON . vars main
    (4) programa -> PROGRAM ID SEMICOLON . main
    (6) vars -> . VAR vars_aux
    (50) module -> . MODULE VOID n_seen_type ID n_seen_func_name params bloque_module module
    (51) module -> . MODULE tipo ID n_seen_func_name params bloque_module module
    (52) module -> . MODULE VOID n_seen_type ID n_seen_func_name params bloque_module
    (53) module -> . MODULE tipo ID n_seen_func_name params bloque_module
    (5) main -> . MAIN bloque_module

    VAR             shift and go to state 8
    MODULE          shift and go to state 9
    MAIN            shift and go to state 10

    vars                           shift and go to state 5
    module                         shift and go to state 6
    main                           shift and go to state 7

state 5

    (1) programa -> PROGRAM ID SEMICOLON vars . module main
    (3) programa -> PROGRAM ID SEMICOLON vars . main
    (50) module -> . MODULE VOID n_seen_type ID n_seen_func_name params bloque_module module
    (51) module -> . MODULE tipo ID n_seen_func_name params bloque_module module
    (52) module -> . MODULE VOID n_seen_type ID n_seen_func_name params bloque_module
    (53) module -> . MODULE tipo ID n_seen_func_name params bloque_module
    (5) main -> . MAIN bloque_module

    MODULE          shift and go to state 9
    MAIN            shift and go to state 10

    module                         shift and go to state 11
    main                           shift and go to state 12

state 6

    (2) programa -> PROGRAM ID SEMICOLON module . main
    (5) main -> . MAIN bloque_module

    MAIN            shift and go to state 10

    main                           shift and go to state 13

state 7

    (4) programa -> PROGRAM ID SEMICOLON main .

    $end            reduce using rule 4 (programa -> PROGRAM ID SEMICOLON main .)


state 8

    (6) vars -> VAR . vars_aux
    (7) vars_aux -> . ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux
    (8) vars_aux -> . ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON

    ID              shift and go to state 15

    vars_aux                       shift and go to state 14

state 9

    (50) module -> MODULE . VOID n_seen_type ID n_seen_func_name params bloque_module module
    (51) module -> MODULE . tipo ID n_seen_func_name params bloque_module module
    (52) module -> MODULE . VOID n_seen_type ID n_seen_func_name params bloque_module
    (53) module -> MODULE . tipo ID n_seen_func_name params bloque_module
    (11) tipo -> . INT n_seen_type
    (12) tipo -> . FLOAT n_seen_type

    VOID            shift and go to state 16
    INT             shift and go to state 18
    FLOAT           shift and go to state 19

    tipo                           shift and go to state 17

state 10

    (5) main -> MAIN . bloque_module
    (13) bloque_module -> . LBRACKET estatuto_module_aux RBRACKET
    (14) bloque_module -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 21

    bloque_module                  shift and go to state 20

state 11

    (1) programa -> PROGRAM ID SEMICOLON vars module . main
    (5) main -> . MAIN bloque_module

    MAIN            shift and go to state 10

    main                           shift and go to state 22

state 12

    (3) programa -> PROGRAM ID SEMICOLON vars main .

    $end            reduce using rule 3 (programa -> PROGRAM ID SEMICOLON vars main .)


state 13

    (2) programa -> PROGRAM ID SEMICOLON module main .

    $end            reduce using rule 2 (programa -> PROGRAM ID SEMICOLON module main .)


state 14

    (6) vars -> VAR vars_aux .

    MODULE          reduce using rule 6 (vars -> VAR vars_aux .)
    MAIN            reduce using rule 6 (vars -> VAR vars_aux .)
    VAR             reduce using rule 6 (vars -> VAR vars_aux .)
    ID              reduce using rule 6 (vars -> VAR vars_aux .)
    IF              reduce using rule 6 (vars -> VAR vars_aux .)
    PRINT           reduce using rule 6 (vars -> VAR vars_aux .)
    RETURN          reduce using rule 6 (vars -> VAR vars_aux .)
    FOR             reduce using rule 6 (vars -> VAR vars_aux .)
    WHILE           reduce using rule 6 (vars -> VAR vars_aux .)
    RBRACKET        reduce using rule 6 (vars -> VAR vars_aux .)


state 15

    (7) vars_aux -> ID . n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux
    (8) vars_aux -> ID . n_seen_var_name COLON tipo n_set_var_type SEMICOLON
    (69) n_seen_var_name -> .

    COLON           reduce using rule 69 (n_seen_var_name -> .)

    n_seen_var_name                shift and go to state 23

state 16

    (50) module -> MODULE VOID . n_seen_type ID n_seen_func_name params bloque_module module
    (52) module -> MODULE VOID . n_seen_type ID n_seen_func_name params bloque_module
    (68) n_seen_type -> .

    ID              reduce using rule 68 (n_seen_type -> .)

    n_seen_type                    shift and go to state 24

state 17

    (51) module -> MODULE tipo . ID n_seen_func_name params bloque_module module
    (53) module -> MODULE tipo . ID n_seen_func_name params bloque_module

    ID              shift and go to state 25


state 18

    (11) tipo -> INT . n_seen_type
    (68) n_seen_type -> .

    ID              reduce using rule 68 (n_seen_type -> .)
    SEMICOLON       reduce using rule 68 (n_seen_type -> .)
    COMA            reduce using rule 68 (n_seen_type -> .)
    RPAREN          reduce using rule 68 (n_seen_type -> .)

    n_seen_type                    shift and go to state 26

state 19

    (12) tipo -> FLOAT . n_seen_type
    (68) n_seen_type -> .

    ID              reduce using rule 68 (n_seen_type -> .)
    SEMICOLON       reduce using rule 68 (n_seen_type -> .)
    COMA            reduce using rule 68 (n_seen_type -> .)
    RPAREN          reduce using rule 68 (n_seen_type -> .)

    n_seen_type                    shift and go to state 27

state 20

    (5) main -> MAIN bloque_module .

    $end            reduce using rule 5 (main -> MAIN bloque_module .)


state 21

    (13) bloque_module -> LBRACKET . estatuto_module_aux RBRACKET
    (14) bloque_module -> LBRACKET . RBRACKET
    (15) estatuto_module_aux -> . estatuto_module estatuto_module_aux
    (16) estatuto_module_aux -> . estatuto_module
    (17) estatuto_module -> . estatuto
    (18) estatuto_module -> . vars
    (23) estatuto -> . asignacion SEMICOLON
    (24) estatuto -> . condicion SEMICOLON
    (25) estatuto -> . escritura SEMICOLON
    (26) estatuto -> . return SEMICOLON
    (27) estatuto -> . for SEMICOLON
    (28) estatuto -> . while SEMICOLON
    (29) estatuto -> . call_module SEMICOLON
    (6) vars -> . VAR vars_aux
    (30) asignacion -> . ID EQUAL expresion
    (61) condicion -> . IF LPAREN expresion RPAREN bloque ELSE bloque
    (62) condicion -> . IF LPAREN expresion RPAREN bloque
    (63) escritura -> . PRINT LPAREN escritura_aux RPAREN
    (58) return -> . RETURN expresion
    (59) for -> . FOR asignacion TO CTEINT LBRACKET estatuto RBRACKET
    (60) while -> . WHILE LPAREN expresion RPAREN LBRACKET estatuto RBRACKET
    (56) call_module -> . ID LPAREN expresion RPAREN
    (57) call_module -> . ID LPAREN RPAREN

    RBRACKET        shift and go to state 29
    VAR             shift and go to state 8
    ID              shift and go to state 40
    IF              shift and go to state 41
    PRINT           shift and go to state 42
    RETURN          shift and go to state 43
    FOR             shift and go to state 44
    WHILE           shift and go to state 45

    estatuto_module_aux            shift and go to state 28
    estatuto_module                shift and go to state 30
    estatuto                       shift and go to state 31
    vars                           shift and go to state 32
    asignacion                     shift and go to state 33
    condicion                      shift and go to state 34
    escritura                      shift and go to state 35
    return                         shift and go to state 36
    for                            shift and go to state 37
    while                          shift and go to state 38
    call_module                    shift and go to state 39

state 22

    (1) programa -> PROGRAM ID SEMICOLON vars module main .

    $end            reduce using rule 1 (programa -> PROGRAM ID SEMICOLON vars module main .)


state 23

    (7) vars_aux -> ID n_seen_var_name . COLON tipo n_set_var_type SEMICOLON vars_aux
    (8) vars_aux -> ID n_seen_var_name . COLON tipo n_set_var_type SEMICOLON

    COLON           shift and go to state 46


state 24

    (50) module -> MODULE VOID n_seen_type . ID n_seen_func_name params bloque_module module
    (52) module -> MODULE VOID n_seen_type . ID n_seen_func_name params bloque_module

    ID              shift and go to state 47


state 25

    (51) module -> MODULE tipo ID . n_seen_func_name params bloque_module module
    (53) module -> MODULE tipo ID . n_seen_func_name params bloque_module
    (70) n_seen_func_name -> .

    LPAREN          reduce using rule 70 (n_seen_func_name -> .)

    n_seen_func_name               shift and go to state 48

state 26

    (11) tipo -> INT n_seen_type .

    ID              reduce using rule 11 (tipo -> INT n_seen_type .)
    SEMICOLON       reduce using rule 11 (tipo -> INT n_seen_type .)
    COMA            reduce using rule 11 (tipo -> INT n_seen_type .)
    RPAREN          reduce using rule 11 (tipo -> INT n_seen_type .)


state 27

    (12) tipo -> FLOAT n_seen_type .

    ID              reduce using rule 12 (tipo -> FLOAT n_seen_type .)
    SEMICOLON       reduce using rule 12 (tipo -> FLOAT n_seen_type .)
    COMA            reduce using rule 12 (tipo -> FLOAT n_seen_type .)
    RPAREN          reduce using rule 12 (tipo -> FLOAT n_seen_type .)


state 28

    (13) bloque_module -> LBRACKET estatuto_module_aux . RBRACKET

    RBRACKET        shift and go to state 49


state 29

    (14) bloque_module -> LBRACKET RBRACKET .

    $end            reduce using rule 14 (bloque_module -> LBRACKET RBRACKET .)
    MODULE          reduce using rule 14 (bloque_module -> LBRACKET RBRACKET .)
    MAIN            reduce using rule 14 (bloque_module -> LBRACKET RBRACKET .)


state 30

    (15) estatuto_module_aux -> estatuto_module . estatuto_module_aux
    (16) estatuto_module_aux -> estatuto_module .
    (15) estatuto_module_aux -> . estatuto_module estatuto_module_aux
    (16) estatuto_module_aux -> . estatuto_module
    (17) estatuto_module -> . estatuto
    (18) estatuto_module -> . vars
    (23) estatuto -> . asignacion SEMICOLON
    (24) estatuto -> . condicion SEMICOLON
    (25) estatuto -> . escritura SEMICOLON
    (26) estatuto -> . return SEMICOLON
    (27) estatuto -> . for SEMICOLON
    (28) estatuto -> . while SEMICOLON
    (29) estatuto -> . call_module SEMICOLON
    (6) vars -> . VAR vars_aux
    (30) asignacion -> . ID EQUAL expresion
    (61) condicion -> . IF LPAREN expresion RPAREN bloque ELSE bloque
    (62) condicion -> . IF LPAREN expresion RPAREN bloque
    (63) escritura -> . PRINT LPAREN escritura_aux RPAREN
    (58) return -> . RETURN expresion
    (59) for -> . FOR asignacion TO CTEINT LBRACKET estatuto RBRACKET
    (60) while -> . WHILE LPAREN expresion RPAREN LBRACKET estatuto RBRACKET
    (56) call_module -> . ID LPAREN expresion RPAREN
    (57) call_module -> . ID LPAREN RPAREN

    RBRACKET        reduce using rule 16 (estatuto_module_aux -> estatuto_module .)
    VAR             shift and go to state 8
    ID              shift and go to state 40
    IF              shift and go to state 41
    PRINT           shift and go to state 42
    RETURN          shift and go to state 43
    FOR             shift and go to state 44
    WHILE           shift and go to state 45

    estatuto_module                shift and go to state 30
    estatuto_module_aux            shift and go to state 50
    estatuto                       shift and go to state 31
    vars                           shift and go to state 32
    asignacion                     shift and go to state 33
    condicion                      shift and go to state 34
    escritura                      shift and go to state 35
    return                         shift and go to state 36
    for                            shift and go to state 37
    while                          shift and go to state 38
    call_module                    shift and go to state 39

state 31

    (17) estatuto_module -> estatuto .

    VAR             reduce using rule 17 (estatuto_module -> estatuto .)
    ID              reduce using rule 17 (estatuto_module -> estatuto .)
    IF              reduce using rule 17 (estatuto_module -> estatuto .)
    PRINT           reduce using rule 17 (estatuto_module -> estatuto .)
    RETURN          reduce using rule 17 (estatuto_module -> estatuto .)
    FOR             reduce using rule 17 (estatuto_module -> estatuto .)
    WHILE           reduce using rule 17 (estatuto_module -> estatuto .)
    RBRACKET        reduce using rule 17 (estatuto_module -> estatuto .)


state 32

    (18) estatuto_module -> vars .

    VAR             reduce using rule 18 (estatuto_module -> vars .)
    ID              reduce using rule 18 (estatuto_module -> vars .)
    IF              reduce using rule 18 (estatuto_module -> vars .)
    PRINT           reduce using rule 18 (estatuto_module -> vars .)
    RETURN          reduce using rule 18 (estatuto_module -> vars .)
    FOR             reduce using rule 18 (estatuto_module -> vars .)
    WHILE           reduce using rule 18 (estatuto_module -> vars .)
    RBRACKET        reduce using rule 18 (estatuto_module -> vars .)


state 33

    (23) estatuto -> asignacion . SEMICOLON

    SEMICOLON       shift and go to state 51


state 34

    (24) estatuto -> condicion . SEMICOLON

    SEMICOLON       shift and go to state 52


state 35

    (25) estatuto -> escritura . SEMICOLON

    SEMICOLON       shift and go to state 53


state 36

    (26) estatuto -> return . SEMICOLON

    SEMICOLON       shift and go to state 54


state 37

    (27) estatuto -> for . SEMICOLON

    SEMICOLON       shift and go to state 55


state 38

    (28) estatuto -> while . SEMICOLON

    SEMICOLON       shift and go to state 56


state 39

    (29) estatuto -> call_module . SEMICOLON

    SEMICOLON       shift and go to state 57


state 40

    (30) asignacion -> ID . EQUAL expresion
    (56) call_module -> ID . LPAREN expresion RPAREN
    (57) call_module -> ID . LPAREN RPAREN

    EQUAL           shift and go to state 58
    LPAREN          shift and go to state 59


state 41

    (61) condicion -> IF . LPAREN expresion RPAREN bloque ELSE bloque
    (62) condicion -> IF . LPAREN expresion RPAREN bloque

    LPAREN          shift and go to state 60


state 42

    (63) escritura -> PRINT . LPAREN escritura_aux RPAREN

    LPAREN          shift and go to state 61


state 43

    (58) return -> RETURN . expresion
    (31) expresion -> . exp AND expresion
    (32) expresion -> . exp
    (33) exp -> . exp_aux OR exp
    (34) exp -> . exp_aux
    (35) exp_aux -> . exp_aux2 GREATERT exp_aux2
    (36) exp_aux -> . exp_aux2 LESST exp_aux2
    (37) exp_aux -> . exp_aux2 NOTEQUAL exp_aux2
    (38) exp_aux -> . exp_aux2 DBEQUALS exp_aux2
    (39) exp_aux -> . exp_aux2
    (40) exp_aux2 -> . term PLUS exp_aux2
    (41) exp_aux2 -> . term MINUS exp_aux2
    (42) exp_aux2 -> . term
    (43) term -> . factor MULTIPLY term
    (44) term -> . factor DIVIDE term
    (45) term -> . factor
    (46) factor -> . LPAREN expresion RPAREN
    (47) factor -> . CTEINT
    (48) factor -> . CTEF
    (49) factor -> . ID

    LPAREN          shift and go to state 68
    CTEINT          shift and go to state 69
    CTEF            shift and go to state 70
    ID              shift and go to state 71

    expresion                      shift and go to state 62
    exp                            shift and go to state 63
    exp_aux                        shift and go to state 64
    exp_aux2                       shift and go to state 65
    term                           shift and go to state 66
    factor                         shift and go to state 67

state 44

    (59) for -> FOR . asignacion TO CTEINT LBRACKET estatuto RBRACKET
    (30) asignacion -> . ID EQUAL expresion

    ID              shift and go to state 73

    asignacion                     shift and go to state 72

state 45

    (60) while -> WHILE . LPAREN expresion RPAREN LBRACKET estatuto RBRACKET

    LPAREN          shift and go to state 74


state 46

    (7) vars_aux -> ID n_seen_var_name COLON . tipo n_set_var_type SEMICOLON vars_aux
    (8) vars_aux -> ID n_seen_var_name COLON . tipo n_set_var_type SEMICOLON
    (11) tipo -> . INT n_seen_type
    (12) tipo -> . FLOAT n_seen_type

    INT             shift and go to state 18
    FLOAT           shift and go to state 19

    tipo                           shift and go to state 75

state 47

    (50) module -> MODULE VOID n_seen_type ID . n_seen_func_name params bloque_module module
    (52) module -> MODULE VOID n_seen_type ID . n_seen_func_name params bloque_module
    (70) n_seen_func_name -> .

    LPAREN          reduce using rule 70 (n_seen_func_name -> .)

    n_seen_func_name               shift and go to state 76

state 48

    (51) module -> MODULE tipo ID n_seen_func_name . params bloque_module module
    (53) module -> MODULE tipo ID n_seen_func_name . params bloque_module
    (54) params -> . LPAREN vars_func RPAREN
    (55) params -> . LPAREN RPAREN

    LPAREN          shift and go to state 78

    params                         shift and go to state 77

state 49

    (13) bloque_module -> LBRACKET estatuto_module_aux RBRACKET .

    $end            reduce using rule 13 (bloque_module -> LBRACKET estatuto_module_aux RBRACKET .)
    MODULE          reduce using rule 13 (bloque_module -> LBRACKET estatuto_module_aux RBRACKET .)
    MAIN            reduce using rule 13 (bloque_module -> LBRACKET estatuto_module_aux RBRACKET .)


state 50

    (15) estatuto_module_aux -> estatuto_module estatuto_module_aux .

    RBRACKET        reduce using rule 15 (estatuto_module_aux -> estatuto_module estatuto_module_aux .)


state 51

    (23) estatuto -> asignacion SEMICOLON .

    VAR             reduce using rule 23 (estatuto -> asignacion SEMICOLON .)
    ID              reduce using rule 23 (estatuto -> asignacion SEMICOLON .)
    IF              reduce using rule 23 (estatuto -> asignacion SEMICOLON .)
    PRINT           reduce using rule 23 (estatuto -> asignacion SEMICOLON .)
    RETURN          reduce using rule 23 (estatuto -> asignacion SEMICOLON .)
    FOR             reduce using rule 23 (estatuto -> asignacion SEMICOLON .)
    WHILE           reduce using rule 23 (estatuto -> asignacion SEMICOLON .)
    RBRACKET        reduce using rule 23 (estatuto -> asignacion SEMICOLON .)


state 52

    (24) estatuto -> condicion SEMICOLON .

    VAR             reduce using rule 24 (estatuto -> condicion SEMICOLON .)
    ID              reduce using rule 24 (estatuto -> condicion SEMICOLON .)
    IF              reduce using rule 24 (estatuto -> condicion SEMICOLON .)
    PRINT           reduce using rule 24 (estatuto -> condicion SEMICOLON .)
    RETURN          reduce using rule 24 (estatuto -> condicion SEMICOLON .)
    FOR             reduce using rule 24 (estatuto -> condicion SEMICOLON .)
    WHILE           reduce using rule 24 (estatuto -> condicion SEMICOLON .)
    RBRACKET        reduce using rule 24 (estatuto -> condicion SEMICOLON .)


state 53

    (25) estatuto -> escritura SEMICOLON .

    VAR             reduce using rule 25 (estatuto -> escritura SEMICOLON .)
    ID              reduce using rule 25 (estatuto -> escritura SEMICOLON .)
    IF              reduce using rule 25 (estatuto -> escritura SEMICOLON .)
    PRINT           reduce using rule 25 (estatuto -> escritura SEMICOLON .)
    RETURN          reduce using rule 25 (estatuto -> escritura SEMICOLON .)
    FOR             reduce using rule 25 (estatuto -> escritura SEMICOLON .)
    WHILE           reduce using rule 25 (estatuto -> escritura SEMICOLON .)
    RBRACKET        reduce using rule 25 (estatuto -> escritura SEMICOLON .)


state 54

    (26) estatuto -> return SEMICOLON .

    VAR             reduce using rule 26 (estatuto -> return SEMICOLON .)
    ID              reduce using rule 26 (estatuto -> return SEMICOLON .)
    IF              reduce using rule 26 (estatuto -> return SEMICOLON .)
    PRINT           reduce using rule 26 (estatuto -> return SEMICOLON .)
    RETURN          reduce using rule 26 (estatuto -> return SEMICOLON .)
    FOR             reduce using rule 26 (estatuto -> return SEMICOLON .)
    WHILE           reduce using rule 26 (estatuto -> return SEMICOLON .)
    RBRACKET        reduce using rule 26 (estatuto -> return SEMICOLON .)


state 55

    (27) estatuto -> for SEMICOLON .

    VAR             reduce using rule 27 (estatuto -> for SEMICOLON .)
    ID              reduce using rule 27 (estatuto -> for SEMICOLON .)
    IF              reduce using rule 27 (estatuto -> for SEMICOLON .)
    PRINT           reduce using rule 27 (estatuto -> for SEMICOLON .)
    RETURN          reduce using rule 27 (estatuto -> for SEMICOLON .)
    FOR             reduce using rule 27 (estatuto -> for SEMICOLON .)
    WHILE           reduce using rule 27 (estatuto -> for SEMICOLON .)
    RBRACKET        reduce using rule 27 (estatuto -> for SEMICOLON .)


state 56

    (28) estatuto -> while SEMICOLON .

    VAR             reduce using rule 28 (estatuto -> while SEMICOLON .)
    ID              reduce using rule 28 (estatuto -> while SEMICOLON .)
    IF              reduce using rule 28 (estatuto -> while SEMICOLON .)
    PRINT           reduce using rule 28 (estatuto -> while SEMICOLON .)
    RETURN          reduce using rule 28 (estatuto -> while SEMICOLON .)
    FOR             reduce using rule 28 (estatuto -> while SEMICOLON .)
    WHILE           reduce using rule 28 (estatuto -> while SEMICOLON .)
    RBRACKET        reduce using rule 28 (estatuto -> while SEMICOLON .)


state 57

    (29) estatuto -> call_module SEMICOLON .

    VAR             reduce using rule 29 (estatuto -> call_module SEMICOLON .)
    ID              reduce using rule 29 (estatuto -> call_module SEMICOLON .)
    IF              reduce using rule 29 (estatuto -> call_module SEMICOLON .)
    PRINT           reduce using rule 29 (estatuto -> call_module SEMICOLON .)
    RETURN          reduce using rule 29 (estatuto -> call_module SEMICOLON .)
    FOR             reduce using rule 29 (estatuto -> call_module SEMICOLON .)
    WHILE           reduce using rule 29 (estatuto -> call_module SEMICOLON .)
    RBRACKET        reduce using rule 29 (estatuto -> call_module SEMICOLON .)


state 58

    (30) asignacion -> ID EQUAL . expresion
    (31) expresion -> . exp AND expresion
    (32) expresion -> . exp
    (33) exp -> . exp_aux OR exp
    (34) exp -> . exp_aux
    (35) exp_aux -> . exp_aux2 GREATERT exp_aux2
    (36) exp_aux -> . exp_aux2 LESST exp_aux2
    (37) exp_aux -> . exp_aux2 NOTEQUAL exp_aux2
    (38) exp_aux -> . exp_aux2 DBEQUALS exp_aux2
    (39) exp_aux -> . exp_aux2
    (40) exp_aux2 -> . term PLUS exp_aux2
    (41) exp_aux2 -> . term MINUS exp_aux2
    (42) exp_aux2 -> . term
    (43) term -> . factor MULTIPLY term
    (44) term -> . factor DIVIDE term
    (45) term -> . factor
    (46) factor -> . LPAREN expresion RPAREN
    (47) factor -> . CTEINT
    (48) factor -> . CTEF
    (49) factor -> . ID

    LPAREN          shift and go to state 68
    CTEINT          shift and go to state 69
    CTEF            shift and go to state 70
    ID              shift and go to state 71

    expresion                      shift and go to state 79
    exp                            shift and go to state 63
    exp_aux                        shift and go to state 64
    exp_aux2                       shift and go to state 65
    term                           shift and go to state 66
    factor                         shift and go to state 67

state 59

    (56) call_module -> ID LPAREN . expresion RPAREN
    (57) call_module -> ID LPAREN . RPAREN
    (31) expresion -> . exp AND expresion
    (32) expresion -> . exp
    (33) exp -> . exp_aux OR exp
    (34) exp -> . exp_aux
    (35) exp_aux -> . exp_aux2 GREATERT exp_aux2
    (36) exp_aux -> . exp_aux2 LESST exp_aux2
    (37) exp_aux -> . exp_aux2 NOTEQUAL exp_aux2
    (38) exp_aux -> . exp_aux2 DBEQUALS exp_aux2
    (39) exp_aux -> . exp_aux2
    (40) exp_aux2 -> . term PLUS exp_aux2
    (41) exp_aux2 -> . term MINUS exp_aux2
    (42) exp_aux2 -> . term
    (43) term -> . factor MULTIPLY term
    (44) term -> . factor DIVIDE term
    (45) term -> . factor
    (46) factor -> . LPAREN expresion RPAREN
    (47) factor -> . CTEINT
    (48) factor -> . CTEF
    (49) factor -> . ID

    RPAREN          shift and go to state 81
    LPAREN          shift and go to state 68
    CTEINT          shift and go to state 69
    CTEF            shift and go to state 70
    ID              shift and go to state 71

    expresion                      shift and go to state 80
    exp                            shift and go to state 63
    exp_aux                        shift and go to state 64
    exp_aux2                       shift and go to state 65
    term                           shift and go to state 66
    factor                         shift and go to state 67

state 60

    (61) condicion -> IF LPAREN . expresion RPAREN bloque ELSE bloque
    (62) condicion -> IF LPAREN . expresion RPAREN bloque
    (31) expresion -> . exp AND expresion
    (32) expresion -> . exp
    (33) exp -> . exp_aux OR exp
    (34) exp -> . exp_aux
    (35) exp_aux -> . exp_aux2 GREATERT exp_aux2
    (36) exp_aux -> . exp_aux2 LESST exp_aux2
    (37) exp_aux -> . exp_aux2 NOTEQUAL exp_aux2
    (38) exp_aux -> . exp_aux2 DBEQUALS exp_aux2
    (39) exp_aux -> . exp_aux2
    (40) exp_aux2 -> . term PLUS exp_aux2
    (41) exp_aux2 -> . term MINUS exp_aux2
    (42) exp_aux2 -> . term
    (43) term -> . factor MULTIPLY term
    (44) term -> . factor DIVIDE term
    (45) term -> . factor
    (46) factor -> . LPAREN expresion RPAREN
    (47) factor -> . CTEINT
    (48) factor -> . CTEF
    (49) factor -> . ID

    LPAREN          shift and go to state 68
    CTEINT          shift and go to state 69
    CTEF            shift and go to state 70
    ID              shift and go to state 71

    expresion                      shift and go to state 82
    exp                            shift and go to state 63
    exp_aux                        shift and go to state 64
    exp_aux2                       shift and go to state 65
    term                           shift and go to state 66
    factor                         shift and go to state 67

state 61

    (63) escritura -> PRINT LPAREN . escritura_aux RPAREN
    (64) escritura_aux -> . expresion COMA escritura_aux
    (65) escritura_aux -> . CTESTRING COMA escritura_aux
    (66) escritura_aux -> . expresion
    (67) escritura_aux -> . CTESTRING
    (31) expresion -> . exp AND expresion
    (32) expresion -> . exp
    (33) exp -> . exp_aux OR exp
    (34) exp -> . exp_aux
    (35) exp_aux -> . exp_aux2 GREATERT exp_aux2
    (36) exp_aux -> . exp_aux2 LESST exp_aux2
    (37) exp_aux -> . exp_aux2 NOTEQUAL exp_aux2
    (38) exp_aux -> . exp_aux2 DBEQUALS exp_aux2
    (39) exp_aux -> . exp_aux2
    (40) exp_aux2 -> . term PLUS exp_aux2
    (41) exp_aux2 -> . term MINUS exp_aux2
    (42) exp_aux2 -> . term
    (43) term -> . factor MULTIPLY term
    (44) term -> . factor DIVIDE term
    (45) term -> . factor
    (46) factor -> . LPAREN expresion RPAREN
    (47) factor -> . CTEINT
    (48) factor -> . CTEF
    (49) factor -> . ID

    CTESTRING       shift and go to state 85
    LPAREN          shift and go to state 68
    CTEINT          shift and go to state 69
    CTEF            shift and go to state 70
    ID              shift and go to state 71

    escritura_aux                  shift and go to state 83
    expresion                      shift and go to state 84
    exp                            shift and go to state 63
    exp_aux                        shift and go to state 64
    exp_aux2                       shift and go to state 65
    term                           shift and go to state 66
    factor                         shift and go to state 67

state 62

    (58) return -> RETURN expresion .

    SEMICOLON       reduce using rule 58 (return -> RETURN expresion .)


state 63

    (31) expresion -> exp . AND expresion
    (32) expresion -> exp .

    AND             shift and go to state 86
    SEMICOLON       reduce using rule 32 (expresion -> exp .)
    TO              reduce using rule 32 (expresion -> exp .)
    RPAREN          reduce using rule 32 (expresion -> exp .)
    COMA            reduce using rule 32 (expresion -> exp .)


state 64

    (33) exp -> exp_aux . OR exp
    (34) exp -> exp_aux .

    OR              shift and go to state 87
    AND             reduce using rule 34 (exp -> exp_aux .)
    SEMICOLON       reduce using rule 34 (exp -> exp_aux .)
    TO              reduce using rule 34 (exp -> exp_aux .)
    RPAREN          reduce using rule 34 (exp -> exp_aux .)
    COMA            reduce using rule 34 (exp -> exp_aux .)


state 65

    (35) exp_aux -> exp_aux2 . GREATERT exp_aux2
    (36) exp_aux -> exp_aux2 . LESST exp_aux2
    (37) exp_aux -> exp_aux2 . NOTEQUAL exp_aux2
    (38) exp_aux -> exp_aux2 . DBEQUALS exp_aux2
    (39) exp_aux -> exp_aux2 .

    GREATERT        shift and go to state 88
    LESST           shift and go to state 89
    NOTEQUAL        shift and go to state 90
    DBEQUALS        shift and go to state 91
    OR              reduce using rule 39 (exp_aux -> exp_aux2 .)
    AND             reduce using rule 39 (exp_aux -> exp_aux2 .)
    SEMICOLON       reduce using rule 39 (exp_aux -> exp_aux2 .)
    TO              reduce using rule 39 (exp_aux -> exp_aux2 .)
    RPAREN          reduce using rule 39 (exp_aux -> exp_aux2 .)
    COMA            reduce using rule 39 (exp_aux -> exp_aux2 .)


state 66

    (40) exp_aux2 -> term . PLUS exp_aux2
    (41) exp_aux2 -> term . MINUS exp_aux2
    (42) exp_aux2 -> term .

    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    GREATERT        reduce using rule 42 (exp_aux2 -> term .)
    LESST           reduce using rule 42 (exp_aux2 -> term .)
    NOTEQUAL        reduce using rule 42 (exp_aux2 -> term .)
    DBEQUALS        reduce using rule 42 (exp_aux2 -> term .)
    OR              reduce using rule 42 (exp_aux2 -> term .)
    AND             reduce using rule 42 (exp_aux2 -> term .)
    SEMICOLON       reduce using rule 42 (exp_aux2 -> term .)
    TO              reduce using rule 42 (exp_aux2 -> term .)
    RPAREN          reduce using rule 42 (exp_aux2 -> term .)
    COMA            reduce using rule 42 (exp_aux2 -> term .)


state 67

    (43) term -> factor . MULTIPLY term
    (44) term -> factor . DIVIDE term
    (45) term -> factor .

    MULTIPLY        shift and go to state 94
    DIVIDE          shift and go to state 95
    PLUS            reduce using rule 45 (term -> factor .)
    MINUS           reduce using rule 45 (term -> factor .)
    GREATERT        reduce using rule 45 (term -> factor .)
    LESST           reduce using rule 45 (term -> factor .)
    NOTEQUAL        reduce using rule 45 (term -> factor .)
    DBEQUALS        reduce using rule 45 (term -> factor .)
    OR              reduce using rule 45 (term -> factor .)
    AND             reduce using rule 45 (term -> factor .)
    SEMICOLON       reduce using rule 45 (term -> factor .)
    TO              reduce using rule 45 (term -> factor .)
    RPAREN          reduce using rule 45 (term -> factor .)
    COMA            reduce using rule 45 (term -> factor .)


state 68

    (46) factor -> LPAREN . expresion RPAREN
    (31) expresion -> . exp AND expresion
    (32) expresion -> . exp
    (33) exp -> . exp_aux OR exp
    (34) exp -> . exp_aux
    (35) exp_aux -> . exp_aux2 GREATERT exp_aux2
    (36) exp_aux -> . exp_aux2 LESST exp_aux2
    (37) exp_aux -> . exp_aux2 NOTEQUAL exp_aux2
    (38) exp_aux -> . exp_aux2 DBEQUALS exp_aux2
    (39) exp_aux -> . exp_aux2
    (40) exp_aux2 -> . term PLUS exp_aux2
    (41) exp_aux2 -> . term MINUS exp_aux2
    (42) exp_aux2 -> . term
    (43) term -> . factor MULTIPLY term
    (44) term -> . factor DIVIDE term
    (45) term -> . factor
    (46) factor -> . LPAREN expresion RPAREN
    (47) factor -> . CTEINT
    (48) factor -> . CTEF
    (49) factor -> . ID

    LPAREN          shift and go to state 68
    CTEINT          shift and go to state 69
    CTEF            shift and go to state 70
    ID              shift and go to state 71

    expresion                      shift and go to state 96
    exp                            shift and go to state 63
    exp_aux                        shift and go to state 64
    exp_aux2                       shift and go to state 65
    term                           shift and go to state 66
    factor                         shift and go to state 67

state 69

    (47) factor -> CTEINT .

    MULTIPLY        reduce using rule 47 (factor -> CTEINT .)
    DIVIDE          reduce using rule 47 (factor -> CTEINT .)
    PLUS            reduce using rule 47 (factor -> CTEINT .)
    MINUS           reduce using rule 47 (factor -> CTEINT .)
    GREATERT        reduce using rule 47 (factor -> CTEINT .)
    LESST           reduce using rule 47 (factor -> CTEINT .)
    NOTEQUAL        reduce using rule 47 (factor -> CTEINT .)
    DBEQUALS        reduce using rule 47 (factor -> CTEINT .)
    OR              reduce using rule 47 (factor -> CTEINT .)
    AND             reduce using rule 47 (factor -> CTEINT .)
    SEMICOLON       reduce using rule 47 (factor -> CTEINT .)
    TO              reduce using rule 47 (factor -> CTEINT .)
    RPAREN          reduce using rule 47 (factor -> CTEINT .)
    COMA            reduce using rule 47 (factor -> CTEINT .)


state 70

    (48) factor -> CTEF .

    MULTIPLY        reduce using rule 48 (factor -> CTEF .)
    DIVIDE          reduce using rule 48 (factor -> CTEF .)
    PLUS            reduce using rule 48 (factor -> CTEF .)
    MINUS           reduce using rule 48 (factor -> CTEF .)
    GREATERT        reduce using rule 48 (factor -> CTEF .)
    LESST           reduce using rule 48 (factor -> CTEF .)
    NOTEQUAL        reduce using rule 48 (factor -> CTEF .)
    DBEQUALS        reduce using rule 48 (factor -> CTEF .)
    OR              reduce using rule 48 (factor -> CTEF .)
    AND             reduce using rule 48 (factor -> CTEF .)
    SEMICOLON       reduce using rule 48 (factor -> CTEF .)
    TO              reduce using rule 48 (factor -> CTEF .)
    RPAREN          reduce using rule 48 (factor -> CTEF .)
    COMA            reduce using rule 48 (factor -> CTEF .)


state 71

    (49) factor -> ID .

    MULTIPLY        reduce using rule 49 (factor -> ID .)
    DIVIDE          reduce using rule 49 (factor -> ID .)
    PLUS            reduce using rule 49 (factor -> ID .)
    MINUS           reduce using rule 49 (factor -> ID .)
    GREATERT        reduce using rule 49 (factor -> ID .)
    LESST           reduce using rule 49 (factor -> ID .)
    NOTEQUAL        reduce using rule 49 (factor -> ID .)
    DBEQUALS        reduce using rule 49 (factor -> ID .)
    OR              reduce using rule 49 (factor -> ID .)
    AND             reduce using rule 49 (factor -> ID .)
    SEMICOLON       reduce using rule 49 (factor -> ID .)
    TO              reduce using rule 49 (factor -> ID .)
    RPAREN          reduce using rule 49 (factor -> ID .)
    COMA            reduce using rule 49 (factor -> ID .)


state 72

    (59) for -> FOR asignacion . TO CTEINT LBRACKET estatuto RBRACKET

    TO              shift and go to state 97


state 73

    (30) asignacion -> ID . EQUAL expresion

    EQUAL           shift and go to state 58


state 74

    (60) while -> WHILE LPAREN . expresion RPAREN LBRACKET estatuto RBRACKET
    (31) expresion -> . exp AND expresion
    (32) expresion -> . exp
    (33) exp -> . exp_aux OR exp
    (34) exp -> . exp_aux
    (35) exp_aux -> . exp_aux2 GREATERT exp_aux2
    (36) exp_aux -> . exp_aux2 LESST exp_aux2
    (37) exp_aux -> . exp_aux2 NOTEQUAL exp_aux2
    (38) exp_aux -> . exp_aux2 DBEQUALS exp_aux2
    (39) exp_aux -> . exp_aux2
    (40) exp_aux2 -> . term PLUS exp_aux2
    (41) exp_aux2 -> . term MINUS exp_aux2
    (42) exp_aux2 -> . term
    (43) term -> . factor MULTIPLY term
    (44) term -> . factor DIVIDE term
    (45) term -> . factor
    (46) factor -> . LPAREN expresion RPAREN
    (47) factor -> . CTEINT
    (48) factor -> . CTEF
    (49) factor -> . ID

    LPAREN          shift and go to state 68
    CTEINT          shift and go to state 69
    CTEF            shift and go to state 70
    ID              shift and go to state 71

    expresion                      shift and go to state 98
    exp                            shift and go to state 63
    exp_aux                        shift and go to state 64
    exp_aux2                       shift and go to state 65
    term                           shift and go to state 66
    factor                         shift and go to state 67

state 75

    (7) vars_aux -> ID n_seen_var_name COLON tipo . n_set_var_type SEMICOLON vars_aux
    (8) vars_aux -> ID n_seen_var_name COLON tipo . n_set_var_type SEMICOLON
    (71) n_set_var_type -> .

    SEMICOLON       reduce using rule 71 (n_set_var_type -> .)

    n_set_var_type                 shift and go to state 99

state 76

    (50) module -> MODULE VOID n_seen_type ID n_seen_func_name . params bloque_module module
    (52) module -> MODULE VOID n_seen_type ID n_seen_func_name . params bloque_module
    (54) params -> . LPAREN vars_func RPAREN
    (55) params -> . LPAREN RPAREN

    LPAREN          shift and go to state 78

    params                         shift and go to state 100

state 77

    (51) module -> MODULE tipo ID n_seen_func_name params . bloque_module module
    (53) module -> MODULE tipo ID n_seen_func_name params . bloque_module
    (13) bloque_module -> . LBRACKET estatuto_module_aux RBRACKET
    (14) bloque_module -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 21

    bloque_module                  shift and go to state 101

state 78

    (54) params -> LPAREN . vars_func RPAREN
    (55) params -> LPAREN . RPAREN
    (9) vars_func -> . ID n_seen_var_name COLON tipo n_set_var_type COMA vars_aux
    (10) vars_func -> . ID n_seen_var_name COLON tipo n_set_var_type

    RPAREN          shift and go to state 103
    ID              shift and go to state 104

    vars_func                      shift and go to state 102

state 79

    (30) asignacion -> ID EQUAL expresion .

    SEMICOLON       reduce using rule 30 (asignacion -> ID EQUAL expresion .)
    TO              reduce using rule 30 (asignacion -> ID EQUAL expresion .)


state 80

    (56) call_module -> ID LPAREN expresion . RPAREN

    RPAREN          shift and go to state 105


state 81

    (57) call_module -> ID LPAREN RPAREN .

    SEMICOLON       reduce using rule 57 (call_module -> ID LPAREN RPAREN .)


state 82

    (61) condicion -> IF LPAREN expresion . RPAREN bloque ELSE bloque
    (62) condicion -> IF LPAREN expresion . RPAREN bloque

    RPAREN          shift and go to state 106


state 83

    (63) escritura -> PRINT LPAREN escritura_aux . RPAREN

    RPAREN          shift and go to state 107


state 84

    (64) escritura_aux -> expresion . COMA escritura_aux
    (66) escritura_aux -> expresion .

    COMA            shift and go to state 108
    RPAREN          reduce using rule 66 (escritura_aux -> expresion .)


state 85

    (65) escritura_aux -> CTESTRING . COMA escritura_aux
    (67) escritura_aux -> CTESTRING .

    COMA            shift and go to state 109
    RPAREN          reduce using rule 67 (escritura_aux -> CTESTRING .)


state 86

    (31) expresion -> exp AND . expresion
    (31) expresion -> . exp AND expresion
    (32) expresion -> . exp
    (33) exp -> . exp_aux OR exp
    (34) exp -> . exp_aux
    (35) exp_aux -> . exp_aux2 GREATERT exp_aux2
    (36) exp_aux -> . exp_aux2 LESST exp_aux2
    (37) exp_aux -> . exp_aux2 NOTEQUAL exp_aux2
    (38) exp_aux -> . exp_aux2 DBEQUALS exp_aux2
    (39) exp_aux -> . exp_aux2
    (40) exp_aux2 -> . term PLUS exp_aux2
    (41) exp_aux2 -> . term MINUS exp_aux2
    (42) exp_aux2 -> . term
    (43) term -> . factor MULTIPLY term
    (44) term -> . factor DIVIDE term
    (45) term -> . factor
    (46) factor -> . LPAREN expresion RPAREN
    (47) factor -> . CTEINT
    (48) factor -> . CTEF
    (49) factor -> . ID

    LPAREN          shift and go to state 68
    CTEINT          shift and go to state 69
    CTEF            shift and go to state 70
    ID              shift and go to state 71

    exp                            shift and go to state 63
    expresion                      shift and go to state 110
    exp_aux                        shift and go to state 64
    exp_aux2                       shift and go to state 65
    term                           shift and go to state 66
    factor                         shift and go to state 67

state 87

    (33) exp -> exp_aux OR . exp
    (33) exp -> . exp_aux OR exp
    (34) exp -> . exp_aux
    (35) exp_aux -> . exp_aux2 GREATERT exp_aux2
    (36) exp_aux -> . exp_aux2 LESST exp_aux2
    (37) exp_aux -> . exp_aux2 NOTEQUAL exp_aux2
    (38) exp_aux -> . exp_aux2 DBEQUALS exp_aux2
    (39) exp_aux -> . exp_aux2
    (40) exp_aux2 -> . term PLUS exp_aux2
    (41) exp_aux2 -> . term MINUS exp_aux2
    (42) exp_aux2 -> . term
    (43) term -> . factor MULTIPLY term
    (44) term -> . factor DIVIDE term
    (45) term -> . factor
    (46) factor -> . LPAREN expresion RPAREN
    (47) factor -> . CTEINT
    (48) factor -> . CTEF
    (49) factor -> . ID

    LPAREN          shift and go to state 68
    CTEINT          shift and go to state 69
    CTEF            shift and go to state 70
    ID              shift and go to state 71

    exp_aux                        shift and go to state 64
    exp                            shift and go to state 111
    exp_aux2                       shift and go to state 65
    term                           shift and go to state 66
    factor                         shift and go to state 67

state 88

    (35) exp_aux -> exp_aux2 GREATERT . exp_aux2
    (40) exp_aux2 -> . term PLUS exp_aux2
    (41) exp_aux2 -> . term MINUS exp_aux2
    (42) exp_aux2 -> . term
    (43) term -> . factor MULTIPLY term
    (44) term -> . factor DIVIDE term
    (45) term -> . factor
    (46) factor -> . LPAREN expresion RPAREN
    (47) factor -> . CTEINT
    (48) factor -> . CTEF
    (49) factor -> . ID

    LPAREN          shift and go to state 68
    CTEINT          shift and go to state 69
    CTEF            shift and go to state 70
    ID              shift and go to state 71

    exp_aux2                       shift and go to state 112
    term                           shift and go to state 66
    factor                         shift and go to state 67

state 89

    (36) exp_aux -> exp_aux2 LESST . exp_aux2
    (40) exp_aux2 -> . term PLUS exp_aux2
    (41) exp_aux2 -> . term MINUS exp_aux2
    (42) exp_aux2 -> . term
    (43) term -> . factor MULTIPLY term
    (44) term -> . factor DIVIDE term
    (45) term -> . factor
    (46) factor -> . LPAREN expresion RPAREN
    (47) factor -> . CTEINT
    (48) factor -> . CTEF
    (49) factor -> . ID

    LPAREN          shift and go to state 68
    CTEINT          shift and go to state 69
    CTEF            shift and go to state 70
    ID              shift and go to state 71

    exp_aux2                       shift and go to state 113
    term                           shift and go to state 66
    factor                         shift and go to state 67

state 90

    (37) exp_aux -> exp_aux2 NOTEQUAL . exp_aux2
    (40) exp_aux2 -> . term PLUS exp_aux2
    (41) exp_aux2 -> . term MINUS exp_aux2
    (42) exp_aux2 -> . term
    (43) term -> . factor MULTIPLY term
    (44) term -> . factor DIVIDE term
    (45) term -> . factor
    (46) factor -> . LPAREN expresion RPAREN
    (47) factor -> . CTEINT
    (48) factor -> . CTEF
    (49) factor -> . ID

    LPAREN          shift and go to state 68
    CTEINT          shift and go to state 69
    CTEF            shift and go to state 70
    ID              shift and go to state 71

    exp_aux2                       shift and go to state 114
    term                           shift and go to state 66
    factor                         shift and go to state 67

state 91

    (38) exp_aux -> exp_aux2 DBEQUALS . exp_aux2
    (40) exp_aux2 -> . term PLUS exp_aux2
    (41) exp_aux2 -> . term MINUS exp_aux2
    (42) exp_aux2 -> . term
    (43) term -> . factor MULTIPLY term
    (44) term -> . factor DIVIDE term
    (45) term -> . factor
    (46) factor -> . LPAREN expresion RPAREN
    (47) factor -> . CTEINT
    (48) factor -> . CTEF
    (49) factor -> . ID

    LPAREN          shift and go to state 68
    CTEINT          shift and go to state 69
    CTEF            shift and go to state 70
    ID              shift and go to state 71

    exp_aux2                       shift and go to state 115
    term                           shift and go to state 66
    factor                         shift and go to state 67

state 92

    (40) exp_aux2 -> term PLUS . exp_aux2
    (40) exp_aux2 -> . term PLUS exp_aux2
    (41) exp_aux2 -> . term MINUS exp_aux2
    (42) exp_aux2 -> . term
    (43) term -> . factor MULTIPLY term
    (44) term -> . factor DIVIDE term
    (45) term -> . factor
    (46) factor -> . LPAREN expresion RPAREN
    (47) factor -> . CTEINT
    (48) factor -> . CTEF
    (49) factor -> . ID

    LPAREN          shift and go to state 68
    CTEINT          shift and go to state 69
    CTEF            shift and go to state 70
    ID              shift and go to state 71

    term                           shift and go to state 66
    exp_aux2                       shift and go to state 116
    factor                         shift and go to state 67

state 93

    (41) exp_aux2 -> term MINUS . exp_aux2
    (40) exp_aux2 -> . term PLUS exp_aux2
    (41) exp_aux2 -> . term MINUS exp_aux2
    (42) exp_aux2 -> . term
    (43) term -> . factor MULTIPLY term
    (44) term -> . factor DIVIDE term
    (45) term -> . factor
    (46) factor -> . LPAREN expresion RPAREN
    (47) factor -> . CTEINT
    (48) factor -> . CTEF
    (49) factor -> . ID

    LPAREN          shift and go to state 68
    CTEINT          shift and go to state 69
    CTEF            shift and go to state 70
    ID              shift and go to state 71

    term                           shift and go to state 66
    exp_aux2                       shift and go to state 117
    factor                         shift and go to state 67

state 94

    (43) term -> factor MULTIPLY . term
    (43) term -> . factor MULTIPLY term
    (44) term -> . factor DIVIDE term
    (45) term -> . factor
    (46) factor -> . LPAREN expresion RPAREN
    (47) factor -> . CTEINT
    (48) factor -> . CTEF
    (49) factor -> . ID

    LPAREN          shift and go to state 68
    CTEINT          shift and go to state 69
    CTEF            shift and go to state 70
    ID              shift and go to state 71

    factor                         shift and go to state 67
    term                           shift and go to state 118

state 95

    (44) term -> factor DIVIDE . term
    (43) term -> . factor MULTIPLY term
    (44) term -> . factor DIVIDE term
    (45) term -> . factor
    (46) factor -> . LPAREN expresion RPAREN
    (47) factor -> . CTEINT
    (48) factor -> . CTEF
    (49) factor -> . ID

    LPAREN          shift and go to state 68
    CTEINT          shift and go to state 69
    CTEF            shift and go to state 70
    ID              shift and go to state 71

    factor                         shift and go to state 67
    term                           shift and go to state 119

state 96

    (46) factor -> LPAREN expresion . RPAREN

    RPAREN          shift and go to state 120


state 97

    (59) for -> FOR asignacion TO . CTEINT LBRACKET estatuto RBRACKET

    CTEINT          shift and go to state 121


state 98

    (60) while -> WHILE LPAREN expresion . RPAREN LBRACKET estatuto RBRACKET

    RPAREN          shift and go to state 122


state 99

    (7) vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type . SEMICOLON vars_aux
    (8) vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type . SEMICOLON

    SEMICOLON       shift and go to state 123


state 100

    (50) module -> MODULE VOID n_seen_type ID n_seen_func_name params . bloque_module module
    (52) module -> MODULE VOID n_seen_type ID n_seen_func_name params . bloque_module
    (13) bloque_module -> . LBRACKET estatuto_module_aux RBRACKET
    (14) bloque_module -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 21

    bloque_module                  shift and go to state 124

state 101

    (51) module -> MODULE tipo ID n_seen_func_name params bloque_module . module
    (53) module -> MODULE tipo ID n_seen_func_name params bloque_module .
    (50) module -> . MODULE VOID n_seen_type ID n_seen_func_name params bloque_module module
    (51) module -> . MODULE tipo ID n_seen_func_name params bloque_module module
    (52) module -> . MODULE VOID n_seen_type ID n_seen_func_name params bloque_module
    (53) module -> . MODULE tipo ID n_seen_func_name params bloque_module

    MAIN            reduce using rule 53 (module -> MODULE tipo ID n_seen_func_name params bloque_module .)
    MODULE          shift and go to state 9

    module                         shift and go to state 125

state 102

    (54) params -> LPAREN vars_func . RPAREN

    RPAREN          shift and go to state 126


state 103

    (55) params -> LPAREN RPAREN .

    LBRACKET        reduce using rule 55 (params -> LPAREN RPAREN .)


state 104

    (9) vars_func -> ID . n_seen_var_name COLON tipo n_set_var_type COMA vars_aux
    (10) vars_func -> ID . n_seen_var_name COLON tipo n_set_var_type
    (69) n_seen_var_name -> .

    COLON           reduce using rule 69 (n_seen_var_name -> .)

    n_seen_var_name                shift and go to state 127

state 105

    (56) call_module -> ID LPAREN expresion RPAREN .

    SEMICOLON       reduce using rule 56 (call_module -> ID LPAREN expresion RPAREN .)


state 106

    (61) condicion -> IF LPAREN expresion RPAREN . bloque ELSE bloque
    (62) condicion -> IF LPAREN expresion RPAREN . bloque
    (19) bloque -> . LBRACKET estatuto_aux RBRACKET
    (20) bloque -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 129

    bloque                         shift and go to state 128

state 107

    (63) escritura -> PRINT LPAREN escritura_aux RPAREN .

    SEMICOLON       reduce using rule 63 (escritura -> PRINT LPAREN escritura_aux RPAREN .)


state 108

    (64) escritura_aux -> expresion COMA . escritura_aux
    (64) escritura_aux -> . expresion COMA escritura_aux
    (65) escritura_aux -> . CTESTRING COMA escritura_aux
    (66) escritura_aux -> . expresion
    (67) escritura_aux -> . CTESTRING
    (31) expresion -> . exp AND expresion
    (32) expresion -> . exp
    (33) exp -> . exp_aux OR exp
    (34) exp -> . exp_aux
    (35) exp_aux -> . exp_aux2 GREATERT exp_aux2
    (36) exp_aux -> . exp_aux2 LESST exp_aux2
    (37) exp_aux -> . exp_aux2 NOTEQUAL exp_aux2
    (38) exp_aux -> . exp_aux2 DBEQUALS exp_aux2
    (39) exp_aux -> . exp_aux2
    (40) exp_aux2 -> . term PLUS exp_aux2
    (41) exp_aux2 -> . term MINUS exp_aux2
    (42) exp_aux2 -> . term
    (43) term -> . factor MULTIPLY term
    (44) term -> . factor DIVIDE term
    (45) term -> . factor
    (46) factor -> . LPAREN expresion RPAREN
    (47) factor -> . CTEINT
    (48) factor -> . CTEF
    (49) factor -> . ID

    CTESTRING       shift and go to state 85
    LPAREN          shift and go to state 68
    CTEINT          shift and go to state 69
    CTEF            shift and go to state 70
    ID              shift and go to state 71

    expresion                      shift and go to state 84
    escritura_aux                  shift and go to state 130
    exp                            shift and go to state 63
    exp_aux                        shift and go to state 64
    exp_aux2                       shift and go to state 65
    term                           shift and go to state 66
    factor                         shift and go to state 67

state 109

    (65) escritura_aux -> CTESTRING COMA . escritura_aux
    (64) escritura_aux -> . expresion COMA escritura_aux
    (65) escritura_aux -> . CTESTRING COMA escritura_aux
    (66) escritura_aux -> . expresion
    (67) escritura_aux -> . CTESTRING
    (31) expresion -> . exp AND expresion
    (32) expresion -> . exp
    (33) exp -> . exp_aux OR exp
    (34) exp -> . exp_aux
    (35) exp_aux -> . exp_aux2 GREATERT exp_aux2
    (36) exp_aux -> . exp_aux2 LESST exp_aux2
    (37) exp_aux -> . exp_aux2 NOTEQUAL exp_aux2
    (38) exp_aux -> . exp_aux2 DBEQUALS exp_aux2
    (39) exp_aux -> . exp_aux2
    (40) exp_aux2 -> . term PLUS exp_aux2
    (41) exp_aux2 -> . term MINUS exp_aux2
    (42) exp_aux2 -> . term
    (43) term -> . factor MULTIPLY term
    (44) term -> . factor DIVIDE term
    (45) term -> . factor
    (46) factor -> . LPAREN expresion RPAREN
    (47) factor -> . CTEINT
    (48) factor -> . CTEF
    (49) factor -> . ID

    CTESTRING       shift and go to state 85
    LPAREN          shift and go to state 68
    CTEINT          shift and go to state 69
    CTEF            shift and go to state 70
    ID              shift and go to state 71

    escritura_aux                  shift and go to state 131
    expresion                      shift and go to state 84
    exp                            shift and go to state 63
    exp_aux                        shift and go to state 64
    exp_aux2                       shift and go to state 65
    term                           shift and go to state 66
    factor                         shift and go to state 67

state 110

    (31) expresion -> exp AND expresion .

    SEMICOLON       reduce using rule 31 (expresion -> exp AND expresion .)
    TO              reduce using rule 31 (expresion -> exp AND expresion .)
    RPAREN          reduce using rule 31 (expresion -> exp AND expresion .)
    COMA            reduce using rule 31 (expresion -> exp AND expresion .)


state 111

    (33) exp -> exp_aux OR exp .

    AND             reduce using rule 33 (exp -> exp_aux OR exp .)
    SEMICOLON       reduce using rule 33 (exp -> exp_aux OR exp .)
    TO              reduce using rule 33 (exp -> exp_aux OR exp .)
    RPAREN          reduce using rule 33 (exp -> exp_aux OR exp .)
    COMA            reduce using rule 33 (exp -> exp_aux OR exp .)


state 112

    (35) exp_aux -> exp_aux2 GREATERT exp_aux2 .

    OR              reduce using rule 35 (exp_aux -> exp_aux2 GREATERT exp_aux2 .)
    AND             reduce using rule 35 (exp_aux -> exp_aux2 GREATERT exp_aux2 .)
    SEMICOLON       reduce using rule 35 (exp_aux -> exp_aux2 GREATERT exp_aux2 .)
    TO              reduce using rule 35 (exp_aux -> exp_aux2 GREATERT exp_aux2 .)
    RPAREN          reduce using rule 35 (exp_aux -> exp_aux2 GREATERT exp_aux2 .)
    COMA            reduce using rule 35 (exp_aux -> exp_aux2 GREATERT exp_aux2 .)


state 113

    (36) exp_aux -> exp_aux2 LESST exp_aux2 .

    OR              reduce using rule 36 (exp_aux -> exp_aux2 LESST exp_aux2 .)
    AND             reduce using rule 36 (exp_aux -> exp_aux2 LESST exp_aux2 .)
    SEMICOLON       reduce using rule 36 (exp_aux -> exp_aux2 LESST exp_aux2 .)
    TO              reduce using rule 36 (exp_aux -> exp_aux2 LESST exp_aux2 .)
    RPAREN          reduce using rule 36 (exp_aux -> exp_aux2 LESST exp_aux2 .)
    COMA            reduce using rule 36 (exp_aux -> exp_aux2 LESST exp_aux2 .)


state 114

    (37) exp_aux -> exp_aux2 NOTEQUAL exp_aux2 .

    OR              reduce using rule 37 (exp_aux -> exp_aux2 NOTEQUAL exp_aux2 .)
    AND             reduce using rule 37 (exp_aux -> exp_aux2 NOTEQUAL exp_aux2 .)
    SEMICOLON       reduce using rule 37 (exp_aux -> exp_aux2 NOTEQUAL exp_aux2 .)
    TO              reduce using rule 37 (exp_aux -> exp_aux2 NOTEQUAL exp_aux2 .)
    RPAREN          reduce using rule 37 (exp_aux -> exp_aux2 NOTEQUAL exp_aux2 .)
    COMA            reduce using rule 37 (exp_aux -> exp_aux2 NOTEQUAL exp_aux2 .)


state 115

    (38) exp_aux -> exp_aux2 DBEQUALS exp_aux2 .

    OR              reduce using rule 38 (exp_aux -> exp_aux2 DBEQUALS exp_aux2 .)
    AND             reduce using rule 38 (exp_aux -> exp_aux2 DBEQUALS exp_aux2 .)
    SEMICOLON       reduce using rule 38 (exp_aux -> exp_aux2 DBEQUALS exp_aux2 .)
    TO              reduce using rule 38 (exp_aux -> exp_aux2 DBEQUALS exp_aux2 .)
    RPAREN          reduce using rule 38 (exp_aux -> exp_aux2 DBEQUALS exp_aux2 .)
    COMA            reduce using rule 38 (exp_aux -> exp_aux2 DBEQUALS exp_aux2 .)


state 116

    (40) exp_aux2 -> term PLUS exp_aux2 .

    GREATERT        reduce using rule 40 (exp_aux2 -> term PLUS exp_aux2 .)
    LESST           reduce using rule 40 (exp_aux2 -> term PLUS exp_aux2 .)
    NOTEQUAL        reduce using rule 40 (exp_aux2 -> term PLUS exp_aux2 .)
    DBEQUALS        reduce using rule 40 (exp_aux2 -> term PLUS exp_aux2 .)
    OR              reduce using rule 40 (exp_aux2 -> term PLUS exp_aux2 .)
    AND             reduce using rule 40 (exp_aux2 -> term PLUS exp_aux2 .)
    SEMICOLON       reduce using rule 40 (exp_aux2 -> term PLUS exp_aux2 .)
    TO              reduce using rule 40 (exp_aux2 -> term PLUS exp_aux2 .)
    RPAREN          reduce using rule 40 (exp_aux2 -> term PLUS exp_aux2 .)
    COMA            reduce using rule 40 (exp_aux2 -> term PLUS exp_aux2 .)


state 117

    (41) exp_aux2 -> term MINUS exp_aux2 .

    GREATERT        reduce using rule 41 (exp_aux2 -> term MINUS exp_aux2 .)
    LESST           reduce using rule 41 (exp_aux2 -> term MINUS exp_aux2 .)
    NOTEQUAL        reduce using rule 41 (exp_aux2 -> term MINUS exp_aux2 .)
    DBEQUALS        reduce using rule 41 (exp_aux2 -> term MINUS exp_aux2 .)
    OR              reduce using rule 41 (exp_aux2 -> term MINUS exp_aux2 .)
    AND             reduce using rule 41 (exp_aux2 -> term MINUS exp_aux2 .)
    SEMICOLON       reduce using rule 41 (exp_aux2 -> term MINUS exp_aux2 .)
    TO              reduce using rule 41 (exp_aux2 -> term MINUS exp_aux2 .)
    RPAREN          reduce using rule 41 (exp_aux2 -> term MINUS exp_aux2 .)
    COMA            reduce using rule 41 (exp_aux2 -> term MINUS exp_aux2 .)


state 118

    (43) term -> factor MULTIPLY term .

    PLUS            reduce using rule 43 (term -> factor MULTIPLY term .)
    MINUS           reduce using rule 43 (term -> factor MULTIPLY term .)
    GREATERT        reduce using rule 43 (term -> factor MULTIPLY term .)
    LESST           reduce using rule 43 (term -> factor MULTIPLY term .)
    NOTEQUAL        reduce using rule 43 (term -> factor MULTIPLY term .)
    DBEQUALS        reduce using rule 43 (term -> factor MULTIPLY term .)
    OR              reduce using rule 43 (term -> factor MULTIPLY term .)
    AND             reduce using rule 43 (term -> factor MULTIPLY term .)
    SEMICOLON       reduce using rule 43 (term -> factor MULTIPLY term .)
    TO              reduce using rule 43 (term -> factor MULTIPLY term .)
    RPAREN          reduce using rule 43 (term -> factor MULTIPLY term .)
    COMA            reduce using rule 43 (term -> factor MULTIPLY term .)


state 119

    (44) term -> factor DIVIDE term .

    PLUS            reduce using rule 44 (term -> factor DIVIDE term .)
    MINUS           reduce using rule 44 (term -> factor DIVIDE term .)
    GREATERT        reduce using rule 44 (term -> factor DIVIDE term .)
    LESST           reduce using rule 44 (term -> factor DIVIDE term .)
    NOTEQUAL        reduce using rule 44 (term -> factor DIVIDE term .)
    DBEQUALS        reduce using rule 44 (term -> factor DIVIDE term .)
    OR              reduce using rule 44 (term -> factor DIVIDE term .)
    AND             reduce using rule 44 (term -> factor DIVIDE term .)
    SEMICOLON       reduce using rule 44 (term -> factor DIVIDE term .)
    TO              reduce using rule 44 (term -> factor DIVIDE term .)
    RPAREN          reduce using rule 44 (term -> factor DIVIDE term .)
    COMA            reduce using rule 44 (term -> factor DIVIDE term .)


state 120

    (46) factor -> LPAREN expresion RPAREN .

    MULTIPLY        reduce using rule 46 (factor -> LPAREN expresion RPAREN .)
    DIVIDE          reduce using rule 46 (factor -> LPAREN expresion RPAREN .)
    PLUS            reduce using rule 46 (factor -> LPAREN expresion RPAREN .)
    MINUS           reduce using rule 46 (factor -> LPAREN expresion RPAREN .)
    GREATERT        reduce using rule 46 (factor -> LPAREN expresion RPAREN .)
    LESST           reduce using rule 46 (factor -> LPAREN expresion RPAREN .)
    NOTEQUAL        reduce using rule 46 (factor -> LPAREN expresion RPAREN .)
    DBEQUALS        reduce using rule 46 (factor -> LPAREN expresion RPAREN .)
    OR              reduce using rule 46 (factor -> LPAREN expresion RPAREN .)
    AND             reduce using rule 46 (factor -> LPAREN expresion RPAREN .)
    SEMICOLON       reduce using rule 46 (factor -> LPAREN expresion RPAREN .)
    TO              reduce using rule 46 (factor -> LPAREN expresion RPAREN .)
    RPAREN          reduce using rule 46 (factor -> LPAREN expresion RPAREN .)
    COMA            reduce using rule 46 (factor -> LPAREN expresion RPAREN .)


state 121

    (59) for -> FOR asignacion TO CTEINT . LBRACKET estatuto RBRACKET

    LBRACKET        shift and go to state 132


state 122

    (60) while -> WHILE LPAREN expresion RPAREN . LBRACKET estatuto RBRACKET

    LBRACKET        shift and go to state 133


state 123

    (7) vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON . vars_aux
    (8) vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON .
    (7) vars_aux -> . ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux
    (8) vars_aux -> . ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON

  ! shift/reduce conflict for ID resolved as shift
    MODULE          reduce using rule 8 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON .)
    MAIN            reduce using rule 8 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON .)
    VAR             reduce using rule 8 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON .)
    IF              reduce using rule 8 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON .)
    PRINT           reduce using rule 8 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON .)
    RETURN          reduce using rule 8 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON .)
    FOR             reduce using rule 8 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON .)
    WHILE           reduce using rule 8 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON .)
    RBRACKET        reduce using rule 8 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON .)
    RPAREN          reduce using rule 8 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON .)
    ID              shift and go to state 15

  ! ID              [ reduce using rule 8 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON .) ]

    vars_aux                       shift and go to state 134

state 124

    (50) module -> MODULE VOID n_seen_type ID n_seen_func_name params bloque_module . module
    (52) module -> MODULE VOID n_seen_type ID n_seen_func_name params bloque_module .
    (50) module -> . MODULE VOID n_seen_type ID n_seen_func_name params bloque_module module
    (51) module -> . MODULE tipo ID n_seen_func_name params bloque_module module
    (52) module -> . MODULE VOID n_seen_type ID n_seen_func_name params bloque_module
    (53) module -> . MODULE tipo ID n_seen_func_name params bloque_module

    MAIN            reduce using rule 52 (module -> MODULE VOID n_seen_type ID n_seen_func_name params bloque_module .)
    MODULE          shift and go to state 9

    module                         shift and go to state 135

state 125

    (51) module -> MODULE tipo ID n_seen_func_name params bloque_module module .

    MAIN            reduce using rule 51 (module -> MODULE tipo ID n_seen_func_name params bloque_module module .)


state 126

    (54) params -> LPAREN vars_func RPAREN .

    LBRACKET        reduce using rule 54 (params -> LPAREN vars_func RPAREN .)


state 127

    (9) vars_func -> ID n_seen_var_name . COLON tipo n_set_var_type COMA vars_aux
    (10) vars_func -> ID n_seen_var_name . COLON tipo n_set_var_type

    COLON           shift and go to state 136


state 128

    (61) condicion -> IF LPAREN expresion RPAREN bloque . ELSE bloque
    (62) condicion -> IF LPAREN expresion RPAREN bloque .

    ELSE            shift and go to state 137
    SEMICOLON       reduce using rule 62 (condicion -> IF LPAREN expresion RPAREN bloque .)


state 129

    (19) bloque -> LBRACKET . estatuto_aux RBRACKET
    (20) bloque -> LBRACKET . RBRACKET
    (21) estatuto_aux -> . estatuto estatuto_aux
    (22) estatuto_aux -> . estatuto
    (23) estatuto -> . asignacion SEMICOLON
    (24) estatuto -> . condicion SEMICOLON
    (25) estatuto -> . escritura SEMICOLON
    (26) estatuto -> . return SEMICOLON
    (27) estatuto -> . for SEMICOLON
    (28) estatuto -> . while SEMICOLON
    (29) estatuto -> . call_module SEMICOLON
    (30) asignacion -> . ID EQUAL expresion
    (61) condicion -> . IF LPAREN expresion RPAREN bloque ELSE bloque
    (62) condicion -> . IF LPAREN expresion RPAREN bloque
    (63) escritura -> . PRINT LPAREN escritura_aux RPAREN
    (58) return -> . RETURN expresion
    (59) for -> . FOR asignacion TO CTEINT LBRACKET estatuto RBRACKET
    (60) while -> . WHILE LPAREN expresion RPAREN LBRACKET estatuto RBRACKET
    (56) call_module -> . ID LPAREN expresion RPAREN
    (57) call_module -> . ID LPAREN RPAREN

    RBRACKET        shift and go to state 139
    ID              shift and go to state 40
    IF              shift and go to state 41
    PRINT           shift and go to state 42
    RETURN          shift and go to state 43
    FOR             shift and go to state 44
    WHILE           shift and go to state 45

    estatuto_aux                   shift and go to state 138
    estatuto                       shift and go to state 140
    asignacion                     shift and go to state 33
    condicion                      shift and go to state 34
    escritura                      shift and go to state 35
    return                         shift and go to state 36
    for                            shift and go to state 37
    while                          shift and go to state 38
    call_module                    shift and go to state 39

state 130

    (64) escritura_aux -> expresion COMA escritura_aux .

    RPAREN          reduce using rule 64 (escritura_aux -> expresion COMA escritura_aux .)


state 131

    (65) escritura_aux -> CTESTRING COMA escritura_aux .

    RPAREN          reduce using rule 65 (escritura_aux -> CTESTRING COMA escritura_aux .)


state 132

    (59) for -> FOR asignacion TO CTEINT LBRACKET . estatuto RBRACKET
    (23) estatuto -> . asignacion SEMICOLON
    (24) estatuto -> . condicion SEMICOLON
    (25) estatuto -> . escritura SEMICOLON
    (26) estatuto -> . return SEMICOLON
    (27) estatuto -> . for SEMICOLON
    (28) estatuto -> . while SEMICOLON
    (29) estatuto -> . call_module SEMICOLON
    (30) asignacion -> . ID EQUAL expresion
    (61) condicion -> . IF LPAREN expresion RPAREN bloque ELSE bloque
    (62) condicion -> . IF LPAREN expresion RPAREN bloque
    (63) escritura -> . PRINT LPAREN escritura_aux RPAREN
    (58) return -> . RETURN expresion
    (59) for -> . FOR asignacion TO CTEINT LBRACKET estatuto RBRACKET
    (60) while -> . WHILE LPAREN expresion RPAREN LBRACKET estatuto RBRACKET
    (56) call_module -> . ID LPAREN expresion RPAREN
    (57) call_module -> . ID LPAREN RPAREN

    ID              shift and go to state 40
    IF              shift and go to state 41
    PRINT           shift and go to state 42
    RETURN          shift and go to state 43
    FOR             shift and go to state 44
    WHILE           shift and go to state 45

    asignacion                     shift and go to state 33
    estatuto                       shift and go to state 141
    condicion                      shift and go to state 34
    escritura                      shift and go to state 35
    return                         shift and go to state 36
    for                            shift and go to state 37
    while                          shift and go to state 38
    call_module                    shift and go to state 39

state 133

    (60) while -> WHILE LPAREN expresion RPAREN LBRACKET . estatuto RBRACKET
    (23) estatuto -> . asignacion SEMICOLON
    (24) estatuto -> . condicion SEMICOLON
    (25) estatuto -> . escritura SEMICOLON
    (26) estatuto -> . return SEMICOLON
    (27) estatuto -> . for SEMICOLON
    (28) estatuto -> . while SEMICOLON
    (29) estatuto -> . call_module SEMICOLON
    (30) asignacion -> . ID EQUAL expresion
    (61) condicion -> . IF LPAREN expresion RPAREN bloque ELSE bloque
    (62) condicion -> . IF LPAREN expresion RPAREN bloque
    (63) escritura -> . PRINT LPAREN escritura_aux RPAREN
    (58) return -> . RETURN expresion
    (59) for -> . FOR asignacion TO CTEINT LBRACKET estatuto RBRACKET
    (60) while -> . WHILE LPAREN expresion RPAREN LBRACKET estatuto RBRACKET
    (56) call_module -> . ID LPAREN expresion RPAREN
    (57) call_module -> . ID LPAREN RPAREN

    ID              shift and go to state 40
    IF              shift and go to state 41
    PRINT           shift and go to state 42
    RETURN          shift and go to state 43
    FOR             shift and go to state 44
    WHILE           shift and go to state 45

    estatuto                       shift and go to state 142
    asignacion                     shift and go to state 33
    condicion                      shift and go to state 34
    escritura                      shift and go to state 35
    return                         shift and go to state 36
    for                            shift and go to state 37
    while                          shift and go to state 38
    call_module                    shift and go to state 39

state 134

    (7) vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux .

    MODULE          reduce using rule 7 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux .)
    MAIN            reduce using rule 7 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux .)
    VAR             reduce using rule 7 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux .)
    ID              reduce using rule 7 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux .)
    IF              reduce using rule 7 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux .)
    PRINT           reduce using rule 7 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux .)
    RETURN          reduce using rule 7 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux .)
    FOR             reduce using rule 7 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux .)
    WHILE           reduce using rule 7 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux .)
    RBRACKET        reduce using rule 7 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux .)
    RPAREN          reduce using rule 7 (vars_aux -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux .)


state 135

    (50) module -> MODULE VOID n_seen_type ID n_seen_func_name params bloque_module module .

    MAIN            reduce using rule 50 (module -> MODULE VOID n_seen_type ID n_seen_func_name params bloque_module module .)


state 136

    (9) vars_func -> ID n_seen_var_name COLON . tipo n_set_var_type COMA vars_aux
    (10) vars_func -> ID n_seen_var_name COLON . tipo n_set_var_type
    (11) tipo -> . INT n_seen_type
    (12) tipo -> . FLOAT n_seen_type

    INT             shift and go to state 18
    FLOAT           shift and go to state 19

    tipo                           shift and go to state 143

state 137

    (61) condicion -> IF LPAREN expresion RPAREN bloque ELSE . bloque
    (19) bloque -> . LBRACKET estatuto_aux RBRACKET
    (20) bloque -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 129

    bloque                         shift and go to state 144

state 138

    (19) bloque -> LBRACKET estatuto_aux . RBRACKET

    RBRACKET        shift and go to state 145


state 139

    (20) bloque -> LBRACKET RBRACKET .

    ELSE            reduce using rule 20 (bloque -> LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 20 (bloque -> LBRACKET RBRACKET .)


state 140

    (21) estatuto_aux -> estatuto . estatuto_aux
    (22) estatuto_aux -> estatuto .
    (21) estatuto_aux -> . estatuto estatuto_aux
    (22) estatuto_aux -> . estatuto
    (23) estatuto -> . asignacion SEMICOLON
    (24) estatuto -> . condicion SEMICOLON
    (25) estatuto -> . escritura SEMICOLON
    (26) estatuto -> . return SEMICOLON
    (27) estatuto -> . for SEMICOLON
    (28) estatuto -> . while SEMICOLON
    (29) estatuto -> . call_module SEMICOLON
    (30) asignacion -> . ID EQUAL expresion
    (61) condicion -> . IF LPAREN expresion RPAREN bloque ELSE bloque
    (62) condicion -> . IF LPAREN expresion RPAREN bloque
    (63) escritura -> . PRINT LPAREN escritura_aux RPAREN
    (58) return -> . RETURN expresion
    (59) for -> . FOR asignacion TO CTEINT LBRACKET estatuto RBRACKET
    (60) while -> . WHILE LPAREN expresion RPAREN LBRACKET estatuto RBRACKET
    (56) call_module -> . ID LPAREN expresion RPAREN
    (57) call_module -> . ID LPAREN RPAREN

    RBRACKET        reduce using rule 22 (estatuto_aux -> estatuto .)
    ID              shift and go to state 40
    IF              shift and go to state 41
    PRINT           shift and go to state 42
    RETURN          shift and go to state 43
    FOR             shift and go to state 44
    WHILE           shift and go to state 45

    estatuto                       shift and go to state 140
    estatuto_aux                   shift and go to state 146
    asignacion                     shift and go to state 33
    condicion                      shift and go to state 34
    escritura                      shift and go to state 35
    return                         shift and go to state 36
    for                            shift and go to state 37
    while                          shift and go to state 38
    call_module                    shift and go to state 39

state 141

    (59) for -> FOR asignacion TO CTEINT LBRACKET estatuto . RBRACKET

    RBRACKET        shift and go to state 147


state 142

    (60) while -> WHILE LPAREN expresion RPAREN LBRACKET estatuto . RBRACKET

    RBRACKET        shift and go to state 148


state 143

    (9) vars_func -> ID n_seen_var_name COLON tipo . n_set_var_type COMA vars_aux
    (10) vars_func -> ID n_seen_var_name COLON tipo . n_set_var_type
    (71) n_set_var_type -> .

    COMA            reduce using rule 71 (n_set_var_type -> .)
    RPAREN          reduce using rule 71 (n_set_var_type -> .)

    n_set_var_type                 shift and go to state 149

state 144

    (61) condicion -> IF LPAREN expresion RPAREN bloque ELSE bloque .

    SEMICOLON       reduce using rule 61 (condicion -> IF LPAREN expresion RPAREN bloque ELSE bloque .)


state 145

    (19) bloque -> LBRACKET estatuto_aux RBRACKET .

    ELSE            reduce using rule 19 (bloque -> LBRACKET estatuto_aux RBRACKET .)
    SEMICOLON       reduce using rule 19 (bloque -> LBRACKET estatuto_aux RBRACKET .)


state 146

    (21) estatuto_aux -> estatuto estatuto_aux .

    RBRACKET        reduce using rule 21 (estatuto_aux -> estatuto estatuto_aux .)


state 147

    (59) for -> FOR asignacion TO CTEINT LBRACKET estatuto RBRACKET .

    SEMICOLON       reduce using rule 59 (for -> FOR asignacion TO CTEINT LBRACKET estatuto RBRACKET .)


state 148

    (60) while -> WHILE LPAREN expresion RPAREN LBRACKET estatuto RBRACKET .

    SEMICOLON       reduce using rule 60 (while -> WHILE LPAREN expresion RPAREN LBRACKET estatuto RBRACKET .)


state 149

    (9) vars_func -> ID n_seen_var_name COLON tipo n_set_var_type . COMA vars_aux
    (10) vars_func -> ID n_seen_var_name COLON tipo n_set_var_type .

    COMA            shift and go to state 150
    RPAREN          reduce using rule 10 (vars_func -> ID n_seen_var_name COLON tipo n_set_var_type .)


state 150

    (9) vars_func -> ID n_seen_var_name COLON tipo n_set_var_type COMA . vars_aux
    (7) vars_aux -> . ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON vars_aux
    (8) vars_aux -> . ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON

    ID              shift and go to state 15

    vars_aux                       shift and go to state 151

state 151

    (9) vars_func -> ID n_seen_var_name COLON tipo n_set_var_type COMA vars_aux .

    RPAREN          reduce using rule 9 (vars_func -> ID n_seen_var_name COLON tipo n_set_var_type COMA vars_aux .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 123 resolved as shift
