
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programaID COMMENT COLON SEMICOLON LBRACKET RBRACKET EQUAL DBEQUALS NOTEQUAL GREATERT LESST AND OR LPAREN RPAREN DOT COMA PLUS MINUS MULTIPLY DIVIDE CTESTRING CTEINT CTEF PROGRAM MAIN VAR INT FLOAT CHAR PRINT IF ELSE THEN TO WHILE DO FOR VOID MODULE RETURN WRITE READprograma : PROGRAM ID SEMICOLON vars module main\n                | PROGRAM ID SEMICOLON module main\n                | PROGRAM ID SEMICOLON vars main\n                | PROGRAM ID SEMICOLON mainmain : MAIN bloque_modulevars : VAR vars_auxvars_aux : vars_aux2 vars_aux\n                | vars_aux2vars_aux2 : ID n_seen_var_name COMA vars_aux2\n                 | ID n_seen_var_name COLON tipo n_set_var_type SEMICOLONtipo : INT n_seen_type\n            | FLOAT n_seen_typebloque_module : LBRACKET estatuto_module_aux RBRACKET\n                     | LBRACKET RBRACKET estatuto_module_aux : estatuto_module estatuto_module_aux\n                           | estatuto_moduleestatuto_module : estatuto\n                       | varsbloque : LBRACKET estatuto_aux RBRACKET\n              | LBRACKET RBRACKETestatuto_aux : estatuto estatuto_aux\n                    | estatutoestatuto : asignacion SEMICOLON\n                | condicion SEMICOLON\n                | escritura SEMICOLON\n                | return SEMICOLON\n                | for SEMICOLON\n                | while SEMICOLONasignacion : ID EQUAL expresionexpresion : exp AND expresion\n                 | expexp : exp_aux OR exp\n           | exp_aux exp_aux : exp_aux2 GREATERT exp_aux2\n               | exp_aux2 LESST exp_aux2\n               | exp_aux2 NOTEQUAL exp_aux2\n               | exp_aux2 DBEQUALS exp_aux2\n               | exp_aux2exp_aux2 : term PLUS exp_aux2\n                | term MINUS exp_aux2\n                | termterm : factor MULTIPLY term\n            | factor DIVIDE term\n            | factorfactor : LPAREN expresion RPAREN\n              | CTEINT\n              | CTEF\n              | IDmodule : MODULE VOID n_seen_type ID n_seen_func_name LPAREN RPAREN bloque_module module\n              | MODULE tipo ID n_seen_func_name LPAREN RPAREN bloque_module module\n              | MODULE VOID n_seen_type ID n_seen_func_name LPAREN RPAREN bloque_module\n              | MODULE tipo ID n_seen_func_name LPAREN RPAREN bloque_modulereturn : RETURN expresionfor : FOR asignacion TO CTEINT LBRACKET estatuto RBRACKETwhile : WHILE LPAREN expresion RPAREN LBRACKET estatuto RBRACKETcondicion : IF LPAREN expresion RPAREN bloque ELSE bloque\n                 | IF LPAREN expresion RPAREN bloqueescritura : PRINT LPAREN escritura_aux RPARENescritura_aux : expresion COMA escritura_aux\n                     | CTESTRING COMA escritura_aux\n                     | expresion\n                     | CTESTRINGn_seen_type : n_seen_var_name : n_seen_func_name : n_set_var_type : '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,7,12,13,21,23,31,51,],[0,-4,-3,-2,-5,-1,-14,-13,]),'ID':([2,8,14,15,17,18,19,20,22,24,26,28,29,32,33,34,44,45,47,53,54,55,56,57,58,59,60,61,68,73,74,83,84,85,86,87,88,89,90,91,92,101,102,116,120,123,124,130,],[3,16,-6,16,-63,27,-63,-63,41,-7,49,-11,-12,41,-17,-18,71,41,16,-23,-24,-25,-26,-27,-28,71,71,71,71,71,-9,71,71,71,71,71,71,71,71,71,71,71,71,-10,41,41,41,41,]),'SEMICOLON':([3,19,20,28,29,35,36,37,38,39,40,62,63,64,65,66,67,69,70,71,75,78,96,100,103,104,105,106,107,108,109,110,111,112,113,119,129,134,135,137,138,],[4,-63,-63,-11,-12,53,54,55,56,57,58,-53,-31,-33,-38,-41,-44,-46,-47,-48,-66,-29,116,-58,-30,-32,-34,-35,-36,-37,-39,-40,-42,-43,-45,-57,-20,-56,-19,-54,-55,]),'VAR':([4,14,15,22,24,32,33,34,53,54,55,56,57,58,74,116,],[8,-6,-8,8,-7,8,-17,-18,-23,-24,-25,-26,-27,-28,-9,-10,]),'MODULE':([4,5,14,15,24,31,51,74,116,118,125,],[9,9,-6,-8,-7,-14,-13,-9,-10,9,9,]),'MAIN':([4,5,6,11,14,15,24,31,51,74,116,118,125,126,133,],[10,10,10,10,-6,-8,-7,-14,-13,-9,-10,-52,-51,-50,-49,]),'VOID':([9,],[17,]),'INT':([9,48,],[19,19,]),'FLOAT':([9,48,],[20,20,]),'LBRACKET':([10,98,99,114,115,117,127,],[22,22,120,123,124,22,120,]),'IF':([14,15,22,24,32,33,34,53,54,55,56,57,58,74,116,120,123,124,130,],[-6,-8,42,-7,42,-17,-18,-23,-24,-25,-26,-27,-28,-9,-10,42,42,42,42,]),'PRINT':([14,15,22,24,32,33,34,53,54,55,56,57,58,74,116,120,123,124,130,],[-6,-8,43,-7,43,-17,-18,-23,-24,-25,-26,-27,-28,-9,-10,43,43,43,43,]),'RETURN':([14,15,22,24,32,33,34,53,54,55,56,57,58,74,116,120,123,124,130,],[-6,-8,44,-7,44,-17,-18,-23,-24,-25,-26,-27,-28,-9,-10,44,44,44,44,]),'FOR':([14,15,22,24,32,33,34,53,54,55,56,57,58,74,116,120,123,124,130,],[-6,-8,45,-7,45,-17,-18,-23,-24,-25,-26,-27,-28,-9,-10,45,45,45,45,]),'WHILE':([14,15,22,24,32,33,34,53,54,55,56,57,58,74,116,120,123,124,130,],[-6,-8,46,-7,46,-17,-18,-23,-24,-25,-26,-27,-28,-9,-10,46,46,46,46,]),'RBRACKET':([14,15,22,24,30,32,33,34,52,53,54,55,56,57,58,74,116,120,128,130,131,132,136,],[-6,-8,31,-7,51,-16,-17,-18,-15,-23,-24,-25,-26,-27,-28,-9,-10,129,135,-22,137,138,-21,]),'COMA':([16,25,63,64,65,66,67,69,70,71,81,82,103,104,105,106,107,108,109,110,111,112,113,],[-64,47,-31,-33,-38,-41,-44,-46,-47,-48,101,102,-30,-32,-34,-35,-36,-37,-39,-40,-42,-43,-45,]),'COLON':([16,25,],[-64,48,]),'LPAREN':([27,42,43,44,46,49,50,59,60,61,68,73,76,83,84,85,86,87,88,89,90,91,92,101,102,],[-65,60,61,68,73,-65,77,68,68,68,68,68,97,68,68,68,68,68,68,68,68,68,68,68,68,]),'EQUAL':([41,],[59,]),'CTEINT':([44,59,60,61,68,73,83,84,85,86,87,88,89,90,91,92,94,101,102,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,114,69,69,]),'CTEF':([44,59,60,61,68,73,83,84,85,86,87,88,89,90,91,92,101,102,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'CTESTRING':([61,101,102,],[82,82,82,]),'AND':([63,64,65,66,67,69,70,71,104,105,106,107,108,109,110,111,112,113,],[83,-33,-38,-41,-44,-46,-47,-48,-32,-34,-35,-36,-37,-39,-40,-42,-43,-45,]),'TO':([63,64,65,66,67,69,70,71,72,78,103,104,105,106,107,108,109,110,111,112,113,],[-31,-33,-38,-41,-44,-46,-47,-48,94,-29,-30,-32,-34,-35,-36,-37,-39,-40,-42,-43,-45,]),'RPAREN':([63,64,65,66,67,69,70,71,77,79,80,81,82,93,95,97,103,104,105,106,107,108,109,110,111,112,113,121,122,],[-31,-33,-38,-41,-44,-46,-47,-48,98,99,100,-61,-62,113,115,117,-30,-32,-34,-35,-36,-37,-39,-40,-42,-43,-45,-59,-60,]),'OR':([64,65,66,67,69,70,71,105,106,107,108,109,110,111,112,113,],[84,-38,-41,-44,-46,-47,-48,-34,-35,-36,-37,-39,-40,-42,-43,-45,]),'GREATERT':([65,66,67,69,70,71,109,110,111,112,113,],[85,-41,-44,-46,-47,-48,-39,-40,-42,-43,-45,]),'LESST':([65,66,67,69,70,71,109,110,111,112,113,],[86,-41,-44,-46,-47,-48,-39,-40,-42,-43,-45,]),'NOTEQUAL':([65,66,67,69,70,71,109,110,111,112,113,],[87,-41,-44,-46,-47,-48,-39,-40,-42,-43,-45,]),'DBEQUALS':([65,66,67,69,70,71,109,110,111,112,113,],[88,-41,-44,-46,-47,-48,-39,-40,-42,-43,-45,]),'PLUS':([66,67,69,70,71,111,112,113,],[89,-44,-46,-47,-48,-42,-43,-45,]),'MINUS':([66,67,69,70,71,111,112,113,],[90,-44,-46,-47,-48,-42,-43,-45,]),'MULTIPLY':([67,69,70,71,113,],[91,-46,-47,-48,-45,]),'DIVIDE':([67,69,70,71,113,],[92,-46,-47,-48,-45,]),'ELSE':([119,129,135,],[127,-20,-19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'vars':([4,22,32,],[5,34,34,]),'module':([4,5,118,125,],[6,11,126,133,]),'main':([4,5,6,11,],[7,12,13,23,]),'vars_aux':([8,15,],[14,24,]),'vars_aux2':([8,15,47,],[15,15,74,]),'tipo':([9,48,],[18,75,]),'bloque_module':([10,98,117,],[21,118,125,]),'n_seen_var_name':([16,],[25,]),'n_seen_type':([17,19,20,],[26,28,29,]),'estatuto_module_aux':([22,32,],[30,52,]),'estatuto_module':([22,32,],[32,32,]),'estatuto':([22,32,120,123,124,130,],[33,33,130,131,132,130,]),'asignacion':([22,32,45,120,123,124,130,],[35,35,72,35,35,35,35,]),'condicion':([22,32,120,123,124,130,],[36,36,36,36,36,36,]),'escritura':([22,32,120,123,124,130,],[37,37,37,37,37,37,]),'return':([22,32,120,123,124,130,],[38,38,38,38,38,38,]),'for':([22,32,120,123,124,130,],[39,39,39,39,39,39,]),'while':([22,32,120,123,124,130,],[40,40,40,40,40,40,]),'n_seen_func_name':([27,49,],[50,76,]),'expresion':([44,59,60,61,68,73,83,101,102,],[62,78,79,81,93,95,103,81,81,]),'exp':([44,59,60,61,68,73,83,84,101,102,],[63,63,63,63,63,63,63,104,63,63,]),'exp_aux':([44,59,60,61,68,73,83,84,101,102,],[64,64,64,64,64,64,64,64,64,64,]),'exp_aux2':([44,59,60,61,68,73,83,84,85,86,87,88,89,90,101,102,],[65,65,65,65,65,65,65,65,105,106,107,108,109,110,65,65,]),'term':([44,59,60,61,68,73,83,84,85,86,87,88,89,90,91,92,101,102,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,111,112,66,66,]),'factor':([44,59,60,61,68,73,83,84,85,86,87,88,89,90,91,92,101,102,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'escritura_aux':([61,101,102,],[80,121,122,]),'n_set_var_type':([75,],[96,]),'bloque':([99,127,],[119,134,]),'estatuto_aux':([120,130,],[128,136,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> PROGRAM ID SEMICOLON vars module main','programa',6,'p_programa','lexerparser.py',130),
  ('programa -> PROGRAM ID SEMICOLON module main','programa',5,'p_programa','lexerparser.py',131),
  ('programa -> PROGRAM ID SEMICOLON vars main','programa',5,'p_programa','lexerparser.py',132),
  ('programa -> PROGRAM ID SEMICOLON main','programa',4,'p_programa','lexerparser.py',133),
  ('main -> MAIN bloque_module','main',2,'p_main','lexerparser.py',138),
  ('vars -> VAR vars_aux','vars',2,'p_vars','lexerparser.py',142),
  ('vars_aux -> vars_aux2 vars_aux','vars_aux',2,'p_vars_aux','lexerparser.py',146),
  ('vars_aux -> vars_aux2','vars_aux',1,'p_vars_aux','lexerparser.py',147),
  ('vars_aux2 -> ID n_seen_var_name COMA vars_aux2','vars_aux2',4,'p_vars_aux2','lexerparser.py',151),
  ('vars_aux2 -> ID n_seen_var_name COLON tipo n_set_var_type SEMICOLON','vars_aux2',6,'p_vars_aux2','lexerparser.py',152),
  ('tipo -> INT n_seen_type','tipo',2,'p_tipo','lexerparser.py',156),
  ('tipo -> FLOAT n_seen_type','tipo',2,'p_tipo','lexerparser.py',157),
  ('bloque_module -> LBRACKET estatuto_module_aux RBRACKET','bloque_module',3,'p_bloque_module','lexerparser.py',161),
  ('bloque_module -> LBRACKET RBRACKET','bloque_module',2,'p_bloque_module','lexerparser.py',162),
  ('estatuto_module_aux -> estatuto_module estatuto_module_aux','estatuto_module_aux',2,'p_estatuto_module_aux','lexerparser.py',166),
  ('estatuto_module_aux -> estatuto_module','estatuto_module_aux',1,'p_estatuto_module_aux','lexerparser.py',167),
  ('estatuto_module -> estatuto','estatuto_module',1,'p_estatuto_module','lexerparser.py',171),
  ('estatuto_module -> vars','estatuto_module',1,'p_estatuto_module','lexerparser.py',172),
  ('bloque -> LBRACKET estatuto_aux RBRACKET','bloque',3,'p_bloque','lexerparser.py',176),
  ('bloque -> LBRACKET RBRACKET','bloque',2,'p_bloque','lexerparser.py',177),
  ('estatuto_aux -> estatuto estatuto_aux','estatuto_aux',2,'p_estatuto_aux','lexerparser.py',181),
  ('estatuto_aux -> estatuto','estatuto_aux',1,'p_estatuto_aux','lexerparser.py',182),
  ('estatuto -> asignacion SEMICOLON','estatuto',2,'p_estatuto','lexerparser.py',186),
  ('estatuto -> condicion SEMICOLON','estatuto',2,'p_estatuto','lexerparser.py',187),
  ('estatuto -> escritura SEMICOLON','estatuto',2,'p_estatuto','lexerparser.py',188),
  ('estatuto -> return SEMICOLON','estatuto',2,'p_estatuto','lexerparser.py',189),
  ('estatuto -> for SEMICOLON','estatuto',2,'p_estatuto','lexerparser.py',190),
  ('estatuto -> while SEMICOLON','estatuto',2,'p_estatuto','lexerparser.py',191),
  ('asignacion -> ID EQUAL expresion','asignacion',3,'p_asignacion','lexerparser.py',195),
  ('expresion -> exp AND expresion','expresion',3,'p_expresion','lexerparser.py',199),
  ('expresion -> exp','expresion',1,'p_expresion','lexerparser.py',200),
  ('exp -> exp_aux OR exp','exp',3,'p_exp','lexerparser.py',204),
  ('exp -> exp_aux','exp',1,'p_exp','lexerparser.py',205),
  ('exp_aux -> exp_aux2 GREATERT exp_aux2','exp_aux',3,'p_exp_aux','lexerparser.py',209),
  ('exp_aux -> exp_aux2 LESST exp_aux2','exp_aux',3,'p_exp_aux','lexerparser.py',210),
  ('exp_aux -> exp_aux2 NOTEQUAL exp_aux2','exp_aux',3,'p_exp_aux','lexerparser.py',211),
  ('exp_aux -> exp_aux2 DBEQUALS exp_aux2','exp_aux',3,'p_exp_aux','lexerparser.py',212),
  ('exp_aux -> exp_aux2','exp_aux',1,'p_exp_aux','lexerparser.py',213),
  ('exp_aux2 -> term PLUS exp_aux2','exp_aux2',3,'p_exp_aux2','lexerparser.py',217),
  ('exp_aux2 -> term MINUS exp_aux2','exp_aux2',3,'p_exp_aux2','lexerparser.py',218),
  ('exp_aux2 -> term','exp_aux2',1,'p_exp_aux2','lexerparser.py',219),
  ('term -> factor MULTIPLY term','term',3,'p_term','lexerparser.py',223),
  ('term -> factor DIVIDE term','term',3,'p_term','lexerparser.py',224),
  ('term -> factor','term',1,'p_term','lexerparser.py',225),
  ('factor -> LPAREN expresion RPAREN','factor',3,'p_factor','lexerparser.py',229),
  ('factor -> CTEINT','factor',1,'p_factor','lexerparser.py',230),
  ('factor -> CTEF','factor',1,'p_factor','lexerparser.py',231),
  ('factor -> ID','factor',1,'p_factor','lexerparser.py',232),
  ('module -> MODULE VOID n_seen_type ID n_seen_func_name LPAREN RPAREN bloque_module module','module',9,'p_module','lexerparser.py',236),
  ('module -> MODULE tipo ID n_seen_func_name LPAREN RPAREN bloque_module module','module',8,'p_module','lexerparser.py',237),
  ('module -> MODULE VOID n_seen_type ID n_seen_func_name LPAREN RPAREN bloque_module','module',8,'p_module','lexerparser.py',238),
  ('module -> MODULE tipo ID n_seen_func_name LPAREN RPAREN bloque_module','module',7,'p_module','lexerparser.py',239),
  ('return -> RETURN expresion','return',2,'p_return','lexerparser.py',243),
  ('for -> FOR asignacion TO CTEINT LBRACKET estatuto RBRACKET','for',7,'p_for','lexerparser.py',247),
  ('while -> WHILE LPAREN expresion RPAREN LBRACKET estatuto RBRACKET','while',7,'p_while','lexerparser.py',251),
  ('condicion -> IF LPAREN expresion RPAREN bloque ELSE bloque','condicion',7,'p_condicion','lexerparser.py',255),
  ('condicion -> IF LPAREN expresion RPAREN bloque','condicion',5,'p_condicion','lexerparser.py',256),
  ('escritura -> PRINT LPAREN escritura_aux RPAREN','escritura',4,'p_escritura','lexerparser.py',260),
  ('escritura_aux -> expresion COMA escritura_aux','escritura_aux',3,'p_escritura_aux','lexerparser.py',264),
  ('escritura_aux -> CTESTRING COMA escritura_aux','escritura_aux',3,'p_escritura_aux','lexerparser.py',265),
  ('escritura_aux -> expresion','escritura_aux',1,'p_escritura_aux','lexerparser.py',266),
  ('escritura_aux -> CTESTRING','escritura_aux',1,'p_escritura_aux','lexerparser.py',267),
  ('n_seen_type -> <empty>','n_seen_type',0,'p_n_seen_type','lexerparser.py',286),
  ('n_seen_var_name -> <empty>','n_seen_var_name',0,'p_n_seen_var_name','lexerparser.py',292),
  ('n_seen_func_name -> <empty>','n_seen_func_name',0,'p_n_seen_func_name','lexerparser.py',301),
  ('n_set_var_type -> <empty>','n_set_var_type',0,'p_n_set_var_type','lexerparser.py',311),
]
